
STM32_w5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b30  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cb8  08000cb8  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000cb8  08000cb8  00010cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000cbc  08000cbc  00010cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000050  20000000  08000cc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020050  2**0
                  CONTENTS
  7 .bss          00000020  20000050  20000050  00020050  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000070  20000070  00020050  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 10 .debug_info   00001d0d  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000688  00000000  00000000  00021d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000188  00000000  00000000  00022418  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000120  00000000  00000000  000225a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000c4f  00000000  00000000  000226c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000c6d  00000000  00000000  0002330f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00023f7c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000003ec  00000000  00000000  00023ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000243e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000050 	.word	0x20000050
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000ca0 	.word	0x08000ca0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000054 	.word	0x20000054
 80001c4:	08000ca0 	.word	0x08000ca0

080001c8 <InitGPIO>:
//In this file we will implement handlers for GPIO

#include "GPIO.h"


void InitGPIO(void){
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	/*************************************************
	////////////ENABLE CLK FOR PERIPHERALS////////////
	*************************************************/

	//Enable GPIOA AHB1 clock source
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001cc:	4a98      	ldr	r2, [pc, #608]	; (8000430 <InitGPIO+0x268>)
 80001ce:	4b98      	ldr	r3, [pc, #608]	; (8000430 <InitGPIO+0x268>)
 80001d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	6313      	str	r3, [r2, #48]	; 0x30
	//Enable GPIOB AHB1 clock source
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80001d8:	4a95      	ldr	r2, [pc, #596]	; (8000430 <InitGPIO+0x268>)
 80001da:	4b95      	ldr	r3, [pc, #596]	; (8000430 <InitGPIO+0x268>)
 80001dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001de:	f043 0302 	orr.w	r3, r3, #2
 80001e2:	6313      	str	r3, [r2, #48]	; 0x30
	//Enable GPIOD AHB1 clock source
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80001e4:	4a92      	ldr	r2, [pc, #584]	; (8000430 <InitGPIO+0x268>)
 80001e6:	4b92      	ldr	r3, [pc, #584]	; (8000430 <InitGPIO+0x268>)
 80001e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001ea:	f043 0308 	orr.w	r3, r3, #8
 80001ee:	6313      	str	r3, [r2, #48]	; 0x30
	//Enable SPI3 APB1 clock source 42 MHz max clock
	RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 80001f0:	4a8f      	ldr	r2, [pc, #572]	; (8000430 <InitGPIO+0x268>)
 80001f2:	4b8f      	ldr	r3, [pc, #572]	; (8000430 <InitGPIO+0x268>)
 80001f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80001f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80001fa:	6413      	str	r3, [r2, #64]	; 0x40
	//Enable SPI1 APB2 clock source 84 MHz max clock
	RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 80001fc:	4a8c      	ldr	r2, [pc, #560]	; (8000430 <InitGPIO+0x268>)
 80001fe:	4b8c      	ldr	r3, [pc, #560]	; (8000430 <InitGPIO+0x268>)
 8000200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000202:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000206:	6453      	str	r3, [r2, #68]	; 0x44
	//Enable SYSCONFIG for interrupt purpose
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000208:	4a89      	ldr	r2, [pc, #548]	; (8000430 <InitGPIO+0x268>)
 800020a:	4b89      	ldr	r3, [pc, #548]	; (8000430 <InitGPIO+0x268>)
 800020c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800020e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000212:	6453      	str	r3, [r2, #68]	; 0x44
				*************************************************/

	//////////////////////////////////////////////////////////
	//GPIOA PA3 configure for interrupt generated from W5500//
	//////////////////////////////////////////////////////////
	GPIOA -> MODER 		&= ~(GPIO_MODER_MODER3); 		//PA3 pin as input
 8000214:	4a87      	ldr	r2, [pc, #540]	; (8000434 <InitGPIO+0x26c>)
 8000216:	4b87      	ldr	r3, [pc, #540]	; (8000434 <InitGPIO+0x26c>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800021e:	6013      	str	r3, [r2, #0]
	//GPIOA -> PUPDR 		&= ~(GPIO_PUPDR_PUPDR3); 	//PA3 no pull-up, pull-down
	GPIOA -> PUPDR 		|= GPIO_PUPDR_PUPDR3_0; 		//PA3 pull-up
 8000220:	4a84      	ldr	r2, [pc, #528]	; (8000434 <InitGPIO+0x26c>)
 8000222:	4b84      	ldr	r3, [pc, #528]	; (8000434 <InitGPIO+0x26c>)
 8000224:	68db      	ldr	r3, [r3, #12]
 8000226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800022a:	60d3      	str	r3, [r2, #12]
	//Enable external interrupt on line 3
	//NVIC_EnableIRQ(EXTI3_IRQn);						//Enable external interrupt
	NVIC -> ISER[0] 	|= (1 << EXTI3_IRQn); 			//Enable external interrupt
 800022c:	4a82      	ldr	r2, [pc, #520]	; (8000438 <InitGPIO+0x270>)
 800022e:	4b82      	ldr	r3, [pc, #520]	; (8000438 <InitGPIO+0x270>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000236:	6013      	str	r3, [r2, #0]
	//NVIC_SetPriority(EXTI3_IRQn,1); 					//set priority of EXTI3_IRQn to 1 (lower are the number the higher are priority)
	NVIC -> IP[EXTI3_IRQn] 		= (uint8_t) 0x01;		//set priority of EXTI3_IRQn to 1 (lower are the number the higher are priority)
 8000238:	4b7f      	ldr	r3, [pc, #508]	; (8000438 <InitGPIO+0x270>)
 800023a:	2201      	movs	r2, #1
 800023c:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
	//Select external interrupt in SYSCFG register
	SYSCFG -> EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PA;		//PA3 as external interrupt setting up in EXTICR1
 8000240:	4a7e      	ldr	r2, [pc, #504]	; (800043c <InitGPIO+0x274>)
 8000242:	4b7e      	ldr	r3, [pc, #504]	; (800043c <InitGPIO+0x274>)
 8000244:	689b      	ldr	r3, [r3, #8]
 8000246:	6093      	str	r3, [r2, #8]
	//Interrupt was generated in high to low voltage transition
	EXTI -> FTSR 		|= EXTI_FTSR_TR3;				//interrupt generated at falling edge
 8000248:	4a7d      	ldr	r2, [pc, #500]	; (8000440 <InitGPIO+0x278>)
 800024a:	4b7d      	ldr	r3, [pc, #500]	; (8000440 <InitGPIO+0x278>)
 800024c:	68db      	ldr	r3, [r3, #12]
 800024e:	f043 0308 	orr.w	r3, r3, #8
 8000252:	60d3      	str	r3, [r2, #12]
	//Setup masked register
	//0- masked (disabled), 1- not masked (enabled)
	EXTI -> IMR			|= EXTI_IMR_MR3; 				//Enable external interrupt at pin 3
 8000254:	4a7a      	ldr	r2, [pc, #488]	; (8000440 <InitGPIO+0x278>)
 8000256:	4b7a      	ldr	r3, [pc, #488]	; (8000440 <InitGPIO+0x278>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f043 0308 	orr.w	r3, r3, #8
 800025e:	6013      	str	r3, [r2, #0]

	/////////////////////////////////////////////////////////
	//GPIOA PA0 user button configure as external interrupt//
	/////////////////////////////////////////////////////////
	GPIOA -> MODER 		&= ~(GPIO_MODER_MODER0); 		//PA0 pin as input
 8000260:	4a74      	ldr	r2, [pc, #464]	; (8000434 <InitGPIO+0x26c>)
 8000262:	4b74      	ldr	r3, [pc, #464]	; (8000434 <InitGPIO+0x26c>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f023 0303 	bic.w	r3, r3, #3
 800026a:	6013      	str	r3, [r2, #0]
	GPIOA -> PUPDR 		&= ~(GPIO_PUPDR_PUPDR0); 		//PA0 no pull-up, pull-down
 800026c:	4a71      	ldr	r2, [pc, #452]	; (8000434 <InitGPIO+0x26c>)
 800026e:	4b71      	ldr	r3, [pc, #452]	; (8000434 <InitGPIO+0x26c>)
 8000270:	68db      	ldr	r3, [r3, #12]
 8000272:	f023 0303 	bic.w	r3, r3, #3
 8000276:	60d3      	str	r3, [r2, #12]
	//Enable external interrupt on line 0
	NVIC -> ISER[0] 	|= (1 << EXTI0_IRQn); 			//Enable external interrupt
 8000278:	4a6f      	ldr	r2, [pc, #444]	; (8000438 <InitGPIO+0x270>)
 800027a:	4b6f      	ldr	r3, [pc, #444]	; (8000438 <InitGPIO+0x270>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000282:	6013      	str	r3, [r2, #0]
	NVIC -> IP[EXTI0_IRQn] 		= (uint8_t) 0x01;		//set priority of EXTI3_IRQn to 1 (lower are the number the higher are priority)
 8000284:	4b6c      	ldr	r3, [pc, #432]	; (8000438 <InitGPIO+0x270>)
 8000286:	2201      	movs	r2, #1
 8000288:	f883 2306 	strb.w	r2, [r3, #774]	; 0x306
	//Select external interrupt in SYSCFG register
	SYSCFG -> EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;		//PA0 as external interrupt setting up in EXTICR1
 800028c:	4a6b      	ldr	r2, [pc, #428]	; (800043c <InitGPIO+0x274>)
 800028e:	4b6b      	ldr	r3, [pc, #428]	; (800043c <InitGPIO+0x274>)
 8000290:	689b      	ldr	r3, [r3, #8]
 8000292:	6093      	str	r3, [r2, #8]
	//Interrupt was generated in low to high voltage transition
	EXTI -> RTSR 		|= EXTI_RTSR_TR0;				//interrupt generated at rising edge
 8000294:	4a6a      	ldr	r2, [pc, #424]	; (8000440 <InitGPIO+0x278>)
 8000296:	4b6a      	ldr	r3, [pc, #424]	; (8000440 <InitGPIO+0x278>)
 8000298:	689b      	ldr	r3, [r3, #8]
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	6093      	str	r3, [r2, #8]
	//Setup masked register
	//0- masked (disabled), 1- not masked (enabled)
	EXTI -> IMR			|= EXTI_IMR_MR0; 				//Enable external interrupt at pin 0
 80002a0:	4a67      	ldr	r2, [pc, #412]	; (8000440 <InitGPIO+0x278>)
 80002a2:	4b67      	ldr	r3, [pc, #412]	; (8000440 <InitGPIO+0x278>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f043 0301 	orr.w	r3, r3, #1
 80002aa:	6013      	str	r3, [r2, #0]


	/////////////
	//GPIOA PA8//
	/////////////
	GPIOA -> MODER 		|= GPIO_MODER_MODER8_0; 		//PA8 pin as output
 80002ac:	4a61      	ldr	r2, [pc, #388]	; (8000434 <InitGPIO+0x26c>)
 80002ae:	4b61      	ldr	r3, [pc, #388]	; (8000434 <InitGPIO+0x26c>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002b6:	6013      	str	r3, [r2, #0]
	GPIOA -> OTYPER 	&= ~(GPIO_OTYPER_OT_8);			//PA8 output type push-pull
 80002b8:	4a5e      	ldr	r2, [pc, #376]	; (8000434 <InitGPIO+0x26c>)
 80002ba:	4b5e      	ldr	r3, [pc, #376]	; (8000434 <InitGPIO+0x26c>)
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002c2:	6053      	str	r3, [r2, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR8; 		//PA8 output speed register (very high speed)
 80002c4:	4a5b      	ldr	r2, [pc, #364]	; (8000434 <InitGPIO+0x26c>)
 80002c6:	4b5b      	ldr	r3, [pc, #364]	; (8000434 <InitGPIO+0x26c>)
 80002c8:	689b      	ldr	r3, [r3, #8]
 80002ca:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80002ce:	6093      	str	r3, [r2, #8]
	GPIOA -> PUPDR 		|= GPIO_PUPDR_PUPDR8_0; 		//PA8 pull-up
 80002d0:	4a58      	ldr	r2, [pc, #352]	; (8000434 <InitGPIO+0x26c>)
 80002d2:	4b58      	ldr	r3, [pc, #352]	; (8000434 <InitGPIO+0x26c>)
 80002d4:	68db      	ldr	r3, [r3, #12]
 80002d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002da:	60d3      	str	r3, [r2, #12]

	//////////////////////////////////////
	//GPIOD PD13/LED3 on discovery board//
	//////////////////////////////////////
	GPIOD -> MODER 		|= GPIO_MODER_MODER13_0;		//PD13 pin as output
 80002dc:	4a59      	ldr	r2, [pc, #356]	; (8000444 <InitGPIO+0x27c>)
 80002de:	4b59      	ldr	r3, [pc, #356]	; (8000444 <InitGPIO+0x27c>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002e6:	6013      	str	r3, [r2, #0]
	GPIOD -> OTYPER 	&= ~(GPIO_OTYPER_OT_13);		//PD13 output type push-pull
 80002e8:	4a56      	ldr	r2, [pc, #344]	; (8000444 <InitGPIO+0x27c>)
 80002ea:	4b56      	ldr	r3, [pc, #344]	; (8000444 <InitGPIO+0x27c>)
 80002ec:	685b      	ldr	r3, [r3, #4]
 80002ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80002f2:	6053      	str	r3, [r2, #4]
	GPIOD -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR13_0; 	//PD13 output speed register (medium speed)
 80002f4:	4a53      	ldr	r2, [pc, #332]	; (8000444 <InitGPIO+0x27c>)
 80002f6:	4b53      	ldr	r3, [pc, #332]	; (8000444 <InitGPIO+0x27c>)
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002fe:	6093      	str	r3, [r2, #8]
	GPIOD -> PUPDR 		&= ~(GPIO_PUPDR_PUPDR13); 		//PD13 pull-up
 8000300:	4a50      	ldr	r2, [pc, #320]	; (8000444 <InitGPIO+0x27c>)
 8000302:	4b50      	ldr	r3, [pc, #320]	; (8000444 <InitGPIO+0x27c>)
 8000304:	68db      	ldr	r3, [r3, #12]
 8000306:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800030a:	60d3      	str	r3, [r2, #12]

	////////////////////////////////////////////
	//GPIOA PA2 pin for reset control in W5500//
	////////////////////////////////////////////
	GPIOA -> MODER 		|=  GPIO_MODER_MODER2_0; 		//PA2 pin as output
 800030c:	4a49      	ldr	r2, [pc, #292]	; (8000434 <InitGPIO+0x26c>)
 800030e:	4b49      	ldr	r3, [pc, #292]	; (8000434 <InitGPIO+0x26c>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f043 0310 	orr.w	r3, r3, #16
 8000316:	6013      	str	r3, [r2, #0]
	GPIOA -> OTYPER 	&= ~(GPIO_OTYPER_OT_2);			//PA2 output type push-pull
 8000318:	4a46      	ldr	r2, [pc, #280]	; (8000434 <InitGPIO+0x26c>)
 800031a:	4b46      	ldr	r3, [pc, #280]	; (8000434 <InitGPIO+0x26c>)
 800031c:	685b      	ldr	r3, [r3, #4]
 800031e:	f023 0304 	bic.w	r3, r3, #4
 8000322:	6053      	str	r3, [r2, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR2_0; 	//PA2 output speed register (medium speed)
 8000324:	4a43      	ldr	r2, [pc, #268]	; (8000434 <InitGPIO+0x26c>)
 8000326:	4b43      	ldr	r3, [pc, #268]	; (8000434 <InitGPIO+0x26c>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f043 0310 	orr.w	r3, r3, #16
 800032e:	6093      	str	r3, [r2, #8]
	GPIOA -> PUPDR 		&= ~(GPIO_PUPDR_PUPDR2); 		//PA2 pull-up
 8000330:	4a40      	ldr	r2, [pc, #256]	; (8000434 <InitGPIO+0x26c>)
 8000332:	4b40      	ldr	r3, [pc, #256]	; (8000434 <InitGPIO+0x26c>)
 8000334:	68db      	ldr	r3, [r3, #12]
 8000336:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800033a:	60d3      	str	r3, [r2, #12]
	GPIOA -> ODR 		|= GPIO_ODR_ODR_2; 				//Enable W5500 module
 800033c:	4a3d      	ldr	r2, [pc, #244]	; (8000434 <InitGPIO+0x26c>)
 800033e:	4b3d      	ldr	r3, [pc, #244]	; (8000434 <InitGPIO+0x26c>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	f043 0304 	orr.w	r3, r3, #4
 8000346:	6153      	str	r3, [r2, #20]
//	GPIOA -> AFR[0] 	|= (0x05 << 16); 			//PA4 alternate function SPI1_NSS

	//////////
	//SPI1_NSS software
	//////////
	GPIOA -> MODER		|= GPIO_MODER_MODER4_0;		//PA4 pin output mode
 8000348:	4a3a      	ldr	r2, [pc, #232]	; (8000434 <InitGPIO+0x26c>)
 800034a:	4b3a      	ldr	r3, [pc, #232]	; (8000434 <InitGPIO+0x26c>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000352:	6013      	str	r3, [r2, #0]
	GPIOA -> OTYPER 	&= ~(GPIO_OTYPER_OT_4); 	//PA4 output push-pull
 8000354:	4a37      	ldr	r2, [pc, #220]	; (8000434 <InitGPIO+0x26c>)
 8000356:	4b37      	ldr	r3, [pc, #220]	; (8000434 <InitGPIO+0x26c>)
 8000358:	685b      	ldr	r3, [r3, #4]
 800035a:	f023 0310 	bic.w	r3, r3, #16
 800035e:	6053      	str	r3, [r2, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR4; 	//PA4 output speed register (very high speed)
 8000360:	4a34      	ldr	r2, [pc, #208]	; (8000434 <InitGPIO+0x26c>)
 8000362:	4b34      	ldr	r3, [pc, #208]	; (8000434 <InitGPIO+0x26c>)
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800036a:	6093      	str	r3, [r2, #8]
	GPIOA -> PUPDR		|= GPIO_PUPDR_PUPDR4_0; 	//PA4 pull-up
 800036c:	4a31      	ldr	r2, [pc, #196]	; (8000434 <InitGPIO+0x26c>)
 800036e:	4b31      	ldr	r3, [pc, #196]	; (8000434 <InitGPIO+0x26c>)
 8000370:	68db      	ldr	r3, [r3, #12]
 8000372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000376:	60d3      	str	r3, [r2, #12]
	GPIOA -> ODR 		|= GPIO_ODR_ODR_4;			//PA4 set in a high output logical level
 8000378:	4a2e      	ldr	r2, [pc, #184]	; (8000434 <InitGPIO+0x26c>)
 800037a:	4b2e      	ldr	r3, [pc, #184]	; (8000434 <InitGPIO+0x26c>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	f043 0310 	orr.w	r3, r3, #16
 8000382:	6153      	str	r3, [r2, #20]

	//////////
	//SPI1_CLK
	//////////
	//pin PA5 CLK configuration
	GPIOA -> MODER  	|= GPIO_MODER_MODER5_1; 	//PA5 pin as alternate function
 8000384:	4a2b      	ldr	r2, [pc, #172]	; (8000434 <InitGPIO+0x26c>)
 8000386:	4b2b      	ldr	r3, [pc, #172]	; (8000434 <InitGPIO+0x26c>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800038e:	6013      	str	r3, [r2, #0]
	GPIOA -> OTYPER     &= ~(GPIO_OTYPER_OT_5); 	//PA5 output type push-pull
 8000390:	4a28      	ldr	r2, [pc, #160]	; (8000434 <InitGPIO+0x26c>)
 8000392:	4b28      	ldr	r3, [pc, #160]	; (8000434 <InitGPIO+0x26c>)
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	f023 0320 	bic.w	r3, r3, #32
 800039a:	6053      	str	r3, [r2, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR5;  //PA5 output speed register (very high speed)
 800039c:	4a25      	ldr	r2, [pc, #148]	; (8000434 <InitGPIO+0x26c>)
 800039e:	4b25      	ldr	r3, [pc, #148]	; (8000434 <InitGPIO+0x26c>)
 80003a0:	689b      	ldr	r3, [r3, #8]
 80003a2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80003a6:	6093      	str	r3, [r2, #8]
	GPIOA -> PUPDR		|= GPIO_PUPDR_PUPDR5_0; 	//PA5 pull-up
 80003a8:	4a22      	ldr	r2, [pc, #136]	; (8000434 <InitGPIO+0x26c>)
 80003aa:	4b22      	ldr	r3, [pc, #136]	; (8000434 <InitGPIO+0x26c>)
 80003ac:	68db      	ldr	r3, [r3, #12]
 80003ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003b2:	60d3      	str	r3, [r2, #12]
	GPIOA -> AFR[0] 	|= (0x05 << 20); 			//PA5 alternate function SPI1_CLK
 80003b4:	4a1f      	ldr	r2, [pc, #124]	; (8000434 <InitGPIO+0x26c>)
 80003b6:	4b1f      	ldr	r3, [pc, #124]	; (8000434 <InitGPIO+0x26c>)
 80003b8:	6a1b      	ldr	r3, [r3, #32]
 80003ba:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80003be:	6213      	str	r3, [r2, #32]

	///////////
	//SPI1_MISO
	///////////
	//pin PA6 MISO configuration
	GPIOA -> MODER  	|= GPIO_MODER_MODER6_1; 	//PA6 pin as alternate function
 80003c0:	4a1c      	ldr	r2, [pc, #112]	; (8000434 <InitGPIO+0x26c>)
 80003c2:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <InitGPIO+0x26c>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003ca:	6013      	str	r3, [r2, #0]
	GPIOA -> OTYPER     &= ~(GPIO_OTYPER_OT_6); 	//PA6 output type push-pull
 80003cc:	4a19      	ldr	r2, [pc, #100]	; (8000434 <InitGPIO+0x26c>)
 80003ce:	4b19      	ldr	r3, [pc, #100]	; (8000434 <InitGPIO+0x26c>)
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80003d6:	6053      	str	r3, [r2, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR6;  //PA6 output speed register (very high speed)
 80003d8:	4a16      	ldr	r2, [pc, #88]	; (8000434 <InitGPIO+0x26c>)
 80003da:	4b16      	ldr	r3, [pc, #88]	; (8000434 <InitGPIO+0x26c>)
 80003dc:	689b      	ldr	r3, [r3, #8]
 80003de:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80003e2:	6093      	str	r3, [r2, #8]
	GPIOA -> PUPDR		|= GPIO_PUPDR_PUPDR6_0; 	//PA6 pull-up
 80003e4:	4a13      	ldr	r2, [pc, #76]	; (8000434 <InitGPIO+0x26c>)
 80003e6:	4b13      	ldr	r3, [pc, #76]	; (8000434 <InitGPIO+0x26c>)
 80003e8:	68db      	ldr	r3, [r3, #12]
 80003ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003ee:	60d3      	str	r3, [r2, #12]
	GPIOA -> AFR[0] 	|= (0x05 << 24); 			//PA6 alternate function SPI1_MISO
 80003f0:	4a10      	ldr	r2, [pc, #64]	; (8000434 <InitGPIO+0x26c>)
 80003f2:	4b10      	ldr	r3, [pc, #64]	; (8000434 <InitGPIO+0x26c>)
 80003f4:	6a1b      	ldr	r3, [r3, #32]
 80003f6:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 80003fa:	6213      	str	r3, [r2, #32]

	///////////
	//SPI1_MOSI
	///////////
	//pin PA7 MOSI configuration
	GPIOA -> MODER  	|= GPIO_MODER_MODER7_1; 	//PA7 pin as alternate function
 80003fc:	4a0d      	ldr	r2, [pc, #52]	; (8000434 <InitGPIO+0x26c>)
 80003fe:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <InitGPIO+0x26c>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000406:	6013      	str	r3, [r2, #0]
	GPIOA -> OTYPER     &= ~(GPIO_OTYPER_OT_7); 	//PA7 output type push-pull
 8000408:	4a0a      	ldr	r2, [pc, #40]	; (8000434 <InitGPIO+0x26c>)
 800040a:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <InitGPIO+0x26c>)
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000412:	6053      	str	r3, [r2, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR7;  //PA7 output speed register (very high speed)
 8000414:	4a07      	ldr	r2, [pc, #28]	; (8000434 <InitGPIO+0x26c>)
 8000416:	4b07      	ldr	r3, [pc, #28]	; (8000434 <InitGPIO+0x26c>)
 8000418:	689b      	ldr	r3, [r3, #8]
 800041a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800041e:	6093      	str	r3, [r2, #8]
	GPIOA -> PUPDR		|= GPIO_PUPDR_PUPDR7_0; 	//PA7 pull-up
 8000420:	4a04      	ldr	r2, [pc, #16]	; (8000434 <InitGPIO+0x26c>)
 8000422:	4b04      	ldr	r3, [pc, #16]	; (8000434 <InitGPIO+0x26c>)
 8000424:	68db      	ldr	r3, [r3, #12]
 8000426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800042a:	60d3      	str	r3, [r2, #12]
 800042c:	e00c      	b.n	8000448 <InitGPIO+0x280>
 800042e:	bf00      	nop
 8000430:	40023800 	.word	0x40023800
 8000434:	40020000 	.word	0x40020000
 8000438:	e000e100 	.word	0xe000e100
 800043c:	40013800 	.word	0x40013800
 8000440:	40013c00 	.word	0x40013c00
 8000444:	40020c00 	.word	0x40020c00
	GPIOA -> AFR[0] 	|= (0x05 << 28); 			//PA7 alternate function SPI1_MOSI
 8000448:	4a41      	ldr	r2, [pc, #260]	; (8000550 <InitGPIO+0x388>)
 800044a:	4b41      	ldr	r3, [pc, #260]	; (8000550 <InitGPIO+0x388>)
 800044c:	6a1b      	ldr	r3, [r3, #32]
 800044e:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8000452:	6213      	str	r3, [r2, #32]

	//////////
	//SPI3_NSS
	//////////
	//pin PA15 NSS configuration
	GPIOA -> MODER  	|= GPIO_MODER_MODER15_1; 	//PA15 pin as alternate function
 8000454:	4a3e      	ldr	r2, [pc, #248]	; (8000550 <InitGPIO+0x388>)
 8000456:	4b3e      	ldr	r3, [pc, #248]	; (8000550 <InitGPIO+0x388>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800045e:	6013      	str	r3, [r2, #0]
	GPIOA -> OTYPER     &= ~(GPIO_OTYPER_OT_15); 	//PA15 output type push-pull
 8000460:	4a3b      	ldr	r2, [pc, #236]	; (8000550 <InitGPIO+0x388>)
 8000462:	4b3b      	ldr	r3, [pc, #236]	; (8000550 <InitGPIO+0x388>)
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800046a:	6053      	str	r3, [r2, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR15; //PA15 output speed register (very high speed)
 800046c:	4a38      	ldr	r2, [pc, #224]	; (8000550 <InitGPIO+0x388>)
 800046e:	4b38      	ldr	r3, [pc, #224]	; (8000550 <InitGPIO+0x388>)
 8000470:	689b      	ldr	r3, [r3, #8]
 8000472:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000476:	6093      	str	r3, [r2, #8]
	GPIOA -> PUPDR		|= GPIO_PUPDR_PUPDR15_0; 	//PA15 pull-up
 8000478:	4a35      	ldr	r2, [pc, #212]	; (8000550 <InitGPIO+0x388>)
 800047a:	4b35      	ldr	r3, [pc, #212]	; (8000550 <InitGPIO+0x388>)
 800047c:	68db      	ldr	r3, [r3, #12]
 800047e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000482:	60d3      	str	r3, [r2, #12]
	GPIOA -> AFR[1] 	|= (0x06 << 28); 			//PA15 alternate function SPI3_NSS
 8000484:	4a32      	ldr	r2, [pc, #200]	; (8000550 <InitGPIO+0x388>)
 8000486:	4b32      	ldr	r3, [pc, #200]	; (8000550 <InitGPIO+0x388>)
 8000488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800048a:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800048e:	6253      	str	r3, [r2, #36]	; 0x24

	//////////
	//SPI3_CLK
	//////////
	//pin PB3 CLK configuration
	GPIOB -> MODER  	|= GPIO_MODER_MODER3_1; 	//PB3 pin as alternate function
 8000490:	4a30      	ldr	r2, [pc, #192]	; (8000554 <InitGPIO+0x38c>)
 8000492:	4b30      	ldr	r3, [pc, #192]	; (8000554 <InitGPIO+0x38c>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800049a:	6013      	str	r3, [r2, #0]
	GPIOB -> OTYPER     &= ~(GPIO_OTYPER_OT_3); 	//PB3 output type push-pull
 800049c:	4a2d      	ldr	r2, [pc, #180]	; (8000554 <InitGPIO+0x38c>)
 800049e:	4b2d      	ldr	r3, [pc, #180]	; (8000554 <InitGPIO+0x38c>)
 80004a0:	685b      	ldr	r3, [r3, #4]
 80004a2:	f023 0308 	bic.w	r3, r3, #8
 80004a6:	6053      	str	r3, [r2, #4]
	GPIOB -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR3;  //PB3 output speed register (very high speed)
 80004a8:	4a2a      	ldr	r2, [pc, #168]	; (8000554 <InitGPIO+0x38c>)
 80004aa:	4b2a      	ldr	r3, [pc, #168]	; (8000554 <InitGPIO+0x38c>)
 80004ac:	689b      	ldr	r3, [r3, #8]
 80004ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80004b2:	6093      	str	r3, [r2, #8]
	GPIOB -> PUPDR		|= GPIO_PUPDR_PUPDR3_0; 	//PB3 pull-up
 80004b4:	4a27      	ldr	r2, [pc, #156]	; (8000554 <InitGPIO+0x38c>)
 80004b6:	4b27      	ldr	r3, [pc, #156]	; (8000554 <InitGPIO+0x38c>)
 80004b8:	68db      	ldr	r3, [r3, #12]
 80004ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004be:	60d3      	str	r3, [r2, #12]
	GPIOB -> AFR[0] 	|= (0x06 << 12); 			//PB3 alternate function SPI3_CLK
 80004c0:	4a24      	ldr	r2, [pc, #144]	; (8000554 <InitGPIO+0x38c>)
 80004c2:	4b24      	ldr	r3, [pc, #144]	; (8000554 <InitGPIO+0x38c>)
 80004c4:	6a1b      	ldr	r3, [r3, #32]
 80004c6:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80004ca:	6213      	str	r3, [r2, #32]

	///////////
	//SPI3_MISO
	///////////
	//pin PB4 MISO configuration
	GPIOB -> MODER  	|= GPIO_MODER_MODER4_1; 	//PB4 pin as alternate function
 80004cc:	4a21      	ldr	r2, [pc, #132]	; (8000554 <InitGPIO+0x38c>)
 80004ce:	4b21      	ldr	r3, [pc, #132]	; (8000554 <InitGPIO+0x38c>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
	GPIOB -> OTYPER     &= ~(GPIO_OTYPER_OT_4); 	//PB4 output type push-pull
 80004d8:	4a1e      	ldr	r2, [pc, #120]	; (8000554 <InitGPIO+0x38c>)
 80004da:	4b1e      	ldr	r3, [pc, #120]	; (8000554 <InitGPIO+0x38c>)
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	f023 0310 	bic.w	r3, r3, #16
 80004e2:	6053      	str	r3, [r2, #4]
	GPIOB -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR4;  //PB4 output speed register (very high speed)
 80004e4:	4a1b      	ldr	r2, [pc, #108]	; (8000554 <InitGPIO+0x38c>)
 80004e6:	4b1b      	ldr	r3, [pc, #108]	; (8000554 <InitGPIO+0x38c>)
 80004e8:	689b      	ldr	r3, [r3, #8]
 80004ea:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80004ee:	6093      	str	r3, [r2, #8]
	GPIOB -> PUPDR		|= GPIO_PUPDR_PUPDR4_0; 	//PB4 pull-up
 80004f0:	4a18      	ldr	r2, [pc, #96]	; (8000554 <InitGPIO+0x38c>)
 80004f2:	4b18      	ldr	r3, [pc, #96]	; (8000554 <InitGPIO+0x38c>)
 80004f4:	68db      	ldr	r3, [r3, #12]
 80004f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fa:	60d3      	str	r3, [r2, #12]
	GPIOB -> AFR[0] 	|= (0x06 << 16); 			//PB4 alternate function SPI3_MISO
 80004fc:	4a15      	ldr	r2, [pc, #84]	; (8000554 <InitGPIO+0x38c>)
 80004fe:	4b15      	ldr	r3, [pc, #84]	; (8000554 <InitGPIO+0x38c>)
 8000500:	6a1b      	ldr	r3, [r3, #32]
 8000502:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 8000506:	6213      	str	r3, [r2, #32]

	///////////
	//SPI3_MOSI
	///////////
	//pin PB5 MOSI configuration
	GPIOB -> MODER  	|= GPIO_MODER_MODER5_1; 	//PB5 pin as alternate function
 8000508:	4a12      	ldr	r2, [pc, #72]	; (8000554 <InitGPIO+0x38c>)
 800050a:	4b12      	ldr	r3, [pc, #72]	; (8000554 <InitGPIO+0x38c>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000512:	6013      	str	r3, [r2, #0]
	GPIOB -> OTYPER     &= ~(GPIO_OTYPER_OT_5); 	//PB5 output type push-pull
 8000514:	4a0f      	ldr	r2, [pc, #60]	; (8000554 <InitGPIO+0x38c>)
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <InitGPIO+0x38c>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	f023 0320 	bic.w	r3, r3, #32
 800051e:	6053      	str	r3, [r2, #4]
	GPIOB -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR5;  //PB5 output speed register (very high speed)
 8000520:	4a0c      	ldr	r2, [pc, #48]	; (8000554 <InitGPIO+0x38c>)
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <InitGPIO+0x38c>)
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800052a:	6093      	str	r3, [r2, #8]
	GPIOB -> PUPDR		|= GPIO_PUPDR_PUPDR5_0; 	//PB5 pull-up
 800052c:	4a09      	ldr	r2, [pc, #36]	; (8000554 <InitGPIO+0x38c>)
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <InitGPIO+0x38c>)
 8000530:	68db      	ldr	r3, [r3, #12]
 8000532:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000536:	60d3      	str	r3, [r2, #12]
	GPIOB -> AFR[0] 	|= (0x06 << 20); 			//PB5 alternate function SPI3_MOSI
 8000538:	4a06      	ldr	r2, [pc, #24]	; (8000554 <InitGPIO+0x38c>)
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <InitGPIO+0x38c>)
 800053c:	6a1b      	ldr	r3, [r3, #32]
 800053e:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 8000542:	6213      	str	r3, [r2, #32]
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40020000 	.word	0x40020000
 8000554:	40020400 	.word	0x40020400

08000558 <SPI1Init>:
 */

#include "SPI.h"

//SPI1 inicialization
void SPI1Init(){
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0

	//Configure NSS hardware pin
	SPI1 -> CR1 	&= ~(SPI_CR1_SSM);
 800055c:	4a2e      	ldr	r2, [pc, #184]	; (8000618 <SPI1Init+0xc0>)
 800055e:	4b2e      	ldr	r3, [pc, #184]	; (8000618 <SPI1Init+0xc0>)
 8000560:	881b      	ldrh	r3, [r3, #0]
 8000562:	b29b      	uxth	r3, r3
 8000564:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000568:	b29b      	uxth	r3, r3
 800056a:	8013      	strh	r3, [r2, #0]
	SPI1 -> CR2 	|= SPI_CR2_SSOE;
 800056c:	4a2a      	ldr	r2, [pc, #168]	; (8000618 <SPI1Init+0xc0>)
 800056e:	4b2a      	ldr	r3, [pc, #168]	; (8000618 <SPI1Init+0xc0>)
 8000570:	889b      	ldrh	r3, [r3, #4]
 8000572:	b29b      	uxth	r3, r3
 8000574:	f043 0304 	orr.w	r3, r3, #4
 8000578:	b29b      	uxth	r3, r3
 800057a:	8093      	strh	r3, [r2, #4]

	//Configure clock polarity sample at positive clock edge
	SPI1 -> CR1 	&= ~(SPI_CR1_CPHA);
 800057c:	4a26      	ldr	r2, [pc, #152]	; (8000618 <SPI1Init+0xc0>)
 800057e:	4b26      	ldr	r3, [pc, #152]	; (8000618 <SPI1Init+0xc0>)
 8000580:	881b      	ldrh	r3, [r3, #0]
 8000582:	b29b      	uxth	r3, r3
 8000584:	f023 0301 	bic.w	r3, r3, #1
 8000588:	b29b      	uxth	r3, r3
 800058a:	8013      	strh	r3, [r2, #0]
	SPI1 -> CR1 	&= ~(SPI_CR1_CPOL);
 800058c:	4a22      	ldr	r2, [pc, #136]	; (8000618 <SPI1Init+0xc0>)
 800058e:	4b22      	ldr	r3, [pc, #136]	; (8000618 <SPI1Init+0xc0>)
 8000590:	881b      	ldrh	r3, [r3, #0]
 8000592:	b29b      	uxth	r3, r3
 8000594:	f023 0302 	bic.w	r3, r3, #2
 8000598:	b29b      	uxth	r3, r3
 800059a:	8013      	strh	r3, [r2, #0]

	//MSB bit first out
	SPI1 -> CR1 	&= ~(SPI_CR1_LSBFIRST);
 800059c:	4a1e      	ldr	r2, [pc, #120]	; (8000618 <SPI1Init+0xc0>)
 800059e:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <SPI1Init+0xc0>)
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	8013      	strh	r3, [r2, #0]

	//2-line SPI mode (MISO & MOSI)
	SPI1 -> CR1 	&= ~(SPI_CR1_BIDIMODE);
 80005ac:	4a1a      	ldr	r2, [pc, #104]	; (8000618 <SPI1Init+0xc0>)
 80005ae:	4b1a      	ldr	r3, [pc, #104]	; (8000618 <SPI1Init+0xc0>)
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	8013      	strh	r3, [r2, #0]

	//SPI full duplex mode
	SPI1 -> CR1 	&= ~(SPI_CR1_RXONLY);
 80005bc:	4a16      	ldr	r2, [pc, #88]	; (8000618 <SPI1Init+0xc0>)
 80005be:	4b16      	ldr	r3, [pc, #88]	; (8000618 <SPI1Init+0xc0>)
 80005c0:	881b      	ldrh	r3, [r3, #0]
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	8013      	strh	r3, [r2, #0]

	//SPI 8-bit data frame format
	SPI1 -> CR1 	&= ~(SPI_CR1_DFF);
 80005cc:	4a12      	ldr	r2, [pc, #72]	; (8000618 <SPI1Init+0xc0>)
 80005ce:	4b12      	ldr	r3, [pc, #72]	; (8000618 <SPI1Init+0xc0>)
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80005d8:	b29b      	uxth	r3, r3
 80005da:	8013      	strh	r3, [r2, #0]

	//SPI baud rate without prescaler the sclk clock would be 42 MHz
	//SPI1 -> CR1 	|= ~(SPI_CR1_BR); 	// 84 MHz / 2 = 42 MHz
	SPI1 -> CR1 	|= (SPI_CR1_BR_1 |  SPI_CR1_BR_0); 	// 84 MHz / 16 = 5.25 MHz
 80005dc:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <SPI1Init+0xc0>)
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <SPI1Init+0xc0>)
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	f043 0318 	orr.w	r3, r3, #24
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	8013      	strh	r3, [r2, #0]
	//SPI1 -> CR1 	|= SPI_CR1_BR; 		// 84 MHz / 256 = 328 kHz (only in test version)

	//SPI in master mode configuration
	SPI1 -> CR1 	|= SPI_CR1_MSTR;
 80005ec:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <SPI1Init+0xc0>)
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <SPI1Init+0xc0>)
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	f043 0304 	orr.w	r3, r3, #4
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	8013      	strh	r3, [r2, #0]

	//SPI enable
	SPI1 -> CR1 	|= SPI_CR1_SPE;
 80005fc:	4a06      	ldr	r2, [pc, #24]	; (8000618 <SPI1Init+0xc0>)
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <SPI1Init+0xc0>)
 8000600:	881b      	ldrh	r3, [r3, #0]
 8000602:	b29b      	uxth	r3, r3
 8000604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000608:	b29b      	uxth	r3, r3
 800060a:	8013      	strh	r3, [r2, #0]
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	40013000 	.word	0x40013000

0800061c <SPI1SendNByte>:
	 //SPI1 CS disable (output high logical level)
	 GPIOA -> ODR 		|= GPIO_ODR_ODR_4;
}

//SPI1 send n-byte
void SPI1SendNByte(uint8_t *data,uint8_t data_len){
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]

	 //variable for count
	 uint8_t i = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	73fb      	strb	r3, [r7, #15]

	 //SPI1 CS enable (output low logical level)
	 GPIOA -> ODR 		&= ~(GPIO_ODR_ODR_4);
 800062c:	4a19      	ldr	r2, [pc, #100]	; (8000694 <SPI1SendNByte+0x78>)
 800062e:	4b19      	ldr	r3, [pc, #100]	; (8000694 <SPI1SendNByte+0x78>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	f023 0310 	bic.w	r3, r3, #16
 8000636:	6153      	str	r3, [r2, #20]

	 for(i = 0;i < data_len;i++){
 8000638:	2300      	movs	r3, #0
 800063a:	73fb      	strb	r3, [r7, #15]
 800063c:	e011      	b.n	8000662 <SPI1SendNByte+0x46>

		 //Write 8 bit data in to SPI1 data buffer register
		 SPI1 -> DR 	= *(data+i);
 800063e:	4916      	ldr	r1, [pc, #88]	; (8000698 <SPI1SendNByte+0x7c>)
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	4413      	add	r3, r2
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b29b      	uxth	r3, r3
 800064a:	818b      	strh	r3, [r1, #12]

		 //Wait until SPI1 data buffer register is empty
		 while(!(SPI1 -> SR & SPI_SR_TXE));
 800064c:	bf00      	nop
 800064e:	4b12      	ldr	r3, [pc, #72]	; (8000698 <SPI1SendNByte+0x7c>)
 8000650:	891b      	ldrh	r3, [r3, #8]
 8000652:	b29b      	uxth	r3, r3
 8000654:	f003 0302 	and.w	r3, r3, #2
 8000658:	2b00      	cmp	r3, #0
 800065a:	d0f8      	beq.n	800064e <SPI1SendNByte+0x32>
	 for(i = 0;i < data_len;i++){
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	3301      	adds	r3, #1
 8000660:	73fb      	strb	r3, [r7, #15]
 8000662:	7bfa      	ldrb	r2, [r7, #15]
 8000664:	78fb      	ldrb	r3, [r7, #3]
 8000666:	429a      	cmp	r2, r3
 8000668:	d3e9      	bcc.n	800063e <SPI1SendNByte+0x22>

	 }
	 //wait till SPI1 are sending data "busy state"
	 while(SPI1 -> SR & SPI_SR_BSY);
 800066a:	bf00      	nop
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <SPI1SendNByte+0x7c>)
 800066e:	891b      	ldrh	r3, [r3, #8]
 8000670:	b29b      	uxth	r3, r3
 8000672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000676:	2b00      	cmp	r3, #0
 8000678:	d1f8      	bne.n	800066c <SPI1SendNByte+0x50>

	 //SPI1 CS disable (output high logical level)
	 GPIOA -> ODR 		|= GPIO_ODR_ODR_4;
 800067a:	4a06      	ldr	r2, [pc, #24]	; (8000694 <SPI1SendNByte+0x78>)
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <SPI1SendNByte+0x78>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	f043 0310 	orr.w	r3, r3, #16
 8000684:	6153      	str	r3, [r2, #20]

}
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40020000 	.word	0x40020000
 8000698:	40013000 	.word	0x40013000

0800069c <SPI1SendNByteReceive1Byte>:
//SPI1 send n bytes and receive 1-Byte
uint8_t SPI1SendNByteReceive1Byte(uint8_t *data_to_send, uint8_t send_data_len){
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	70fb      	strb	r3, [r7, #3]

	 //variable for count
	 uint8_t i = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	73fb      	strb	r3, [r7, #15]

	 //variable for storing received data
	 uint8_t received_data = 0x00;
 80006ac:	2300      	movs	r3, #0
 80006ae:	73bb      	strb	r3, [r7, #14]

	//SPI1 CS enable (output low logical level)
	 GPIOA -> ODR 		&= ~(GPIO_ODR_ODR_4);
 80006b0:	4a21      	ldr	r2, [pc, #132]	; (8000738 <SPI1SendNByteReceive1Byte+0x9c>)
 80006b2:	4b21      	ldr	r3, [pc, #132]	; (8000738 <SPI1SendNByteReceive1Byte+0x9c>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	f023 0310 	bic.w	r3, r3, #16
 80006ba:	6153      	str	r3, [r2, #20]

	 for(i = 0;i < send_data_len;i++){
 80006bc:	2300      	movs	r3, #0
 80006be:	73fb      	strb	r3, [r7, #15]
 80006c0:	e011      	b.n	80006e6 <SPI1SendNByteReceive1Byte+0x4a>

		 //Write 8 bit data in to SPI1 data buffer register
		 SPI1 -> DR 	= *(data_to_send+i);
 80006c2:	491e      	ldr	r1, [pc, #120]	; (800073c <SPI1SendNByteReceive1Byte+0xa0>)
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	4413      	add	r3, r2
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	818b      	strh	r3, [r1, #12]

		 //Wait until SPI1 data buffer register is empty
		 while(!(SPI1 -> SR & SPI_SR_TXE));
 80006d0:	bf00      	nop
 80006d2:	4b1a      	ldr	r3, [pc, #104]	; (800073c <SPI1SendNByteReceive1Byte+0xa0>)
 80006d4:	891b      	ldrh	r3, [r3, #8]
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	f003 0302 	and.w	r3, r3, #2
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d0f8      	beq.n	80006d2 <SPI1SendNByteReceive1Byte+0x36>
	 for(i = 0;i < send_data_len;i++){
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	3301      	adds	r3, #1
 80006e4:	73fb      	strb	r3, [r7, #15]
 80006e6:	7bfa      	ldrb	r2, [r7, #15]
 80006e8:	78fb      	ldrb	r3, [r7, #3]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d3e9      	bcc.n	80006c2 <SPI1SendNByteReceive1Byte+0x26>

	 }

	 SPI1 -> DR = 0xaa;
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <SPI1SendNByteReceive1Byte+0xa0>)
 80006f0:	22aa      	movs	r2, #170	; 0xaa
 80006f2:	819a      	strh	r2, [r3, #12]

	 while(!(SPI1 -> SR & SPI_SR_RXNE));
 80006f4:	bf00      	nop
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <SPI1SendNByteReceive1Byte+0xa0>)
 80006f8:	891b      	ldrh	r3, [r3, #8]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	2b00      	cmp	r3, #0
 8000702:	d0f8      	beq.n	80006f6 <SPI1SendNByteReceive1Byte+0x5a>

	 received_data = SPI1 -> DR;
 8000704:	4b0d      	ldr	r3, [pc, #52]	; (800073c <SPI1SendNByteReceive1Byte+0xa0>)
 8000706:	899b      	ldrh	r3, [r3, #12]
 8000708:	b29b      	uxth	r3, r3
 800070a:	73bb      	strb	r3, [r7, #14]

	 //wait till SPI1 are sending data "busy state"
	 while(SPI1 -> SR & SPI_SR_BSY);
 800070c:	bf00      	nop
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <SPI1SendNByteReceive1Byte+0xa0>)
 8000710:	891b      	ldrh	r3, [r3, #8]
 8000712:	b29b      	uxth	r3, r3
 8000714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000718:	2b00      	cmp	r3, #0
 800071a:	d1f8      	bne.n	800070e <SPI1SendNByteReceive1Byte+0x72>

	 //SPI1 CS disable (output high logical level)
	 GPIOA -> ODR 		|= GPIO_ODR_ODR_4;
 800071c:	4a06      	ldr	r2, [pc, #24]	; (8000738 <SPI1SendNByteReceive1Byte+0x9c>)
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <SPI1SendNByteReceive1Byte+0x9c>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	f043 0310 	orr.w	r3, r3, #16
 8000726:	6153      	str	r3, [r2, #20]

	 //return received data
	 return received_data;
 8000728:	7bbb      	ldrb	r3, [r7, #14]

}
 800072a:	4618      	mov	r0, r3
 800072c:	3714      	adds	r7, #20
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40020000 	.word	0x40020000
 800073c:	40013000 	.word	0x40013000

08000740 <SPI3Init>:

//SPI3 initialization
void SPI3Init(){
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0

	//Configure NSS hardware pin
	SPI3 -> CR1 	&= ~(SPI_CR1_SSM); 		//Use hardware controlled chip select line
 8000744:	4a2a      	ldr	r2, [pc, #168]	; (80007f0 <SPI3Init+0xb0>)
 8000746:	4b2a      	ldr	r3, [pc, #168]	; (80007f0 <SPI3Init+0xb0>)
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	b29b      	uxth	r3, r3
 800074c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000750:	b29b      	uxth	r3, r3
 8000752:	8013      	strh	r3, [r2, #0]
	SPI3 -> CR2		|= SPI_CR2_SSOE; 		//Use hardware output chip select that was active in low state
 8000754:	4a26      	ldr	r2, [pc, #152]	; (80007f0 <SPI3Init+0xb0>)
 8000756:	4b26      	ldr	r3, [pc, #152]	; (80007f0 <SPI3Init+0xb0>)
 8000758:	889b      	ldrh	r3, [r3, #4]
 800075a:	b29b      	uxth	r3, r3
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	b29b      	uxth	r3, r3
 8000762:	8093      	strh	r3, [r2, #4]

	//Configure clock polarity sample at positive edge of clock
	SPI3 -> CR1 	&= ~(SPI_CR1_CPHA);
 8000764:	4a22      	ldr	r2, [pc, #136]	; (80007f0 <SPI3Init+0xb0>)
 8000766:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <SPI3Init+0xb0>)
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	b29b      	uxth	r3, r3
 800076c:	f023 0301 	bic.w	r3, r3, #1
 8000770:	b29b      	uxth	r3, r3
 8000772:	8013      	strh	r3, [r2, #0]
	SPI3 -> CR1 	|= SPI_CR1_CPOL;
 8000774:	4a1e      	ldr	r2, [pc, #120]	; (80007f0 <SPI3Init+0xb0>)
 8000776:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <SPI3Init+0xb0>)
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	b29b      	uxth	r3, r3
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	b29b      	uxth	r3, r3
 8000782:	8013      	strh	r3, [r2, #0]

	//MSB bit first out
	SPI3 -> CR1 	&= ~(SPI_CR1_LSBFIRST);
 8000784:	4a1a      	ldr	r2, [pc, #104]	; (80007f0 <SPI3Init+0xb0>)
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <SPI3Init+0xb0>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	b29b      	uxth	r3, r3
 800078c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000790:	b29b      	uxth	r3, r3
 8000792:	8013      	strh	r3, [r2, #0]

	//2-line SPI mode (MISO & MOSI)
	SPI3 -> CR1 	&= ~(SPI_CR1_BIDIMODE);
 8000794:	4a16      	ldr	r2, [pc, #88]	; (80007f0 <SPI3Init+0xb0>)
 8000796:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <SPI3Init+0xb0>)
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	b29b      	uxth	r3, r3
 800079c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	8013      	strh	r3, [r2, #0]

	//SPI full duplex mode
	SPI3 -> CR1 	&= ~(SPI_CR1_RXONLY);
 80007a4:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <SPI3Init+0xb0>)
 80007a6:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <SPI3Init+0xb0>)
 80007a8:	881b      	ldrh	r3, [r3, #0]
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	8013      	strh	r3, [r2, #0]

	//SPI 8-bit data frame format
	SPI3 -> CR1 	&= ~(SPI_CR1_DFF);
 80007b4:	4a0e      	ldr	r2, [pc, #56]	; (80007f0 <SPI3Init+0xb0>)
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <SPI3Init+0xb0>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	8013      	strh	r3, [r2, #0]

	//SPI baud rate without prescaler the sclk clock would be 42 MHz
	SPI3 -> CR1 	|= SPI_CR1_BR_0; 	// 42 MHz / 4 = 10,5 MHz
 80007c4:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <SPI3Init+0xb0>)
 80007c6:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <SPI3Init+0xb0>)
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	f043 0308 	orr.w	r3, r3, #8
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	8013      	strh	r3, [r2, #0]

	//SPI in master mode configuration
	SPI3 -> CR1 	|= SPI_CR1_MSTR;
 80007d4:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <SPI3Init+0xb0>)
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <SPI3Init+0xb0>)
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	b29b      	uxth	r3, r3
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	8013      	strh	r3, [r2, #0]

	//SPI enable
	//SPI3 -> CR1 	|= SPI_CR1_SPE;

}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40003c00 	.word	0x40003c00

080007f4 <W5500Init>:
uint8_t S0_SR_W5500[3] = {0x00,0x03,0x08};



//Initialize W5500 ethernet module
void W5500Init(void){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

	//enable ping
	SPI1SendNByte(CR_MR_W5500,4);
 80007f8:	2104      	movs	r1, #4
 80007fa:	4820      	ldr	r0, [pc, #128]	; (800087c <W5500Init+0x88>)
 80007fc:	f7ff ff0e 	bl	800061c <SPI1SendNByte>

	//setup gateway IP address
	SPI1SendNByte(CR_GAR_W5500,7);
 8000800:	2107      	movs	r1, #7
 8000802:	481f      	ldr	r0, [pc, #124]	; (8000880 <W5500Init+0x8c>)
 8000804:	f7ff ff0a 	bl	800061c <SPI1SendNByte>

	//setup subnet mask register
	SPI1SendNByte(CR_SUBR_W5500,7);
 8000808:	2107      	movs	r1, #7
 800080a:	481e      	ldr	r0, [pc, #120]	; (8000884 <W5500Init+0x90>)
 800080c:	f7ff ff06 	bl	800061c <SPI1SendNByte>

	//setup hardware address register
	SPI1SendNByte(CR_SHAR_W5500,9);
 8000810:	2109      	movs	r1, #9
 8000812:	481d      	ldr	r0, [pc, #116]	; (8000888 <W5500Init+0x94>)
 8000814:	f7ff ff02 	bl	800061c <SPI1SendNByte>

	//setup source IP address register
	SPI1SendNByte(CR_SIPR_W5500,7);
 8000818:	2107      	movs	r1, #7
 800081a:	481c      	ldr	r0, [pc, #112]	; (800088c <W5500Init+0x98>)
 800081c:	f7ff fefe 	bl	800061c <SPI1SendNByte>

	//setup PHY configuration register
	SPI1SendNByte(CR_PHYCFGR_W5500,4);
 8000820:	2104      	movs	r1, #4
 8000822:	481b      	ldr	r0, [pc, #108]	; (8000890 <W5500Init+0x9c>)
 8000824:	f7ff fefa 	bl	800061c <SPI1SendNByte>

	//setup Socket 0 RX and TX memory allocation
	SPI1SendNByte(S0_RX_TX_BUF_SIZE_W5500,5);
 8000828:	2105      	movs	r1, #5
 800082a:	481a      	ldr	r0, [pc, #104]	; (8000894 <W5500Init+0xa0>)
 800082c:	f7ff fef6 	bl	800061c <SPI1SendNByte>

	//setup Socket 0 Protocol
	SPI1SendNByte(S0_MR_W5500,4);
 8000830:	2104      	movs	r1, #4
 8000832:	4819      	ldr	r0, [pc, #100]	; (8000898 <W5500Init+0xa4>)
 8000834:	f7ff fef2 	bl	800061c <SPI1SendNByte>

	//setup Socket 0 port number
	SPI1SendNByte(S0_PORT_W5500,5);
 8000838:	2105      	movs	r1, #5
 800083a:	4818      	ldr	r0, [pc, #96]	; (800089c <W5500Init+0xa8>)
 800083c:	f7ff feee 	bl	800061c <SPI1SendNByte>

	//open Socket 0
	SPI1SendNByte(S0_CR_OPEN_W5500,4);
 8000840:	2104      	movs	r1, #4
 8000842:	4817      	ldr	r0, [pc, #92]	; (80008a0 <W5500Init+0xac>)
 8000844:	f7ff feea 	bl	800061c <SPI1SendNByte>

	//wait on Socket 0 SOCK_INIT flag
	while(!(SPI1SendNByteReceive1Byte(S0_SR_W5500,3) & 0x13));
 8000848:	bf00      	nop
 800084a:	2103      	movs	r1, #3
 800084c:	4815      	ldr	r0, [pc, #84]	; (80008a4 <W5500Init+0xb0>)
 800084e:	f7ff ff25 	bl	800069c <SPI1SendNByteReceive1Byte>
 8000852:	4603      	mov	r3, r0
 8000854:	f003 0313 	and.w	r3, r3, #19
 8000858:	2b00      	cmp	r3, #0
 800085a:	d0f6      	beq.n	800084a <W5500Init+0x56>

	//listen Socket 0
	SPI1SendNByte(S0_CR_LISTEN_W5500,4);
 800085c:	2104      	movs	r1, #4
 800085e:	4812      	ldr	r0, [pc, #72]	; (80008a8 <W5500Init+0xb4>)
 8000860:	f7ff fedc 	bl	800061c <SPI1SendNByte>

	//wait on Socket 0 SOCK_INIT flag
	while(!(SPI1SendNByteReceive1Byte(S0_SR_W5500,3) & 0x14));
 8000864:	bf00      	nop
 8000866:	2103      	movs	r1, #3
 8000868:	480e      	ldr	r0, [pc, #56]	; (80008a4 <W5500Init+0xb0>)
 800086a:	f7ff ff17 	bl	800069c <SPI1SendNByteReceive1Byte>
 800086e:	4603      	mov	r3, r0
 8000870:	f003 0314 	and.w	r3, r3, #20
 8000874:	2b00      	cmp	r3, #0
 8000876:	d0f6      	beq.n	8000866 <W5500Init+0x72>


}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000000 	.word	0x20000000
 8000880:	20000004 	.word	0x20000004
 8000884:	2000000c 	.word	0x2000000c
 8000888:	20000014 	.word	0x20000014
 800088c:	20000020 	.word	0x20000020
 8000890:	20000028 	.word	0x20000028
 8000894:	2000002c 	.word	0x2000002c
 8000898:	20000034 	.word	0x20000034
 800089c:	20000038 	.word	0x20000038
 80008a0:	20000040 	.word	0x20000040
 80008a4:	20000048 	.word	0x20000048
 80008a8:	20000044 	.word	0x20000044

080008ac <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	6039      	str	r1, [r7, #0]
 80008b6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80008b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	da0b      	bge.n	80008d8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80008c0:	490d      	ldr	r1, [pc, #52]	; (80008f8 <NVIC_SetPriority+0x4c>)
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	f003 030f 	and.w	r3, r3, #15
 80008c8:	3b04      	subs	r3, #4
 80008ca:	683a      	ldr	r2, [r7, #0]
 80008cc:	b2d2      	uxtb	r2, r2
 80008ce:	0112      	lsls	r2, r2, #4
 80008d0:	b2d2      	uxtb	r2, r2
 80008d2:	440b      	add	r3, r1
 80008d4:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80008d6:	e009      	b.n	80008ec <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80008d8:	4908      	ldr	r1, [pc, #32]	; (80008fc <NVIC_SetPriority+0x50>)
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	683a      	ldr	r2, [r7, #0]
 80008e0:	b2d2      	uxtb	r2, r2
 80008e2:	0112      	lsls	r2, r2, #4
 80008e4:	b2d2      	uxtb	r2, r2
 80008e6:	440b      	add	r3, r1
 80008e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	e000ed00 	.word	0xe000ed00
 80008fc:	e000e100 	.word	0xe000e100

08000900 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800090e:	d301      	bcc.n	8000914 <SysTick_Config+0x14>
 8000910:	2301      	movs	r3, #1
 8000912:	e011      	b.n	8000938 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000914:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <SysTick_Config+0x40>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800091c:	3b01      	subs	r3, #1
 800091e:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000920:	210f      	movs	r1, #15
 8000922:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000926:	f7ff ffc1 	bl	80008ac <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800092a:	4b05      	ldr	r3, [pc, #20]	; (8000940 <SysTick_Config+0x40>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <SysTick_Config+0x40>)
 8000932:	2207      	movs	r2, #7
 8000934:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000936:	2300      	movs	r3, #0
}
 8000938:	4618      	mov	r0, r3
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	e000e010 	.word	0xe000e010

08000944 <main>:
void EXTI3_IRQHandler(void); 		//Initialization of handler for external interrupt on line 3

//
//MAIN
//
int main(void){
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0

  uint32_t ret_code_from_sysTick; 	//return code from SysTick_Config function 1 for error see core_cm4.h
  uint8_t test_data[4] = {0x00,0x00,0x00,0xaa};
 800094a:	2300      	movs	r3, #0
 800094c:	713b      	strb	r3, [r7, #4]
 800094e:	2300      	movs	r3, #0
 8000950:	717b      	strb	r3, [r7, #5]
 8000952:	2300      	movs	r3, #0
 8000954:	71bb      	strb	r3, [r7, #6]
 8000956:	23aa      	movs	r3, #170	; 0xaa
 8000958:	71fb      	strb	r3, [r7, #7]
  uint8_t test_receive = 0x00;
 800095a:	2300      	movs	r3, #0
 800095c:	73fb      	strb	r3, [r7, #15]

  //Init GPIOA
  InitGPIO();
 800095e:	f7ff fc33 	bl	80001c8 <InitGPIO>
  //Init SPI3
  SPI3Init();
 8000962:	f7ff feed 	bl	8000740 <SPI3Init>
  //Init SPI1
  SPI1Init();
 8000966:	f7ff fdf7 	bl	8000558 <SPI1Init>
  //W5500 initialize
  W5500Init();
 800096a:	f7ff ff43 	bl	80007f4 <W5500Init>

  //Configure system ticks to us range
  ret_code_from_sysTick = SysTick_Config(SystemCoreClock / 1000000);
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <main+0x40>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a05      	ldr	r2, [pc, #20]	; (8000988 <main+0x44>)
 8000974:	fba2 2303 	umull	r2, r3, r2, r3
 8000978:	0c9b      	lsrs	r3, r3, #18
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff ffc0 	bl	8000900 <SysTick_Config>
 8000980:	60b8      	str	r0, [r7, #8]
  }


  //ADDED COMENT FOR GIT EXAMPLE
  /* Infinite loop */
  while (1){
 8000982:	e7fe      	b.n	8000982 <main+0x3e>
 8000984:	2000004c 	.word	0x2000004c
 8000988:	431bde83 	.word	0x431bde83

0800098c <EXTI3_IRQHandler>:
	  //SPI3 -> CR1 	&= ~(SPI_CR1_SPE);
  }
}

//External interrupt handler on line 3
void EXTI3_IRQHandler(void){
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
	if((EXTI -> PR & EXTI_PR_PR3) != 0){
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <EXTI3_IRQHandler+0x4c>)
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	f003 0308 	and.w	r3, r3, #8
 8000998:	2b00      	cmp	r3, #0
 800099a:	d018      	beq.n	80009ce <EXTI3_IRQHandler+0x42>
		if((GPIOD -> ODR & GPIO_ODR_ODR_13) != 0){
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <EXTI3_IRQHandler+0x50>)
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d006      	beq.n	80009b6 <EXTI3_IRQHandler+0x2a>

			GPIOD -> ODR	&= ~(GPIO_ODR_ODR_13); 	//LED3 off
 80009a8:	4a0c      	ldr	r2, [pc, #48]	; (80009dc <EXTI3_IRQHandler+0x50>)
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <EXTI3_IRQHandler+0x50>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80009b2:	6153      	str	r3, [r2, #20]
 80009b4:	e005      	b.n	80009c2 <EXTI3_IRQHandler+0x36>
		}else{

			GPIOD -> ODR	|= GPIO_ODR_ODR_13; 	//LED3 on
 80009b6:	4a09      	ldr	r2, [pc, #36]	; (80009dc <EXTI3_IRQHandler+0x50>)
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <EXTI3_IRQHandler+0x50>)
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009c0:	6153      	str	r3, [r2, #20]
		}
		EXTI -> PR |= EXTI_PR_PR3; 	//Clear flag this is necessary
 80009c2:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <EXTI3_IRQHandler+0x4c>)
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <EXTI3_IRQHandler+0x4c>)
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	f043 0308 	orr.w	r3, r3, #8
 80009cc:	6153      	str	r3, [r2, #20]
	}
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	40013c00 	.word	0x40013c00
 80009dc:	40020c00 	.word	0x40020c00

080009e0 <EXTI0_IRQHandler>:

//External interrupt handler on line 3
void EXTI0_IRQHandler(void){
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
	if((EXTI -> PR & EXTI_PR_PR0) != 0){
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <EXTI0_IRQHandler+0x4c>)
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d018      	beq.n	8000a22 <EXTI0_IRQHandler+0x42>
		if((GPIOD -> ODR & GPIO_ODR_ODR_13) != 0){
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <EXTI0_IRQHandler+0x50>)
 80009f2:	695b      	ldr	r3, [r3, #20]
 80009f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d006      	beq.n	8000a0a <EXTI0_IRQHandler+0x2a>

			GPIOD -> ODR	&= ~(GPIO_ODR_ODR_13); 	//LED3 off
 80009fc:	4a0c      	ldr	r2, [pc, #48]	; (8000a30 <EXTI0_IRQHandler+0x50>)
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <EXTI0_IRQHandler+0x50>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a06:	6153      	str	r3, [r2, #20]
 8000a08:	e005      	b.n	8000a16 <EXTI0_IRQHandler+0x36>
		}else{

			GPIOD -> ODR	|= GPIO_ODR_ODR_13; 	//LED3 on
 8000a0a:	4a09      	ldr	r2, [pc, #36]	; (8000a30 <EXTI0_IRQHandler+0x50>)
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <EXTI0_IRQHandler+0x50>)
 8000a0e:	695b      	ldr	r3, [r3, #20]
 8000a10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a14:	6153      	str	r3, [r2, #20]
		}
		EXTI -> PR |= EXTI_PR_PR0; 	//Clear flag this is necessary
 8000a16:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <EXTI0_IRQHandler+0x4c>)
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <EXTI0_IRQHandler+0x4c>)
 8000a1a:	695b      	ldr	r3, [r3, #20]
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6153      	str	r3, [r2, #20]
	}
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	40013c00 	.word	0x40013c00
 8000a30:	40020c00 	.word	0x40020c00

08000a34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a3a:	e003      	b.n	8000a44 <LoopCopyDataInit>

08000a3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a42:	3104      	adds	r1, #4

08000a44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a44:	480b      	ldr	r0, [pc, #44]	; (8000a74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a4c:	d3f6      	bcc.n	8000a3c <CopyDataInit>
  ldr  r2, =_sbss
 8000a4e:	4a0b      	ldr	r2, [pc, #44]	; (8000a7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a50:	e002      	b.n	8000a58 <LoopFillZerobss>

08000a52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a54:	f842 3b04 	str.w	r3, [r2], #4

08000a58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a5c:	d3f9      	bcc.n	8000a52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a5e:	f000 f849 	bl	8000af4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a62:	f000 f8f9 	bl	8000c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a66:	f7ff ff6d 	bl	8000944 <main>
  bx  lr    
 8000a6a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a6c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a70:	08000cc0 	.word	0x08000cc0
  ldr  r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a78:	20000050 	.word	0x20000050
  ldr  r2, =_sbss
 8000a7c:	20000050 	.word	0x20000050
  ldr  r3, = _ebss
 8000a80:	20000070 	.word	0x20000070

08000a84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a84:	e7fe      	b.n	8000a84 <ADC_IRQHandler>

08000a86 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <HardFault_Handler+0x4>

08000a9a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <MemManage_Handler+0x4>

08000aa0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <BusFault_Handler+0x4>

08000aa6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <UsageFault_Handler+0x4>

08000aac <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
	...

08000ad8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
//*  TimingDelay_Decrement(); */
	delay_cnt--;
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <SysTick_Handler+0x18>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	4a03      	ldr	r2, [pc, #12]	; (8000af0 <SysTick_Handler+0x18>)
 8000ae4:	6013      	str	r3, [r2, #0]
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	2000006c 	.word	0x2000006c

08000af4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af8:	4a16      	ldr	r2, [pc, #88]	; (8000b54 <SystemInit+0x60>)
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <SystemInit+0x60>)
 8000afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b08:	4a13      	ldr	r2, [pc, #76]	; (8000b58 <SystemInit+0x64>)
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <SystemInit+0x64>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <SystemInit+0x64>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b1a:	4a0f      	ldr	r2, [pc, #60]	; (8000b58 <SystemInit+0x64>)
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <SystemInit+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b28:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <SystemInit+0x64>)
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <SystemInit+0x68>)
 8000b2e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b30:	4a09      	ldr	r2, [pc, #36]	; (8000b58 <SystemInit+0x64>)
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <SystemInit+0x64>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <SystemInit+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000b42:	f000 f80d 	bl	8000b60 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b46:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <SystemInit+0x60>)
 8000b48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b4c:	609a      	str	r2, [r3, #8]
#endif
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	24003010 	.word	0x24003010

08000b60 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000b6e:	4a36      	ldr	r2, [pc, #216]	; (8000c48 <SetSysClock+0xe8>)
 8000b70:	4b35      	ldr	r3, [pc, #212]	; (8000c48 <SetSysClock+0xe8>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b78:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000b7a:	4b33      	ldr	r3, [pc, #204]	; (8000c48 <SetSysClock+0xe8>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b82:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3301      	adds	r3, #1
 8000b88:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d103      	bne.n	8000b98 <SetSysClock+0x38>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000b96:	d1f0      	bne.n	8000b7a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000b98:	4b2b      	ldr	r3, [pc, #172]	; (8000c48 <SetSysClock+0xe8>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	e001      	b.n	8000bae <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d142      	bne.n	8000c3a <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000bb4:	4a24      	ldr	r2, [pc, #144]	; (8000c48 <SetSysClock+0xe8>)
 8000bb6:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <SetSysClock+0xe8>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000bc0:	4a22      	ldr	r2, [pc, #136]	; (8000c4c <SetSysClock+0xec>)
 8000bc2:	4b22      	ldr	r3, [pc, #136]	; (8000c4c <SetSysClock+0xec>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bca:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000bcc:	4a1e      	ldr	r2, [pc, #120]	; (8000c48 <SetSysClock+0xe8>)
 8000bce:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <SetSysClock+0xe8>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000bd4:	4a1c      	ldr	r2, [pc, #112]	; (8000c48 <SetSysClock+0xe8>)
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <SetSysClock+0xe8>)
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bde:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000be0:	4a19      	ldr	r2, [pc, #100]	; (8000c48 <SetSysClock+0xe8>)
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <SetSysClock+0xe8>)
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000bea:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <SetSysClock+0xe8>)
 8000bee:	4a18      	ldr	r2, [pc, #96]	; (8000c50 <SetSysClock+0xf0>)
 8000bf0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000bf2:	4a15      	ldr	r2, [pc, #84]	; (8000c48 <SetSysClock+0xe8>)
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <SetSysClock+0xe8>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bfc:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000bfe:	bf00      	nop
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <SetSysClock+0xe8>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d0f9      	beq.n	8000c00 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <SetSysClock+0xf4>)
 8000c0e:	f240 7205 	movw	r2, #1797	; 0x705
 8000c12:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000c14:	4a0c      	ldr	r2, [pc, #48]	; (8000c48 <SetSysClock+0xe8>)
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <SetSysClock+0xe8>)
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	f023 0303 	bic.w	r3, r3, #3
 8000c1e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000c20:	4a09      	ldr	r2, [pc, #36]	; (8000c48 <SetSysClock+0xe8>)
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <SetSysClock+0xe8>)
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	f043 0302 	orr.w	r3, r3, #2
 8000c2a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000c2c:	bf00      	nop
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <SetSysClock+0xe8>)
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	f003 030c 	and.w	r3, r3, #12
 8000c36:	2b08      	cmp	r3, #8
 8000c38:	d1f9      	bne.n	8000c2e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40007000 	.word	0x40007000
 8000c50:	07405408 	.word	0x07405408
 8000c54:	40023c00 	.word	0x40023c00

08000c58 <__libc_init_array>:
 8000c58:	b570      	push	{r4, r5, r6, lr}
 8000c5a:	4e0d      	ldr	r6, [pc, #52]	; (8000c90 <__libc_init_array+0x38>)
 8000c5c:	4c0d      	ldr	r4, [pc, #52]	; (8000c94 <__libc_init_array+0x3c>)
 8000c5e:	1ba4      	subs	r4, r4, r6
 8000c60:	10a4      	asrs	r4, r4, #2
 8000c62:	2500      	movs	r5, #0
 8000c64:	42a5      	cmp	r5, r4
 8000c66:	d109      	bne.n	8000c7c <__libc_init_array+0x24>
 8000c68:	4e0b      	ldr	r6, [pc, #44]	; (8000c98 <__libc_init_array+0x40>)
 8000c6a:	4c0c      	ldr	r4, [pc, #48]	; (8000c9c <__libc_init_array+0x44>)
 8000c6c:	f000 f818 	bl	8000ca0 <_init>
 8000c70:	1ba4      	subs	r4, r4, r6
 8000c72:	10a4      	asrs	r4, r4, #2
 8000c74:	2500      	movs	r5, #0
 8000c76:	42a5      	cmp	r5, r4
 8000c78:	d105      	bne.n	8000c86 <__libc_init_array+0x2e>
 8000c7a:	bd70      	pop	{r4, r5, r6, pc}
 8000c7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c80:	4798      	blx	r3
 8000c82:	3501      	adds	r5, #1
 8000c84:	e7ee      	b.n	8000c64 <__libc_init_array+0xc>
 8000c86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c8a:	4798      	blx	r3
 8000c8c:	3501      	adds	r5, #1
 8000c8e:	e7f2      	b.n	8000c76 <__libc_init_array+0x1e>
 8000c90:	08000cb8 	.word	0x08000cb8
 8000c94:	08000cb8 	.word	0x08000cb8
 8000c98:	08000cb8 	.word	0x08000cb8
 8000c9c:	08000cbc 	.word	0x08000cbc

08000ca0 <_init>:
 8000ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ca2:	bf00      	nop
 8000ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ca6:	bc08      	pop	{r3}
 8000ca8:	469e      	mov	lr, r3
 8000caa:	4770      	bx	lr

08000cac <_fini>:
 8000cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cae:	bf00      	nop
 8000cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cb2:	bc08      	pop	{r3}
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	4770      	bx	lr
