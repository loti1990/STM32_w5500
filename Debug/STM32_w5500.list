
STM32_w5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a24  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000bac  08000bac  00010bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000bc0  08000bc0  00010bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000bc4  08000bc4  00010bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000024  20000024  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000255e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000008c9  00000000  00000000  00022592  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000180  00000000  00000000  00022e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001b0  00000000  00000000  00022fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000dff  00000000  00000000  00023190  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000d8c  00000000  00000000  00023f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00024d1b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000033c  00000000  00000000  00024d98  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00000655  00000000  00000000  000250d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000003f  00000000  00000000  00025729  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000b94 	.word	0x08000b94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000b94 	.word	0x08000b94

080001c8 <InitGPIO>:
	/*************************************************
	////////////ENABLE CLK FOR PERIPHERALS////////////
	*************************************************/

	//Enable GPIOA AHB1 clock source
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001c8:	4992      	ldr	r1, [pc, #584]	; (8000414 <InitGPIO+0x24c>)
				*************************************************/

	//////////////////////////////////////////////////////////
	//GPIOA PA3 configure for interrupt generated from W5500//
	//////////////////////////////////////////////////////////
	GPIOA -> MODER 		&= ~(GPIO_MODER_MODER3); 		//PA3 pin as input
 80001ca:	4b93      	ldr	r3, [pc, #588]	; (8000418 <InitGPIO+0x250>)
	GPIOA -> PUPDR 		|= GPIO_PUPDR_PUPDR8_0; 		//PA8 pull-up

	//////////////////////////////////////
	//GPIOD PD13/LED3 on discovery board//
	//////////////////////////////////////
	GPIOD -> MODER 		|= GPIO_MODER_MODER13_0;		//PD13 pin as output
 80001cc:	4893      	ldr	r0, [pc, #588]	; (800041c <InitGPIO+0x254>)

	//////////
	//SPI3_CLK
	//////////
	//pin PB3 CLK configuration
	GPIOB -> MODER  	|= GPIO_MODER_MODER3_1; 	//PB3 pin as alternate function
 80001ce:	4a94      	ldr	r2, [pc, #592]	; (8000420 <InitGPIO+0x258>)
void InitGPIO(void){
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001d2:	6b0f      	ldr	r7, [r1, #48]	; 0x30
	NVIC -> ISER[0] 	|= (1 << EXTI3_IRQn); 			//Enable external interrupt
 80001d4:	4d93      	ldr	r5, [pc, #588]	; (8000424 <InitGPIO+0x25c>)
	SYSCFG -> EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PA;		//PA3 as external interrupt setting up in EXTICR1
 80001d6:	4e94      	ldr	r6, [pc, #592]	; (8000428 <InitGPIO+0x260>)
	EXTI -> FTSR 		|= EXTI_FTSR_TR3;				//interrupt generated at falling edge
 80001d8:	4c94      	ldr	r4, [pc, #592]	; (800042c <InitGPIO+0x264>)
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001da:	f047 0701 	orr.w	r7, r7, #1
 80001de:	630f      	str	r7, [r1, #48]	; 0x30
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80001e0:	6b0f      	ldr	r7, [r1, #48]	; 0x30
 80001e2:	f047 0702 	orr.w	r7, r7, #2
 80001e6:	630f      	str	r7, [r1, #48]	; 0x30
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80001e8:	6b0f      	ldr	r7, [r1, #48]	; 0x30
 80001ea:	f047 0708 	orr.w	r7, r7, #8
 80001ee:	630f      	str	r7, [r1, #48]	; 0x30
	RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 80001f0:	6c0f      	ldr	r7, [r1, #64]	; 0x40
 80001f2:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 80001f6:	640f      	str	r7, [r1, #64]	; 0x40
	RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 80001f8:	6c4f      	ldr	r7, [r1, #68]	; 0x44
 80001fa:	f447 5780 	orr.w	r7, r7, #4096	; 0x1000
 80001fe:	644f      	str	r7, [r1, #68]	; 0x44
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000200:	6c4f      	ldr	r7, [r1, #68]	; 0x44
 8000202:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000206:	644f      	str	r7, [r1, #68]	; 0x44
	GPIOA -> MODER 		&= ~(GPIO_MODER_MODER3); 		//PA3 pin as input
 8000208:	6819      	ldr	r1, [r3, #0]
 800020a:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800020e:	6019      	str	r1, [r3, #0]
	GPIOA -> PUPDR 		|= GPIO_PUPDR_PUPDR3_0; 		//PA3 pull-up
 8000210:	68d9      	ldr	r1, [r3, #12]
 8000212:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8000216:	60d9      	str	r1, [r3, #12]
	NVIC -> ISER[0] 	|= (1 << EXTI3_IRQn); 			//Enable external interrupt
 8000218:	6829      	ldr	r1, [r5, #0]
	NVIC -> IP[EXTI3_IRQn] 		= (uint8_t) 0x01;		//set priority of EXTI3_IRQn to 1 (lower are the number the higher are priority)
 800021a:	2701      	movs	r7, #1
	NVIC -> ISER[0] 	|= (1 << EXTI3_IRQn); 			//Enable external interrupt
 800021c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8000220:	6029      	str	r1, [r5, #0]
	NVIC -> IP[EXTI3_IRQn] 		= (uint8_t) 0x01;		//set priority of EXTI3_IRQn to 1 (lower are the number the higher are priority)
 8000222:	f885 7309 	strb.w	r7, [r5, #777]	; 0x309
	SYSCFG -> EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PA;		//PA3 as external interrupt setting up in EXTICR1
 8000226:	68b1      	ldr	r1, [r6, #8]
 8000228:	60b1      	str	r1, [r6, #8]
	EXTI -> FTSR 		|= EXTI_FTSR_TR3;				//interrupt generated at falling edge
 800022a:	68e1      	ldr	r1, [r4, #12]
 800022c:	f041 0108 	orr.w	r1, r1, #8
 8000230:	60e1      	str	r1, [r4, #12]
	EXTI -> IMR			|= EXTI_IMR_MR3; 				//Enable external interrupt at pin 3
 8000232:	6821      	ldr	r1, [r4, #0]
 8000234:	f041 0108 	orr.w	r1, r1, #8
 8000238:	6021      	str	r1, [r4, #0]
	GPIOA -> MODER 		&= ~(GPIO_MODER_MODER0); 		//PA0 pin as input
 800023a:	6819      	ldr	r1, [r3, #0]
 800023c:	f021 0103 	bic.w	r1, r1, #3
 8000240:	6019      	str	r1, [r3, #0]
	GPIOA -> PUPDR 		&= ~(GPIO_PUPDR_PUPDR0); 		//PA0 no pull-up, pull-down
 8000242:	68d9      	ldr	r1, [r3, #12]
 8000244:	f021 0103 	bic.w	r1, r1, #3
 8000248:	60d9      	str	r1, [r3, #12]
	NVIC -> ISER[0] 	|= (1 << EXTI0_IRQn); 			//Enable external interrupt
 800024a:	6829      	ldr	r1, [r5, #0]
 800024c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8000250:	6029      	str	r1, [r5, #0]
	NVIC -> IP[EXTI0_IRQn] 		= (uint8_t) 0x01;		//set priority of EXTI3_IRQn to 1 (lower are the number the higher are priority)
 8000252:	f885 7306 	strb.w	r7, [r5, #774]	; 0x306
	SYSCFG -> EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;		//PA0 as external interrupt setting up in EXTICR1
 8000256:	68b1      	ldr	r1, [r6, #8]
 8000258:	60b1      	str	r1, [r6, #8]
	EXTI -> RTSR 		|= EXTI_RTSR_TR0;				//interrupt generated at rising edge
 800025a:	68a1      	ldr	r1, [r4, #8]
 800025c:	4339      	orrs	r1, r7
 800025e:	60a1      	str	r1, [r4, #8]
	EXTI -> IMR			|= EXTI_IMR_MR0; 				//Enable external interrupt at pin 0
 8000260:	6821      	ldr	r1, [r4, #0]
 8000262:	4339      	orrs	r1, r7
 8000264:	6021      	str	r1, [r4, #0]
	GPIOA -> MODER 		|= GPIO_MODER_MODER8_0; 		//PA8 pin as output
 8000266:	6819      	ldr	r1, [r3, #0]
 8000268:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800026c:	6019      	str	r1, [r3, #0]
	GPIOA -> OTYPER 	&= ~(GPIO_OTYPER_OT_8);			//PA8 output type push-pull
 800026e:	6859      	ldr	r1, [r3, #4]
 8000270:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8000274:	6059      	str	r1, [r3, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR8; 		//PA8 output speed register (very high speed)
 8000276:	6899      	ldr	r1, [r3, #8]
 8000278:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
 800027c:	6099      	str	r1, [r3, #8]
	GPIOA -> PUPDR 		|= GPIO_PUPDR_PUPDR8_0; 		//PA8 pull-up
 800027e:	68d9      	ldr	r1, [r3, #12]
 8000280:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8000284:	60d9      	str	r1, [r3, #12]
	GPIOD -> MODER 		|= GPIO_MODER_MODER13_0;		//PD13 pin as output
 8000286:	6801      	ldr	r1, [r0, #0]
 8000288:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 800028c:	6001      	str	r1, [r0, #0]
	GPIOD -> OTYPER 	&= ~(GPIO_OTYPER_OT_13);		//PD13 output type push-pull
 800028e:	6841      	ldr	r1, [r0, #4]
 8000290:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8000294:	6041      	str	r1, [r0, #4]
	GPIOD -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR13_0; 	//PD13 output speed register (medium speed)
 8000296:	6881      	ldr	r1, [r0, #8]
 8000298:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 800029c:	6081      	str	r1, [r0, #8]
	GPIOD -> PUPDR 		&= ~(GPIO_PUPDR_PUPDR13); 		//PD13 pull-up
 800029e:	68c1      	ldr	r1, [r0, #12]
 80002a0:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 80002a4:	60c1      	str	r1, [r0, #12]
	GPIOA -> MODER 		|=  GPIO_MODER_MODER2_0; 		//PA2 pin as output
 80002a6:	6819      	ldr	r1, [r3, #0]
 80002a8:	f041 0110 	orr.w	r1, r1, #16
 80002ac:	6019      	str	r1, [r3, #0]
	GPIOA -> OTYPER 	&= ~(GPIO_OTYPER_OT_2);			//PA2 output type push-pull
 80002ae:	6859      	ldr	r1, [r3, #4]
 80002b0:	f021 0104 	bic.w	r1, r1, #4
 80002b4:	6059      	str	r1, [r3, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR2_0; 	//PA2 output speed register (medium speed)
 80002b6:	6899      	ldr	r1, [r3, #8]
 80002b8:	f041 0110 	orr.w	r1, r1, #16
 80002bc:	6099      	str	r1, [r3, #8]
	GPIOA -> PUPDR 		&= ~(GPIO_PUPDR_PUPDR2); 		//PA2 pull-up
 80002be:	68d9      	ldr	r1, [r3, #12]
 80002c0:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 80002c4:	60d9      	str	r1, [r3, #12]
	GPIOA -> ODR 		|= GPIO_ODR_ODR_2; 				//Enable W5500 module
 80002c6:	6959      	ldr	r1, [r3, #20]
 80002c8:	f041 0104 	orr.w	r1, r1, #4
 80002cc:	6159      	str	r1, [r3, #20]
	GPIOA -> MODER		|= GPIO_MODER_MODER4_0;		//PA4 pin output mode
 80002ce:	6819      	ldr	r1, [r3, #0]
 80002d0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80002d4:	6019      	str	r1, [r3, #0]
	GPIOA -> OTYPER 	&= ~(GPIO_OTYPER_OT_4); 	//PA4 output push-pull
 80002d6:	6859      	ldr	r1, [r3, #4]
 80002d8:	f021 0110 	bic.w	r1, r1, #16
 80002dc:	6059      	str	r1, [r3, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR4; 	//PA4 output speed register (very high speed)
 80002de:	6899      	ldr	r1, [r3, #8]
 80002e0:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 80002e4:	6099      	str	r1, [r3, #8]
	GPIOA -> PUPDR		|= GPIO_PUPDR_PUPDR4_0; 	//PA4 pull-up
 80002e6:	68d9      	ldr	r1, [r3, #12]
 80002e8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80002ec:	60d9      	str	r1, [r3, #12]
	GPIOA -> ODR 		|= GPIO_ODR_ODR_4;			//PA4 set in a high output logical level
 80002ee:	6959      	ldr	r1, [r3, #20]
 80002f0:	f041 0110 	orr.w	r1, r1, #16
 80002f4:	6159      	str	r1, [r3, #20]
	GPIOA -> MODER  	|= GPIO_MODER_MODER5_1; 	//PA5 pin as alternate function
 80002f6:	6819      	ldr	r1, [r3, #0]
 80002f8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80002fc:	6019      	str	r1, [r3, #0]
	GPIOA -> OTYPER     &= ~(GPIO_OTYPER_OT_5); 	//PA5 output type push-pull
 80002fe:	6859      	ldr	r1, [r3, #4]
 8000300:	f021 0120 	bic.w	r1, r1, #32
 8000304:	6059      	str	r1, [r3, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR5;  //PA5 output speed register (very high speed)
 8000306:	6899      	ldr	r1, [r3, #8]
 8000308:	f441 6140 	orr.w	r1, r1, #3072	; 0xc00
 800030c:	6099      	str	r1, [r3, #8]
	GPIOA -> PUPDR		|= GPIO_PUPDR_PUPDR5_0; 	//PA5 pull-up
 800030e:	68d9      	ldr	r1, [r3, #12]
 8000310:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000314:	60d9      	str	r1, [r3, #12]
	GPIOA -> AFR[0] 	|= (0x05 << 20); 			//PA5 alternate function SPI1_CLK
 8000316:	6a19      	ldr	r1, [r3, #32]
 8000318:	f441 01a0 	orr.w	r1, r1, #5242880	; 0x500000
 800031c:	6219      	str	r1, [r3, #32]
	GPIOA -> MODER  	|= GPIO_MODER_MODER6_1; 	//PA6 pin as alternate function
 800031e:	6819      	ldr	r1, [r3, #0]
 8000320:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8000324:	6019      	str	r1, [r3, #0]
	GPIOA -> OTYPER     &= ~(GPIO_OTYPER_OT_6); 	//PA6 output type push-pull
 8000326:	6859      	ldr	r1, [r3, #4]
 8000328:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800032c:	6059      	str	r1, [r3, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR6;  //PA6 output speed register (very high speed)
 800032e:	6899      	ldr	r1, [r3, #8]
 8000330:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
 8000334:	6099      	str	r1, [r3, #8]
	GPIOA -> PUPDR		|= GPIO_PUPDR_PUPDR6_0; 	//PA6 pull-up
 8000336:	68d9      	ldr	r1, [r3, #12]
 8000338:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800033c:	60d9      	str	r1, [r3, #12]
	GPIOA -> AFR[0] 	|= (0x05 << 24); 			//PA6 alternate function SPI1_MISO
 800033e:	6a19      	ldr	r1, [r3, #32]
 8000340:	f041 61a0 	orr.w	r1, r1, #83886080	; 0x5000000
 8000344:	6219      	str	r1, [r3, #32]
	GPIOA -> MODER  	|= GPIO_MODER_MODER7_1; 	//PA7 pin as alternate function
 8000346:	6819      	ldr	r1, [r3, #0]
 8000348:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800034c:	6019      	str	r1, [r3, #0]
	GPIOA -> OTYPER     &= ~(GPIO_OTYPER_OT_7); 	//PA7 output type push-pull
 800034e:	6859      	ldr	r1, [r3, #4]
 8000350:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8000354:	6059      	str	r1, [r3, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR7;  //PA7 output speed register (very high speed)
 8000356:	6899      	ldr	r1, [r3, #8]
 8000358:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800035c:	6099      	str	r1, [r3, #8]
	GPIOA -> PUPDR		|= GPIO_PUPDR_PUPDR7_0; 	//PA7 pull-up
 800035e:	68d9      	ldr	r1, [r3, #12]
 8000360:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000364:	60d9      	str	r1, [r3, #12]
	GPIOA -> AFR[0] 	|= (0x05 << 28); 			//PA7 alternate function SPI1_MOSI
 8000366:	6a19      	ldr	r1, [r3, #32]
 8000368:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
 800036c:	6219      	str	r1, [r3, #32]
	GPIOA -> MODER  	|= GPIO_MODER_MODER15_1; 	//PA15 pin as alternate function
 800036e:	6819      	ldr	r1, [r3, #0]
 8000370:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8000374:	6019      	str	r1, [r3, #0]
	GPIOA -> OTYPER     &= ~(GPIO_OTYPER_OT_15); 	//PA15 output type push-pull
 8000376:	6859      	ldr	r1, [r3, #4]
 8000378:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800037c:	6059      	str	r1, [r3, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR15; //PA15 output speed register (very high speed)
 800037e:	6899      	ldr	r1, [r3, #8]
 8000380:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
 8000384:	6099      	str	r1, [r3, #8]
	GPIOA -> PUPDR		|= GPIO_PUPDR_PUPDR15_0; 	//PA15 pull-up
 8000386:	68d9      	ldr	r1, [r3, #12]
 8000388:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800038c:	60d9      	str	r1, [r3, #12]
	GPIOA -> AFR[1] 	|= (0x06 << 28); 			//PA15 alternate function SPI3_NSS
 800038e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000390:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
 8000394:	6259      	str	r1, [r3, #36]	; 0x24
	GPIOB -> MODER  	|= GPIO_MODER_MODER3_1; 	//PB3 pin as alternate function
 8000396:	6813      	ldr	r3, [r2, #0]
 8000398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800039c:	6013      	str	r3, [r2, #0]
	GPIOB -> OTYPER     &= ~(GPIO_OTYPER_OT_3); 	//PB3 output type push-pull
 800039e:	6853      	ldr	r3, [r2, #4]
 80003a0:	f023 0308 	bic.w	r3, r3, #8
 80003a4:	6053      	str	r3, [r2, #4]
	GPIOB -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR3;  //PB3 output speed register (very high speed)
 80003a6:	6893      	ldr	r3, [r2, #8]
 80003a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80003ac:	6093      	str	r3, [r2, #8]
	GPIOB -> PUPDR		|= GPIO_PUPDR_PUPDR3_0; 	//PB3 pull-up
 80003ae:	68d3      	ldr	r3, [r2, #12]
 80003b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003b4:	60d3      	str	r3, [r2, #12]
	GPIOB -> AFR[0] 	|= (0x06 << 12); 			//PB3 alternate function SPI3_CLK
 80003b6:	6a13      	ldr	r3, [r2, #32]
 80003b8:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80003bc:	6213      	str	r3, [r2, #32]

	///////////
	//SPI3_MISO
	///////////
	//pin PB4 MISO configuration
	GPIOB -> MODER  	|= GPIO_MODER_MODER4_1; 	//PB4 pin as alternate function
 80003be:	6813      	ldr	r3, [r2, #0]
 80003c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003c4:	6013      	str	r3, [r2, #0]
	GPIOB -> OTYPER     &= ~(GPIO_OTYPER_OT_4); 	//PB4 output type push-pull
 80003c6:	6853      	ldr	r3, [r2, #4]
 80003c8:	f023 0310 	bic.w	r3, r3, #16
 80003cc:	6053      	str	r3, [r2, #4]
	GPIOB -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR4;  //PB4 output speed register (very high speed)
 80003ce:	6893      	ldr	r3, [r2, #8]
 80003d0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80003d4:	6093      	str	r3, [r2, #8]
	GPIOB -> PUPDR		|= GPIO_PUPDR_PUPDR4_0; 	//PB4 pull-up
 80003d6:	68d3      	ldr	r3, [r2, #12]
 80003d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003dc:	60d3      	str	r3, [r2, #12]
	GPIOB -> AFR[0] 	|= (0x06 << 16); 			//PB4 alternate function SPI3_MISO
 80003de:	6a13      	ldr	r3, [r2, #32]
 80003e0:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 80003e4:	6213      	str	r3, [r2, #32]

	///////////
	//SPI3_MOSI
	///////////
	//pin PB5 MOSI configuration
	GPIOB -> MODER  	|= GPIO_MODER_MODER5_1; 	//PB5 pin as alternate function
 80003e6:	6813      	ldr	r3, [r2, #0]
 80003e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003ec:	6013      	str	r3, [r2, #0]
	GPIOB -> OTYPER     &= ~(GPIO_OTYPER_OT_5); 	//PB5 output type push-pull
 80003ee:	6853      	ldr	r3, [r2, #4]
 80003f0:	f023 0320 	bic.w	r3, r3, #32
 80003f4:	6053      	str	r3, [r2, #4]
	GPIOB -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR5;  //PB5 output speed register (very high speed)
 80003f6:	6893      	ldr	r3, [r2, #8]
 80003f8:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80003fc:	6093      	str	r3, [r2, #8]
	GPIOB -> PUPDR		|= GPIO_PUPDR_PUPDR5_0; 	//PB5 pull-up
 80003fe:	68d3      	ldr	r3, [r2, #12]
 8000400:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000404:	60d3      	str	r3, [r2, #12]
	GPIOB -> AFR[0] 	|= (0x06 << 20); 			//PB5 alternate function SPI3_MOSI
 8000406:	6a13      	ldr	r3, [r2, #32]
 8000408:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 800040c:	6213      	str	r3, [r2, #32]
}
 800040e:	bcf0      	pop	{r4, r5, r6, r7}
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	40023800 	.word	0x40023800
 8000418:	40020000 	.word	0x40020000
 800041c:	40020c00 	.word	0x40020c00
 8000420:	40020400 	.word	0x40020400
 8000424:	e000e100 	.word	0xe000e100
 8000428:	40013800 	.word	0x40013800
 800042c:	40013c00 	.word	0x40013c00

08000430 <SPI1Init>:

//SPI1 inicialization
void SPI1Init(){

	//Configure NSS hardware pin
	SPI1 -> CR1 	&= ~(SPI_CR1_SSM);
 8000430:	4b1e      	ldr	r3, [pc, #120]	; (80004ac <SPI1Init+0x7c>)
 8000432:	881a      	ldrh	r2, [r3, #0]
 8000434:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000438:	0412      	lsls	r2, r2, #16
 800043a:	0c12      	lsrs	r2, r2, #16
 800043c:	801a      	strh	r2, [r3, #0]
	SPI1 -> CR2 	|= SPI_CR2_SSOE;
 800043e:	889a      	ldrh	r2, [r3, #4]
 8000440:	b292      	uxth	r2, r2
 8000442:	f042 0204 	orr.w	r2, r2, #4
 8000446:	809a      	strh	r2, [r3, #4]

	//Configure clock polarity sample at positive clock edge
	SPI1 -> CR1 	&= ~(SPI_CR1_CPHA);
 8000448:	881a      	ldrh	r2, [r3, #0]
 800044a:	f022 0201 	bic.w	r2, r2, #1
 800044e:	0412      	lsls	r2, r2, #16
 8000450:	0c12      	lsrs	r2, r2, #16
 8000452:	801a      	strh	r2, [r3, #0]
	SPI1 -> CR1 	&= ~(SPI_CR1_CPOL);
 8000454:	881a      	ldrh	r2, [r3, #0]
 8000456:	f022 0202 	bic.w	r2, r2, #2
 800045a:	0412      	lsls	r2, r2, #16
 800045c:	0c12      	lsrs	r2, r2, #16
 800045e:	801a      	strh	r2, [r3, #0]

	//MSB bit first out
	SPI1 -> CR1 	&= ~(SPI_CR1_LSBFIRST);
 8000460:	881a      	ldrh	r2, [r3, #0]
 8000462:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000466:	0412      	lsls	r2, r2, #16
 8000468:	0c12      	lsrs	r2, r2, #16
 800046a:	801a      	strh	r2, [r3, #0]

	//2-line SPI mode (MISO & MOSI)
	SPI1 -> CR1 	&= ~(SPI_CR1_BIDIMODE);
 800046c:	881a      	ldrh	r2, [r3, #0]
 800046e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8000472:	801a      	strh	r2, [r3, #0]

	//SPI full duplex mode
	SPI1 -> CR1 	&= ~(SPI_CR1_RXONLY);
 8000474:	881a      	ldrh	r2, [r3, #0]
 8000476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800047a:	0412      	lsls	r2, r2, #16
 800047c:	0c12      	lsrs	r2, r2, #16
 800047e:	801a      	strh	r2, [r3, #0]

	//SPI 8-bit data frame format
	SPI1 -> CR1 	&= ~(SPI_CR1_DFF);
 8000480:	881a      	ldrh	r2, [r3, #0]
 8000482:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000486:	0412      	lsls	r2, r2, #16
 8000488:	0c12      	lsrs	r2, r2, #16
 800048a:	801a      	strh	r2, [r3, #0]

	//SPI baud rate without prescaler the sclk clock would be 42 MHz
	//SPI1 -> CR1 	|= ~(SPI_CR1_BR); 	// 84 MHz / 2 = 42 MHz
	SPI1 -> CR1 	|= (SPI_CR1_BR_1 |  SPI_CR1_BR_0); 	// 84 MHz / 16 = 5.25 MHz
 800048c:	881a      	ldrh	r2, [r3, #0]
 800048e:	b292      	uxth	r2, r2
 8000490:	f042 0218 	orr.w	r2, r2, #24
 8000494:	801a      	strh	r2, [r3, #0]
	//SPI1 -> CR1 	|= SPI_CR1_BR; 		// 84 MHz / 256 = 328 kHz (only in test version)

	//SPI in master mode configuration
	SPI1 -> CR1 	|= SPI_CR1_MSTR;
 8000496:	881a      	ldrh	r2, [r3, #0]
 8000498:	b292      	uxth	r2, r2
 800049a:	f042 0204 	orr.w	r2, r2, #4
 800049e:	801a      	strh	r2, [r3, #0]

	//SPI enable
	SPI1 -> CR1 	|= SPI_CR1_SPE;
 80004a0:	881a      	ldrh	r2, [r3, #0]
 80004a2:	b292      	uxth	r2, r2
 80004a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80004a8:	801a      	strh	r2, [r3, #0]
 80004aa:	4770      	bx	lr
 80004ac:	40013000 	.word	0x40013000

080004b0 <SPI1SendNByte>:

	 //variable for count
	 uint32_t i = 0;

	 //SPI1 CS enable (output low logical level)
	 GPIOA -> ODR 		&= ~(GPIO_ODR_ODR_4);
 80004b0:	4a0e      	ldr	r2, [pc, #56]	; (80004ec <SPI1SendNByte+0x3c>)
 80004b2:	6953      	ldr	r3, [r2, #20]
 80004b4:	f023 0310 	bic.w	r3, r3, #16
 80004b8:	6153      	str	r3, [r2, #20]

	 for(i = 0;i < data_len;i++){
 80004ba:	b181      	cbz	r1, 80004de <SPI1SendNByte+0x2e>
	 SPI1 -> DR = *data;
 80004bc:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <SPI1SendNByte+0x40>)
 80004be:	4401      	add	r1, r0
 80004c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80004c4:	819a      	strh	r2, [r3, #12]
	 while(!(SPI1 -> SR & SPI_SR_TXE));
 80004c6:	891a      	ldrh	r2, [r3, #8]
 80004c8:	0792      	lsls	r2, r2, #30
 80004ca:	d5fc      	bpl.n	80004c6 <SPI1SendNByte+0x16>
	 while(!(SPI1 -> SR & SPI_SR_RXNE));
 80004cc:	891a      	ldrh	r2, [r3, #8]
 80004ce:	07d2      	lsls	r2, r2, #31
 80004d0:	d5fc      	bpl.n	80004cc <SPI1SendNByte+0x1c>
	 while(SPI1 -> SR & SPI_SR_BSY);
 80004d2:	891a      	ldrh	r2, [r3, #8]
 80004d4:	0612      	lsls	r2, r2, #24
 80004d6:	d4fc      	bmi.n	80004d2 <SPI1SendNByte+0x22>
	 for(i = 0;i < data_len;i++){
 80004d8:	4288      	cmp	r0, r1
	 return SPI1 -> DR;
 80004da:	899a      	ldrh	r2, [r3, #12]
	 for(i = 0;i < data_len;i++){
 80004dc:	d1f0      	bne.n	80004c0 <SPI1SendNByte+0x10>
		 //Write 8 bit data
		 SPI1Send1ByteReceive1Byte(&(data[i]));
	 }

	 //SPI1 CS disable (output high logical level)
	 GPIOA -> ODR 		|= GPIO_ODR_ODR_4;
 80004de:	4a03      	ldr	r2, [pc, #12]	; (80004ec <SPI1SendNByte+0x3c>)
 80004e0:	6953      	ldr	r3, [r2, #20]
 80004e2:	f043 0310 	orr.w	r3, r3, #16
 80004e6:	6153      	str	r3, [r2, #20]

}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	40020000 	.word	0x40020000
 80004f0:	40013000 	.word	0x40013000

080004f4 <SPI1SendNByteReceive1Byte>:

	 //Received data variable
	 uint8_t received_data = 0x00;

	 //SPI1 CS enable (output low logical level)
	 GPIOA -> ODR 		&= ~(GPIO_ODR_ODR_4);
 80004f4:	4a17      	ldr	r2, [pc, #92]	; (8000554 <SPI1SendNByteReceive1Byte+0x60>)
 80004f6:	6953      	ldr	r3, [r2, #20]
 80004f8:	f023 0310 	bic.w	r3, r3, #16
uint8_t SPI1SendNByteReceive1Byte(uint8_t *data_to_send, uint32_t send_data_len){
 80004fc:	b430      	push	{r4, r5}
	 GPIOA -> ODR 		&= ~(GPIO_ODR_ODR_4);
 80004fe:	6153      	str	r3, [r2, #20]

	 for(i = 0;i < send_data_len;i++){
 8000500:	b189      	cbz	r1, 8000526 <SPI1SendNByteReceive1Byte+0x32>
	 SPI1 -> DR = *data;
 8000502:	4b15      	ldr	r3, [pc, #84]	; (8000558 <SPI1SendNByteReceive1Byte+0x64>)
 8000504:	4604      	mov	r4, r0
 8000506:	1845      	adds	r5, r0, r1
 8000508:	f814 2b01 	ldrb.w	r2, [r4], #1
 800050c:	819a      	strh	r2, [r3, #12]
	 while(!(SPI1 -> SR & SPI_SR_TXE));
 800050e:	891a      	ldrh	r2, [r3, #8]
 8000510:	0792      	lsls	r2, r2, #30
 8000512:	d5fc      	bpl.n	800050e <SPI1SendNByteReceive1Byte+0x1a>
	 while(!(SPI1 -> SR & SPI_SR_RXNE));
 8000514:	891a      	ldrh	r2, [r3, #8]
 8000516:	07d2      	lsls	r2, r2, #31
 8000518:	d5fc      	bpl.n	8000514 <SPI1SendNByteReceive1Byte+0x20>
	 while(SPI1 -> SR & SPI_SR_BSY);
 800051a:	891a      	ldrh	r2, [r3, #8]
 800051c:	0612      	lsls	r2, r2, #24
 800051e:	d4fc      	bmi.n	800051a <SPI1SendNByteReceive1Byte+0x26>
	 for(i = 0;i < send_data_len;i++){
 8000520:	42ac      	cmp	r4, r5
	 return SPI1 -> DR;
 8000522:	899a      	ldrh	r2, [r3, #12]
	 for(i = 0;i < send_data_len;i++){
 8000524:	d1f0      	bne.n	8000508 <SPI1SendNByteReceive1Byte+0x14>
	 SPI1 -> DR = *data;
 8000526:	4a0c      	ldr	r2, [pc, #48]	; (8000558 <SPI1SendNByteReceive1Byte+0x64>)
 8000528:	5c43      	ldrb	r3, [r0, r1]
 800052a:	8193      	strh	r3, [r2, #12]
	 while(!(SPI1 -> SR & SPI_SR_TXE));
 800052c:	8913      	ldrh	r3, [r2, #8]
 800052e:	0798      	lsls	r0, r3, #30
 8000530:	d5fc      	bpl.n	800052c <SPI1SendNByteReceive1Byte+0x38>
	 while(!(SPI1 -> SR & SPI_SR_RXNE));
 8000532:	4a09      	ldr	r2, [pc, #36]	; (8000558 <SPI1SendNByteReceive1Byte+0x64>)
 8000534:	8913      	ldrh	r3, [r2, #8]
 8000536:	07d9      	lsls	r1, r3, #31
 8000538:	d5fc      	bpl.n	8000534 <SPI1SendNByteReceive1Byte+0x40>
	 while(SPI1 -> SR & SPI_SR_BSY);
 800053a:	4a07      	ldr	r2, [pc, #28]	; (8000558 <SPI1SendNByteReceive1Byte+0x64>)
 800053c:	8913      	ldrh	r3, [r2, #8]
 800053e:	061b      	lsls	r3, r3, #24
 8000540:	d4fc      	bmi.n	800053c <SPI1SendNByteReceive1Byte+0x48>
		 SPI1Send1ByteReceive1Byte(&data_to_send[i]);
	 }
	 received_data = SPI1Send1ByteReceive1Byte(&data_to_send[i]);

	 //SPI1 CS disable (output high logical level)
	 GPIOA -> ODR 		|= GPIO_ODR_ODR_4;
 8000542:	4904      	ldr	r1, [pc, #16]	; (8000554 <SPI1SendNByteReceive1Byte+0x60>)
	 return SPI1 -> DR;
 8000544:	8990      	ldrh	r0, [r2, #12]
	 GPIOA -> ODR 		|= GPIO_ODR_ODR_4;
 8000546:	694b      	ldr	r3, [r1, #20]
 8000548:	f043 0310 	orr.w	r3, r3, #16

	 return received_data;
}
 800054c:	b2c0      	uxtb	r0, r0
	 GPIOA -> ODR 		|= GPIO_ODR_ODR_4;
 800054e:	614b      	str	r3, [r1, #20]
}
 8000550:	bc30      	pop	{r4, r5}
 8000552:	4770      	bx	lr
 8000554:	40020000 	.word	0x40020000
 8000558:	40013000 	.word	0x40013000

0800055c <SPI3Init>:

//SPI3 initialization
void SPI3Init(){

	//Configure NSS hardware pin
	SPI3 -> CR1 	&= ~(SPI_CR1_SSM); 		//Use hardware controlled chip select line
 800055c:	4b1b      	ldr	r3, [pc, #108]	; (80005cc <SPI3Init+0x70>)
 800055e:	881a      	ldrh	r2, [r3, #0]
 8000560:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000564:	0412      	lsls	r2, r2, #16
 8000566:	0c12      	lsrs	r2, r2, #16
 8000568:	801a      	strh	r2, [r3, #0]
	SPI3 -> CR2		|= SPI_CR2_SSOE; 		//Use hardware output chip select that was active in low state
 800056a:	889a      	ldrh	r2, [r3, #4]
 800056c:	b292      	uxth	r2, r2
 800056e:	f042 0204 	orr.w	r2, r2, #4
 8000572:	809a      	strh	r2, [r3, #4]

	//Configure clock polarity sample at positive edge of clock
	SPI3 -> CR1 	&= ~(SPI_CR1_CPHA);
 8000574:	881a      	ldrh	r2, [r3, #0]
 8000576:	f022 0201 	bic.w	r2, r2, #1
 800057a:	0412      	lsls	r2, r2, #16
 800057c:	0c12      	lsrs	r2, r2, #16
 800057e:	801a      	strh	r2, [r3, #0]
	SPI3 -> CR1 	|= SPI_CR1_CPOL;
 8000580:	881a      	ldrh	r2, [r3, #0]
 8000582:	b292      	uxth	r2, r2
 8000584:	f042 0202 	orr.w	r2, r2, #2
 8000588:	801a      	strh	r2, [r3, #0]

	//MSB bit first out
	SPI3 -> CR1 	&= ~(SPI_CR1_LSBFIRST);
 800058a:	881a      	ldrh	r2, [r3, #0]
 800058c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000590:	0412      	lsls	r2, r2, #16
 8000592:	0c12      	lsrs	r2, r2, #16
 8000594:	801a      	strh	r2, [r3, #0]

	//2-line SPI mode (MISO & MOSI)
	SPI3 -> CR1 	&= ~(SPI_CR1_BIDIMODE);
 8000596:	881a      	ldrh	r2, [r3, #0]
 8000598:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800059c:	801a      	strh	r2, [r3, #0]

	//SPI full duplex mode
	SPI3 -> CR1 	&= ~(SPI_CR1_RXONLY);
 800059e:	881a      	ldrh	r2, [r3, #0]
 80005a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80005a4:	0412      	lsls	r2, r2, #16
 80005a6:	0c12      	lsrs	r2, r2, #16
 80005a8:	801a      	strh	r2, [r3, #0]

	//SPI 8-bit data frame format
	SPI3 -> CR1 	&= ~(SPI_CR1_DFF);
 80005aa:	881a      	ldrh	r2, [r3, #0]
 80005ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80005b0:	0412      	lsls	r2, r2, #16
 80005b2:	0c12      	lsrs	r2, r2, #16
 80005b4:	801a      	strh	r2, [r3, #0]

	//SPI baud rate without prescaler the sclk clock would be 42 MHz
	SPI3 -> CR1 	|= SPI_CR1_BR_0; 	// 42 MHz / 4 = 10,5 MHz
 80005b6:	881a      	ldrh	r2, [r3, #0]
 80005b8:	b292      	uxth	r2, r2
 80005ba:	f042 0208 	orr.w	r2, r2, #8
 80005be:	801a      	strh	r2, [r3, #0]

	//SPI in master mode configuration
	SPI3 -> CR1 	|= SPI_CR1_MSTR;
 80005c0:	881a      	ldrh	r2, [r3, #0]
 80005c2:	b292      	uxth	r2, r2
 80005c4:	f042 0204 	orr.w	r2, r2, #4
 80005c8:	801a      	strh	r2, [r3, #0]
 80005ca:	4770      	bx	lr
 80005cc:	40003c00 	.word	0x40003c00

080005d0 <W5500SpiConnCheck>:

}
//Check SPI connection with external W5500 ethernet module
//0 - connection established thru SPI communication
//1 - connection error
uint8_t W5500SpiConnCheck(void){
 80005d0:	b500      	push	{lr}
 80005d2:	b085      	sub	sp, #20

	//temporary register, necessary to initialize to initial state
	uint8_t temp_array[10] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 80005d4:	2300      	movs	r3, #0

	//Read version of W5500 external device
	temp_array[0]	= MSB(W5500_CBR_VERSIONR);
	temp_array[1]	= LSB(W5500_CBR_VERSIONR);
 80005d6:	2239      	movs	r2, #57	; 0x39
	temp_array[2] 	= (W5500_CP_BSB_CR
					| W5500_CP_READ
					| W5500_CP_OM_VDLM); 			//set byte for reading from common register

	//Read thru SPI data interface
	temp_array[9] = SPI1SendNByteReceive1Byte(temp_array,3);
 80005d8:	a801      	add	r0, sp, #4
 80005da:	2103      	movs	r1, #3
	uint8_t temp_array[10] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	9302      	str	r3, [sp, #8]
 80005e0:	f8ad 300c 	strh.w	r3, [sp, #12]
	temp_array[1]	= LSB(W5500_CBR_VERSIONR);
 80005e4:	f88d 2005 	strb.w	r2, [sp, #5]
	temp_array[9] = SPI1SendNByteReceive1Byte(temp_array,3);
 80005e8:	f7ff ff84 	bl	80004f4 <SPI1SendNByteReceive1Byte>
	if(temp_array[9] == W5500_CBR_VERSIONR_CON){
		return 0; 		//W5500 device is proper connected thru SPI connection
	}else{
		return 1; 		//W5500 device SPI error
	}
}
 80005ec:	3804      	subs	r0, #4
 80005ee:	bf18      	it	ne
 80005f0:	2001      	movne	r0, #1
 80005f2:	b005      	add	sp, #20
 80005f4:	f85d fb04 	ldr.w	pc, [sp], #4

080005f8 <W5500InitV2>:
//IP address 			<ip> 		for example {192,168,1,1}
//Gateway address		<gateway> 	for example {192,168,1,1}
//Subnet mask 			<submask> 	for example {255,255,255,0}
//MAC address 			<mac> 		for example {0x00,0x08,0xdc,0x01,0x02,0x03}
//Returned value 		0-OK status 1- error
void W5500InitV2(uint8_t *ip, uint8_t *gateway, uint8_t *submask, uint8_t *mac){
 80005f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}


	//w5500 enable ping response
	temp_array[0] 		= MSB(W5500_CRB_MR);			//set address for common mode register MSB
	temp_array[1] 		= LSB(W5500_CRB_MR);			//set address for common mode register LSB
	temp_array[2] 		= (W5500_CP_BSB_CR
 80005fc:	2404      	movs	r4, #4
void W5500InitV2(uint8_t *ip, uint8_t *gateway, uint8_t *submask, uint8_t *mac){
 80005fe:	b085      	sub	sp, #20
 8000600:	4689      	mov	r9, r1
	uint8_t temp_array[10] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 8000602:	2500      	movs	r5, #0
void W5500InitV2(uint8_t *ip, uint8_t *gateway, uint8_t *submask, uint8_t *mac){
 8000604:	4607      	mov	r7, r0
						| W5500_CRB_MR_WOL
						| W5500_CRB_MR_PB
						| W5500_CRB_MR_PPPOE
						| W5500_CRB_MR_FARP); 			//write in to common mode register
	//write thru spi communication
	SPI1SendNByte(temp_array,4);
 8000606:	4621      	mov	r1, r4
 8000608:	eb0d 0004 	add.w	r0, sp, r4
void W5500InitV2(uint8_t *ip, uint8_t *gateway, uint8_t *submask, uint8_t *mac){
 800060c:	461e      	mov	r6, r3
 800060e:	4690      	mov	r8, r2
	uint8_t temp_array[10] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 8000610:	9501      	str	r5, [sp, #4]
 8000612:	9502      	str	r5, [sp, #8]
 8000614:	f8ad 500c 	strh.w	r5, [sp, #12]
	temp_array[2] 		= (W5500_CP_BSB_CR
 8000618:	f88d 4006 	strb.w	r4, [sp, #6]
	SPI1SendNByte(temp_array,4);
 800061c:	f7ff ff48 	bl	80004b0 <SPI1SendNByte>
	temp_array[0] 		= MSB(W5500_CRB_GAR_0);			//set address for common gateway register MSB
	temp_array[1] 		= LSB(W5500_CRB_GAR_0);			//set address for common gateway register LSB
	temp_array[2] 		= (W5500_CP_BSB_CR
						| W5500_CP_WRITE
						| W5500_CP_OM_VDLM); 			//set byte for write in to common register
	temp_array[3] 		= gateway[0]; 					//setup gateway address byte 0
 8000620:	f899 0000 	ldrb.w	r0, [r9]
	temp_array[4] 		= gateway[1]; 					//setup gateway address byte 1
 8000624:	f899 3001 	ldrb.w	r3, [r9, #1]
	temp_array[5] 		= gateway[2]; 					//setup gateway address byte 2
 8000628:	f899 1002 	ldrb.w	r1, [r9, #2]
	temp_array[6] 		= gateway[3]; 					//setup gateway address byte 3
 800062c:	f899 2003 	ldrb.w	r2, [r9, #3]
	temp_array[3] 		= gateway[0]; 					//setup gateway address byte 0
 8000630:	f88d 0007 	strb.w	r0, [sp, #7]
	temp_array[4] 		= gateway[1]; 					//setup gateway address byte 1
 8000634:	f88d 3008 	strb.w	r3, [sp, #8]
	//write thru spi communication
	SPI1SendNByte(temp_array,7);
 8000638:	eb0d 0004 	add.w	r0, sp, r4
	temp_array[1] 		= LSB(W5500_CRB_GAR_0);			//set address for common gateway register LSB
 800063c:	2301      	movs	r3, #1
	temp_array[5] 		= gateway[2]; 					//setup gateway address byte 2
 800063e:	f88d 1009 	strb.w	r1, [sp, #9]
	SPI1SendNByte(temp_array,7);
 8000642:	2107      	movs	r1, #7
	temp_array[6] 		= gateway[3]; 					//setup gateway address byte 3
 8000644:	f88d 200a 	strb.w	r2, [sp, #10]
	temp_array[1] 		= LSB(W5500_CRB_GAR_0);			//set address for common gateway register LSB
 8000648:	f88d 3005 	strb.w	r3, [sp, #5]
	temp_array[0] 		= MSB(W5500_CRB_GAR_0);			//set address for common gateway register MSB
 800064c:	f88d 5004 	strb.w	r5, [sp, #4]
	temp_array[2] 		= (W5500_CP_BSB_CR
 8000650:	f88d 4006 	strb.w	r4, [sp, #6]
	SPI1SendNByte(temp_array,7);
 8000654:	f7ff ff2c 	bl	80004b0 <SPI1SendNByte>
	temp_array[0] 		= MSB(W5500_CRB_SUBR_0);		//set address for common subnet mask register MSB
	temp_array[1] 		= LSB(W5500_CRB_SUBR_0);		//set address for common subnet mask register LSB
	temp_array[2] 		= (W5500_CP_BSB_CR
						| W5500_CP_WRITE
						| W5500_CP_OM_VDLM); 			//set byte for write in to common register
	temp_array[3] 		= submask[0]; 					//setup subnet mask address byte 0
 8000658:	f898 3000 	ldrb.w	r3, [r8]
	temp_array[4] 		= submask[1]; 					//setup subnet mask address byte 1
 800065c:	f898 1001 	ldrb.w	r1, [r8, #1]
	temp_array[5] 		= submask[2]; 					//setup subnet mask address byte 2
 8000660:	f898 e002 	ldrb.w	lr, [r8, #2]
	temp_array[6] 		= submask[3]; 					//setup subnet mask address byte 3
 8000664:	f898 2003 	ldrb.w	r2, [r8, #3]
	temp_array[3] 		= submask[0]; 					//setup subnet mask address byte 0
 8000668:	f88d 3007 	strb.w	r3, [sp, #7]
	//write thru spi communication
	SPI1SendNByte(temp_array,7);
 800066c:	eb0d 0004 	add.w	r0, sp, r4
	temp_array[1] 		= LSB(W5500_CRB_SUBR_0);		//set address for common subnet mask register LSB
 8000670:	2305      	movs	r3, #5
	temp_array[4] 		= submask[1]; 					//setup subnet mask address byte 1
 8000672:	f88d 1008 	strb.w	r1, [sp, #8]
	SPI1SendNByte(temp_array,7);
 8000676:	2107      	movs	r1, #7
	temp_array[5] 		= submask[2]; 					//setup subnet mask address byte 2
 8000678:	f88d e009 	strb.w	lr, [sp, #9]
	temp_array[6] 		= submask[3]; 					//setup subnet mask address byte 3
 800067c:	f88d 200a 	strb.w	r2, [sp, #10]
	temp_array[1] 		= LSB(W5500_CRB_SUBR_0);		//set address for common subnet mask register LSB
 8000680:	f88d 3005 	strb.w	r3, [sp, #5]
	temp_array[0] 		= MSB(W5500_CRB_SUBR_0);		//set address for common subnet mask register MSB
 8000684:	f88d 5004 	strb.w	r5, [sp, #4]
	temp_array[2] 		= (W5500_CP_BSB_CR
 8000688:	f88d 4006 	strb.w	r4, [sp, #6]
	SPI1SendNByte(temp_array,7);
 800068c:	f7ff ff10 	bl	80004b0 <SPI1SendNByte>


	//setup hardware address register
	temp_array[0] 		= MSB(W5500_CRB_SHAR_0);		//set address for common hardware address register MSB
	temp_array[1] 		= LSB(W5500_CRB_SHAR_0);		//set address for common hardware address register LSB
 8000690:	2309      	movs	r3, #9
	temp_array[2] 		= (W5500_CP_BSB_CR
						| W5500_CP_WRITE
						| W5500_CP_OM_VDLM); 			//set byte for write in to common register
	temp_array[3] 		= mac[0]; 						//setup hardware address byte 0
 8000692:	7832      	ldrb	r2, [r6, #0]
	temp_array[4] 		= mac[1]; 						//setup hardware address byte 1
 8000694:	7870      	ldrb	r0, [r6, #1]
	temp_array[5] 		= mac[2]; 						//setup hardware address byte 2
 8000696:	78b1      	ldrb	r1, [r6, #2]
	temp_array[6] 		= mac[3]; 						//setup hardware address byte 3
 8000698:	f896 c003 	ldrb.w	ip, [r6, #3]
	temp_array[7] 		= mac[4]; 						//setup hardware address byte 4
 800069c:	f896 e004 	ldrb.w	lr, [r6, #4]
	temp_array[3] 		= mac[0]; 						//setup hardware address byte 0
 80006a0:	f88d 2007 	strb.w	r2, [sp, #7]
	temp_array[4] 		= mac[1]; 						//setup hardware address byte 1
 80006a4:	f88d 0008 	strb.w	r0, [sp, #8]
	temp_array[8] 		= mac[5]; 						//setup hardware address byte 5
 80006a8:	7972      	ldrb	r2, [r6, #5]
	temp_array[5] 		= mac[2]; 						//setup hardware address byte 2
 80006aa:	f88d 1009 	strb.w	r1, [sp, #9]
	//write thru spi communication
	SPI1SendNByte(temp_array,9);
 80006ae:	eb0d 0004 	add.w	r0, sp, r4
 80006b2:	4619      	mov	r1, r3
	temp_array[6] 		= mac[3]; 						//setup hardware address byte 3
 80006b4:	f88d c00a 	strb.w	ip, [sp, #10]
	temp_array[7] 		= mac[4]; 						//setup hardware address byte 4
 80006b8:	f88d e00b 	strb.w	lr, [sp, #11]
	temp_array[8] 		= mac[5]; 						//setup hardware address byte 5
 80006bc:	f88d 200c 	strb.w	r2, [sp, #12]
	temp_array[1] 		= LSB(W5500_CRB_SHAR_0);		//set address for common hardware address register LSB
 80006c0:	f88d 3005 	strb.w	r3, [sp, #5]
	temp_array[0] 		= MSB(W5500_CRB_SHAR_0);		//set address for common hardware address register MSB
 80006c4:	f88d 5004 	strb.w	r5, [sp, #4]
	temp_array[2] 		= (W5500_CP_BSB_CR
 80006c8:	f88d 4006 	strb.w	r4, [sp, #6]
	SPI1SendNByte(temp_array,9);
 80006cc:	f7ff fef0 	bl	80004b0 <SPI1SendNByte>
	temp_array[0] 		= MSB(W5500_CRB_SIPR_0);		//set address for source IP register MSB
	temp_array[1] 		= LSB(W5500_CRB_SIPR_0);		//set address for source IP register LSB
	temp_array[2] 		= (W5500_CP_BSB_CR
						| W5500_CP_WRITE
						| W5500_CP_OM_VDLM); 			//set byte for write in to common register
	temp_array[3] 		= ip[0]; 						//setup source IP address byte 0
 80006d0:	f897 c000 	ldrb.w	ip, [r7]
	temp_array[4] 		= ip[1]; 						//setup source IP address byte 1
 80006d4:	f897 e001 	ldrb.w	lr, [r7, #1]
	temp_array[5] 		= ip[2]; 						//setup source IP address byte 2
	temp_array[6] 		= ip[3]; 						//setup source IP address byte 3
 80006d8:	78fa      	ldrb	r2, [r7, #3]
	temp_array[5] 		= ip[2]; 						//setup source IP address byte 2
 80006da:	78be      	ldrb	r6, [r7, #2]
	temp_array[3] 		= ip[0]; 						//setup source IP address byte 0
 80006dc:	f88d c007 	strb.w	ip, [sp, #7]
	//write thru spi communication
	SPI1SendNByte(temp_array,7);
 80006e0:	eb0d 0004 	add.w	r0, sp, r4
	temp_array[1] 		= LSB(W5500_CRB_SIPR_0);		//set address for source IP register LSB
 80006e4:	230f      	movs	r3, #15
	SPI1SendNByte(temp_array,7);
 80006e6:	2107      	movs	r1, #7
	temp_array[4] 		= ip[1]; 						//setup source IP address byte 1
 80006e8:	f88d e008 	strb.w	lr, [sp, #8]
	temp_array[6] 		= ip[3]; 						//setup source IP address byte 3
 80006ec:	f88d 200a 	strb.w	r2, [sp, #10]
	temp_array[1] 		= LSB(W5500_CRB_SIPR_0);		//set address for source IP register LSB
 80006f0:	f88d 3005 	strb.w	r3, [sp, #5]
	temp_array[0] 		= MSB(W5500_CRB_SIPR_0);		//set address for source IP register MSB
 80006f4:	f88d 5004 	strb.w	r5, [sp, #4]
	temp_array[2] 		= (W5500_CP_BSB_CR
 80006f8:	f88d 4006 	strb.w	r4, [sp, #6]
	temp_array[5] 		= ip[2]; 						//setup source IP address byte 2
 80006fc:	f88d 6009 	strb.w	r6, [sp, #9]
	SPI1SendNByte(temp_array,7);
 8000700:	f7ff fed6 	bl	80004b0 <SPI1SendNByte>


	//setup PHY configuration register
	temp_array[0] 	= MSB(W5500_CRB_PHYCFGR);
 8000704:	4b04      	ldr	r3, [pc, #16]	; (8000718 <W5500InitV2+0x120>)
 8000706:	9301      	str	r3, [sp, #4]
					| W5500_CP_OM_VDLM); 				//write in to common register
	temp_array[3] 	= (W5500_CRB_PHYCFGR_RST
					| W5500_CRB_PHYCFGR_OPMD
					| W5500_CRB_PHYCFGR_OPMDC_100FD); 	//100BT full-duplex auto negotiation disable
	//write thru spi communication
	SPI1SendNByte(temp_array,4);
 8000708:	4621      	mov	r1, r4
 800070a:	eb0d 0004 	add.w	r0, sp, r4
 800070e:	f7ff fecf 	bl	80004b0 <SPI1SendNByte>


}
 8000712:	b005      	add	sp, #20
 8000714:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000718:	d8042e00 	.word	0xd8042e00

0800071c <W5500InitTCP>:
//Socket number 	<socket_no> 	(0,1,2,3,4,5,6,7)
//Port number 		<port>			for example 1000
//TX buffer size 	<TX_buff_size> 	(0,1,2,4,8,16)
//RX buffer size 	<RX_buff_size> 	(0,1,2,4,8,16)
//Returned value 	0-OK status 1- error
uint8_t W5500InitTCP(uint8_t socket_no, uint16_t port, uint8_t TX_buff_size, uint8_t RX_buff_size){
 800071c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000720:	b084      	sub	sp, #16

	//temporary register, necessary to initialize to initial state
	uint8_t temp_array[10] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 8000722:	2400      	movs	r4, #0
 8000724:	9402      	str	r4, [sp, #8]
 8000726:	9401      	str	r4, [sp, #4]
 8000728:	f8ad 400c 	strh.w	r4, [sp, #12]
	//socket select register which select proper offset address allocation
	uint8_t socket_sel_register;

	switch(socket_no){
 800072c:	2807      	cmp	r0, #7
 800072e:	d869      	bhi.n	8000804 <W5500InitTCP+0xe8>
 8000730:	e8df f000 	tbb	[pc, r0]
 8000734:	56530465 	.word	0x56530465
 8000738:	625f5c59 	.word	0x625f5c59
 800073c:	f04f 082c 	mov.w	r8, #44	; 0x2c
	temp_array[0] 	= MSB(W5500_CRB_SIMR);
	temp_array[1] 	= LSB(W5500_CRB_SIMR);
	temp_array[2] 	= (W5500_CP_BSB_CR
					| W5500_CP_WRITE
					| W5500_CP_OM_VDLM); 				//write in to common register
	temp_array[3] 	= (1 << socket_no); 				//Enable socket n mask interrupt register
 8000740:	f04f 0a01 	mov.w	sl, #1
	temp_array[2] 	= (W5500_CP_BSB_CR
 8000744:	2504      	movs	r5, #4
	temp_array[3] 	= (1 << socket_no); 				//Enable socket n mask interrupt register
 8000746:	fa0a f000 	lsl.w	r0, sl, r0
 800074a:	460e      	mov	r6, r1
 800074c:	4699      	mov	r9, r3
	//write thru spi communication
	SPI1SendNByte(temp_array,4);
 800074e:	4629      	mov	r1, r5
	temp_array[1] 	= LSB(W5500_CRB_SIMR);
 8000750:	2318      	movs	r3, #24
	temp_array[3] 	= (1 << socket_no); 				//Enable socket n mask interrupt register
 8000752:	f88d 0007 	strb.w	r0, [sp, #7]
	SPI1SendNByte(temp_array,4);
 8000756:	eb0d 0005 	add.w	r0, sp, r5
 800075a:	4617      	mov	r7, r2
	temp_array[1] 	= LSB(W5500_CRB_SIMR);
 800075c:	f88d 3005 	strb.w	r3, [sp, #5]
	temp_array[2] 	= (W5500_CP_BSB_CR
 8000760:	f88d 5006 	strb.w	r5, [sp, #6]
	SPI1SendNByte(temp_array,4);
 8000764:	f7ff fea4 	bl	80004b0 <SPI1SendNByte>


	//clear Socket interrupt register SIR
	temp_array[0] 	= MSB(W5500_CRB_SIR);
 8000768:	4b27      	ldr	r3, [pc, #156]	; (8000808 <W5500InitTCP+0xec>)
 800076a:	9301      	str	r3, [sp, #4]
	temp_array[2] 	= (W5500_CP_BSB_CR
					| W5500_CP_WRITE
					| W5500_CP_OM_VDLM); 				//write in to common register
	temp_array[3] 	= 0x00; 							//Clear all status flags in socket interrupt register
	//write thru spi communication
	SPI1SendNByte(temp_array,4);
 800076c:	4629      	mov	r1, r5
 800076e:	eb0d 0005 	add.w	r0, sp, r5
 8000772:	f7ff fe9d 	bl	80004b0 <SPI1SendNByte>


	//setup Socket n RX and TX memory allocation
	temp_array[0] 	= MSB(W5500_SR_RXBUF_SIZE);
 8000776:	2400      	movs	r4, #0
	temp_array[1] 	= LSB(W5500_SR_RXBUF_SIZE);
 8000778:	231e      	movs	r3, #30
					| W5500_CP_WRITE
					| W5500_CP_OM_VDLM); 				//write in to socket n configuration register
	temp_array[3] 	= RX_buff_size; 					//Define RX buffer size
	temp_array[4] 	= TX_buff_size; 					//Define TX buffer size at address (RX buffer size register) + 1 = 0x001f
	//write thru spi communication
	SPI1SendNByte(temp_array,5);
 800077a:	2105      	movs	r1, #5
 800077c:	eb0d 0005 	add.w	r0, sp, r5
	temp_array[1] 	= LSB(W5500_SR_RXBUF_SIZE);
 8000780:	f88d 3005 	strb.w	r3, [sp, #5]
	temp_array[2] 	= (socket_sel_register          	//Select socket n
 8000784:	f88d 8006 	strb.w	r8, [sp, #6]
	temp_array[3] 	= RX_buff_size; 					//Define RX buffer size
 8000788:	f88d 9007 	strb.w	r9, [sp, #7]
	temp_array[4] 	= TX_buff_size; 					//Define TX buffer size at address (RX buffer size register) + 1 = 0x001f
 800078c:	f88d 7008 	strb.w	r7, [sp, #8]
	temp_array[0] 	= MSB(W5500_SR_RXBUF_SIZE);
 8000790:	f88d 4004 	strb.w	r4, [sp, #4]
	SPI1SendNByte(temp_array,5);
 8000794:	f7ff fe8c 	bl	80004b0 <SPI1SendNByte>
	temp_array[2] 	= (socket_sel_register          	//Select socket n
					| W5500_CP_WRITE
					| W5500_CP_OM_VDLM); 				//write in to socket n configuration register
	temp_array[3] 	= W5500_SR_MR_TCP; 					//Configure socket n as TCP protocol
	//write thru spi communication
	SPI1SendNByte(temp_array,4);
 8000798:	4629      	mov	r1, r5
 800079a:	eb0d 0005 	add.w	r0, sp, r5
	temp_array[3] 	= W5500_SR_MR_TCP; 					//Configure socket n as TCP protocol
 800079e:	f88d a007 	strb.w	sl, [sp, #7]
	temp_array[0] 	= MSB(W5500_SR_MR);
 80007a2:	f88d 4004 	strb.w	r4, [sp, #4]
	temp_array[1] 	= LSB(W5500_SR_MR);
 80007a6:	f88d 4005 	strb.w	r4, [sp, #5]
	temp_array[2] 	= (socket_sel_register          	//Select socket n
 80007aa:	f88d 8006 	strb.w	r8, [sp, #6]
	SPI1SendNByte(temp_array,4);
 80007ae:	f7ff fe7f 	bl	80004b0 <SPI1SendNByte>
					| W5500_CP_WRITE
					| W5500_CP_OM_VDLM); 				//write in to socket n configuration register
	temp_array[3] 	= MSB(port);						//Configure MSB byte of port register
	temp_array[4] 	= LSB(port); 						//Configure LSB byte of port register
	//write thru spi communication
	SPI1SendNByte(temp_array,5);
 80007b2:	eb0d 0005 	add.w	r0, sp, r5
	temp_array[3] 	= MSB(port);						//Configure MSB byte of port register
 80007b6:	0a33      	lsrs	r3, r6, #8
	SPI1SendNByte(temp_array,5);
 80007b8:	2105      	movs	r1, #5
	temp_array[0] 	= MSB(W5500_SR_PORT_0);
 80007ba:	f88d 4004 	strb.w	r4, [sp, #4]
	temp_array[1] 	= LSB(W5500_SR_PORT_0);
 80007be:	f88d 5005 	strb.w	r5, [sp, #5]
	temp_array[2] 	= (socket_sel_register          	//Select socket n
 80007c2:	f88d 8006 	strb.w	r8, [sp, #6]
	temp_array[4] 	= LSB(port); 						//Configure LSB byte of port register
 80007c6:	f88d 6008 	strb.w	r6, [sp, #8]
	temp_array[3] 	= MSB(port);						//Configure MSB byte of port register
 80007ca:	f88d 3007 	strb.w	r3, [sp, #7]
	SPI1SendNByte(temp_array,5);
 80007ce:	f7ff fe6f 	bl	80004b0 <SPI1SendNByte>

	return 0;
 80007d2:	4620      	mov	r0, r4
}
 80007d4:	b004      	add	sp, #16
 80007d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		break;
 80007da:	f04f 084c 	mov.w	r8, #76	; 0x4c
 80007de:	e7af      	b.n	8000740 <W5500InitTCP+0x24>
		break;
 80007e0:	f04f 086c 	mov.w	r8, #108	; 0x6c
 80007e4:	e7ac      	b.n	8000740 <W5500InitTCP+0x24>
		break;
 80007e6:	f04f 088c 	mov.w	r8, #140	; 0x8c
 80007ea:	e7a9      	b.n	8000740 <W5500InitTCP+0x24>
		break;
 80007ec:	f04f 08ac 	mov.w	r8, #172	; 0xac
 80007f0:	e7a6      	b.n	8000740 <W5500InitTCP+0x24>
		break;
 80007f2:	f04f 08cc 	mov.w	r8, #204	; 0xcc
 80007f6:	e7a3      	b.n	8000740 <W5500InitTCP+0x24>
		break;
 80007f8:	f04f 08ec 	mov.w	r8, #236	; 0xec
 80007fc:	e7a0      	b.n	8000740 <W5500InitTCP+0x24>
	switch(socket_no){
 80007fe:	f04f 080c 	mov.w	r8, #12
 8000802:	e79d      	b.n	8000740 <W5500InitTCP+0x24>
		return 1; 										//error
 8000804:	2001      	movs	r0, #1
 8000806:	e7e5      	b.n	80007d4 <W5500InitTCP+0xb8>
 8000808:	00041700 	.word	0x00041700

0800080c <W5500OpenTCPServer>:

//Open TCP protocol
//Socket number 	<socket_no> 	(0,1,2,3,4,5,6,7)
//Returned value 0-OK status 1- error
uint8_t W5500OpenTCPServer(uint8_t socket_no){
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	b084      	sub	sp, #16

	//temporary register, necessary to initialize to initial state
	uint8_t temp_array[10] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 8000810:	2300      	movs	r3, #0
 8000812:	9302      	str	r3, [sp, #8]
 8000814:	9301      	str	r3, [sp, #4]
 8000816:	f8ad 300c 	strh.w	r3, [sp, #12]
	//socket select register which select proper offset address allocation
	uint8_t socket_sel_register;

	switch(socket_no){
 800081a:	2807      	cmp	r0, #7
 800081c:	d856      	bhi.n	80008cc <W5500OpenTCPServer+0xc0>
 800081e:	e8df f000 	tbb	[pc, r0]
 8000822:	0440      	.short	0x0440
 8000824:	46524f4c 	.word	0x46524f4c
 8000828:	4349      	.short	0x4349
 800082a:	262c      	movs	r6, #44	; 0x2c

		case 0x00:
			socket_sel_register = W5500_CP_BSB_S0_R; 		//socket 0 address
			break;
		case 0x01:
			socket_sel_register = W5500_CP_BSB_S1_R; 		//socket 1 address
 800082c:	2528      	movs	r5, #40	; 0x28
	temp_array[2] 	= (socket_sel_register
					| W5500_CP_WRITE
					| W5500_CP_OM_VDLM); 				//write in to socket n configuration register
	temp_array[3] 	= W5500_SR_CR_OPEN; 				//open command
	//write thru spi communication
	SPI1SendNByte(temp_array,4);
 800082e:	2104      	movs	r1, #4
	temp_array[1] 	= LSB(W5500_SR_CR);
 8000830:	2301      	movs	r3, #1
	SPI1SendNByte(temp_array,4);
 8000832:	eb0d 0001 	add.w	r0, sp, r1
	temp_array[1] 	= LSB(W5500_SR_CR);
 8000836:	f88d 3005 	strb.w	r3, [sp, #5]
	temp_array[3] 	= W5500_SR_CR_OPEN; 				//open command
 800083a:	f88d 3007 	strb.w	r3, [sp, #7]
	temp_array[2] 	= (socket_sel_register
 800083e:	f88d 6006 	strb.w	r6, [sp, #6]
	SPI1SendNByte(temp_array,4);
 8000842:	f7ff fe35 	bl	80004b0 <SPI1SendNByte>

	//Read status register
	temp_array[0]	= MSB(W5500_SR_SR);
 8000846:	2200      	movs	r2, #0
	temp_array[1]	= LSB(W5500_SR_SR);
 8000848:	2303      	movs	r3, #3
	temp_array[2] 	= (socket_sel_register
 800084a:	f88d 5006 	strb.w	r5, [sp, #6]
	temp_array[0]	= MSB(W5500_SR_SR);
 800084e:	f88d 2004 	strb.w	r2, [sp, #4]
	temp_array[1]	= LSB(W5500_SR_SR);
 8000852:	f88d 3005 	strb.w	r3, [sp, #5]
					| W5500_CP_READ
					| W5500_CP_OM_VDLM); 				//set byte for reading from common register

	//wait on Socket n SOCK_INIT flag
	while(!(SPI1SendNByteReceive1Byte(temp_array,3) == W5500_SR_SR_SOCK_INIT));
 8000856:	2103      	movs	r1, #3
 8000858:	a801      	add	r0, sp, #4
 800085a:	f7ff fe4b 	bl	80004f4 <SPI1SendNByteReceive1Byte>
 800085e:	2813      	cmp	r0, #19
 8000860:	d1f9      	bne.n	8000856 <W5500OpenTCPServer+0x4a>
	temp_array[2] 	= (socket_sel_register
					| W5500_CP_WRITE
					| W5500_CP_OM_VDLM); 				//write in to socket n configuration register
	temp_array[3] 	= W5500_SR_CR_LISTEN; 				//listen command
	//write thru spi communication
	SPI1SendNByte(temp_array,4);
 8000862:	2104      	movs	r1, #4
	temp_array[3] 	= W5500_SR_CR_LISTEN; 				//listen command
 8000864:	2302      	movs	r3, #2
	temp_array[0] 	= MSB(W5500_SR_CR);
 8000866:	2400      	movs	r4, #0
	temp_array[1] 	= LSB(W5500_SR_CR);
 8000868:	2201      	movs	r2, #1
	SPI1SendNByte(temp_array,4);
 800086a:	eb0d 0001 	add.w	r0, sp, r1
	temp_array[3] 	= W5500_SR_CR_LISTEN; 				//listen command
 800086e:	f88d 3007 	strb.w	r3, [sp, #7]
	temp_array[2] 	= (socket_sel_register
 8000872:	f88d 6006 	strb.w	r6, [sp, #6]
	temp_array[0] 	= MSB(W5500_SR_CR);
 8000876:	f88d 4004 	strb.w	r4, [sp, #4]
	temp_array[1] 	= LSB(W5500_SR_CR);
 800087a:	f88d 2005 	strb.w	r2, [sp, #5]
	SPI1SendNByte(temp_array,4);
 800087e:	f7ff fe17 	bl	80004b0 <SPI1SendNByte>


	//Read status register
	temp_array[0]	= MSB(W5500_SR_SR);
	temp_array[1]	= LSB(W5500_SR_SR);
 8000882:	2303      	movs	r3, #3
	temp_array[0]	= MSB(W5500_SR_SR);
 8000884:	f88d 4004 	strb.w	r4, [sp, #4]
	temp_array[2] 	= (socket_sel_register
 8000888:	f88d 5006 	strb.w	r5, [sp, #6]
	temp_array[1]	= LSB(W5500_SR_SR);
 800088c:	f88d 3005 	strb.w	r3, [sp, #5]
					| W5500_CP_READ
					| W5500_CP_OM_VDLM); 				//set byte for reading from common register
	//wait on Socket n SOCK_LISTEN flag
	while(!(SPI1SendNByteReceive1Byte(temp_array,3) == W5500_SR_SR_SOCK_LISTEN));
 8000890:	2103      	movs	r1, #3
 8000892:	a801      	add	r0, sp, #4
 8000894:	f7ff fe2e 	bl	80004f4 <SPI1SendNByteReceive1Byte>
 8000898:	2814      	cmp	r0, #20
 800089a:	d1f9      	bne.n	8000890 <W5500OpenTCPServer+0x84>


	return 0;
 800089c:	2000      	movs	r0, #0
}
 800089e:	b004      	add	sp, #16
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
	switch(socket_no){
 80008a2:	260c      	movs	r6, #12
			socket_sel_register = W5500_CP_BSB_S0_R; 		//socket 0 address
 80008a4:	2508      	movs	r5, #8
 80008a6:	e7c2      	b.n	800082e <W5500OpenTCPServer+0x22>
			break;
 80008a8:	26ec      	movs	r6, #236	; 0xec
			socket_sel_register = W5500_CP_BSB_S7_R; 		//socket 7 address
 80008aa:	25e8      	movs	r5, #232	; 0xe8
			break;
 80008ac:	e7bf      	b.n	800082e <W5500OpenTCPServer+0x22>
			break;
 80008ae:	26ac      	movs	r6, #172	; 0xac
			socket_sel_register = W5500_CP_BSB_S5_R; 		//socket 5 address
 80008b0:	25a8      	movs	r5, #168	; 0xa8
			break;
 80008b2:	e7bc      	b.n	800082e <W5500OpenTCPServer+0x22>
			break;
 80008b4:	26cc      	movs	r6, #204	; 0xcc
			socket_sel_register = W5500_CP_BSB_S6_R; 		//socket 6 address
 80008b6:	25c8      	movs	r5, #200	; 0xc8
			break;
 80008b8:	e7b9      	b.n	800082e <W5500OpenTCPServer+0x22>
			break;
 80008ba:	264c      	movs	r6, #76	; 0x4c
			socket_sel_register = W5500_CP_BSB_S2_R;		//socket 2 address
 80008bc:	2548      	movs	r5, #72	; 0x48
			break;
 80008be:	e7b6      	b.n	800082e <W5500OpenTCPServer+0x22>
			break;
 80008c0:	266c      	movs	r6, #108	; 0x6c
			socket_sel_register = W5500_CP_BSB_S3_R; 		//socket 3 address
 80008c2:	2568      	movs	r5, #104	; 0x68
			break;
 80008c4:	e7b3      	b.n	800082e <W5500OpenTCPServer+0x22>
			break;
 80008c6:	268c      	movs	r6, #140	; 0x8c
			socket_sel_register = W5500_CP_BSB_S4_R; 		//socket 4 address
 80008c8:	2588      	movs	r5, #136	; 0x88
			break;
 80008ca:	e7b0      	b.n	800082e <W5500OpenTCPServer+0x22>
			return 1; 										//error
 80008cc:	2001      	movs	r0, #1
 80008ce:	e7e6      	b.n	800089e <W5500OpenTCPServer+0x92>

080008d0 <main>:
void EXTI3_IRQHandler(void); 		//Initialization of handler for external interrupt on line 3

//
//MAIN
//
int main(void){
 80008d0:	b530      	push	{r4, r5, lr}

  uint32_t ret_code_from_sysTick; 	//return code from SysTick_Config function 1 for error see core_cm4.h
  uint8_t error_hand;

  uint8_t ip[4] 	= {192,168,1,100}; 					//dedicated ip address for external W5500 device
 80008d2:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <main+0x80>)
  uint8_t gateway[4]= {192,168,1,1}; 					//gateway
  uint8_t submask[4]= {255,255,255,0}; 					//subnet mask
  uint8_t mac[6]	= {0x00,0x08,0xdc,0x01,0x02,0x03}; 	//dedicated mac address
 80008d4:	f103 020c 	add.w	r2, r3, #12
 80008d8:	e892 0003 	ldmia.w	r2, {r0, r1}
int main(void){
 80008dc:	b087      	sub	sp, #28
  uint8_t gateway[4]= {192,168,1,1}; 					//gateway
 80008de:	685a      	ldr	r2, [r3, #4]
  uint8_t ip[4] 	= {192,168,1,100}; 					//dedicated ip address for external W5500 device
 80008e0:	681c      	ldr	r4, [r3, #0]
  uint8_t submask[4]= {255,255,255,0}; 					//subnet mask
 80008e2:	689b      	ldr	r3, [r3, #8]
  uint8_t mac[6]	= {0x00,0x08,0xdc,0x01,0x02,0x03}; 	//dedicated mac address
 80008e4:	9004      	str	r0, [sp, #16]
 80008e6:	f8ad 1014 	strh.w	r1, [sp, #20]
  uint8_t gateway[4]= {192,168,1,1}; 					//gateway
 80008ea:	9202      	str	r2, [sp, #8]
  uint8_t submask[4]= {255,255,255,0}; 					//subnet mask
 80008ec:	9303      	str	r3, [sp, #12]
  uint8_t ip[4] 	= {192,168,1,100}; 					//dedicated ip address for external W5500 device
 80008ee:	9401      	str	r4, [sp, #4]


  //Init GPIOA
  InitGPIO();
 80008f0:	f7ff fc6a 	bl	80001c8 <InitGPIO>
  //Init SPI3
  SPI3Init();
 80008f4:	f7ff fe32 	bl	800055c <SPI3Init>
  //Init SPI1
  SPI1Init();
 80008f8:	f7ff fd9a 	bl	8000430 <SPI1Init>
  //W5500 initialize
  //W5500Init();
  if(W5500SpiConnCheck() == 0){
 80008fc:	f7ff fe68 	bl	80005d0 <W5500SpiConnCheck>
 8000900:	b110      	cbz	r0, 8000908 <main+0x38>
	  //Enable SPI3
	  //SPI3 -> CR1 	|= SPI_CR1_SPE;
	  //Disable SPI3
	  //SPI3 -> CR1 	&= ~(SPI_CR1_SPE);
  }
}
 8000902:	2000      	movs	r0, #0
 8000904:	b007      	add	sp, #28
 8000906:	bd30      	pop	{r4, r5, pc}
 8000908:	4604      	mov	r4, r0
	  W5500InitV2(ip, gateway, submask, mac);
 800090a:	ab04      	add	r3, sp, #16
 800090c:	aa03      	add	r2, sp, #12
 800090e:	a902      	add	r1, sp, #8
 8000910:	a801      	add	r0, sp, #4
 8000912:	f7ff fe71 	bl	80005f8 <W5500InitV2>
	  error_hand = W5500InitTCP(0,1024,2,2);
 8000916:	2302      	movs	r3, #2
 8000918:	4620      	mov	r0, r4
 800091a:	461a      	mov	r2, r3
 800091c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000920:	f7ff fefc 	bl	800071c <W5500InitTCP>
	  if(error_hand !=0)return 0;
 8000924:	2800      	cmp	r0, #0
 8000926:	d1ec      	bne.n	8000902 <main+0x32>
	  error_hand = W5500OpenTCPServer(0);
 8000928:	f7ff ff70 	bl	800080c <W5500OpenTCPServer>
	  if(error_hand !=0)return 0;
 800092c:	2800      	cmp	r0, #0
 800092e:	d1e8      	bne.n	8000902 <main+0x32>
  ret_code_from_sysTick = SysTick_Config(SystemCoreClock / 1000000);
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <main+0x84>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000932:	4a09      	ldr	r2, [pc, #36]	; (8000958 <main+0x88>)
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000934:	4c09      	ldr	r4, [pc, #36]	; (800095c <main+0x8c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4909      	ldr	r1, [pc, #36]	; (8000960 <main+0x90>)
 800093a:	fbb3 f3f1 	udiv	r3, r3, r1
 800093e:	25f0      	movs	r5, #240	; 0xf0
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000940:	3b01      	subs	r3, #1
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000942:	2107      	movs	r1, #7
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000944:	6053      	str	r3, [r2, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000946:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800094a:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800094c:	6011      	str	r1, [r2, #0]
 800094e:	e7fe      	b.n	800094e <main+0x7e>
 8000950:	08000bac 	.word	0x08000bac
 8000954:	20000000 	.word	0x20000000
 8000958:	e000e010 	.word	0xe000e010
 800095c:	e000ed00 	.word	0xe000ed00
 8000960:	000f4240 	.word	0x000f4240

08000964 <EXTI3_IRQHandler>:

//External interrupt handler on line 3
void EXTI3_IRQHandler(void){
	if((EXTI -> PR & EXTI_PR_PR3) != 0){
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <EXTI3_IRQHandler+0x2c>)
 8000966:	695b      	ldr	r3, [r3, #20]
 8000968:	071b      	lsls	r3, r3, #28
 800096a:	d50f      	bpl.n	800098c <EXTI3_IRQHandler+0x28>
		if((GPIOD -> ODR & GPIO_ODR_ODR_13) != 0){
 800096c:	4b09      	ldr	r3, [pc, #36]	; (8000994 <EXTI3_IRQHandler+0x30>)
 800096e:	695a      	ldr	r2, [r3, #20]
 8000970:	f412 5f00 	tst.w	r2, #8192	; 0x2000

			GPIOD -> ODR	&= ~(GPIO_ODR_ODR_13); 	//LED3 off
 8000974:	695a      	ldr	r2, [r3, #20]
 8000976:	bf14      	ite	ne
 8000978:	f422 5200 	bicne.w	r2, r2, #8192	; 0x2000
		}else{

			GPIOD -> ODR	|= GPIO_ODR_ODR_13; 	//LED3 on
 800097c:	f442 5200 	orreq.w	r2, r2, #8192	; 0x2000
 8000980:	615a      	str	r2, [r3, #20]
		}
		EXTI -> PR |= EXTI_PR_PR3; 	//Clear flag this is necessary
 8000982:	4a03      	ldr	r2, [pc, #12]	; (8000990 <EXTI3_IRQHandler+0x2c>)
 8000984:	6953      	ldr	r3, [r2, #20]
 8000986:	f043 0308 	orr.w	r3, r3, #8
 800098a:	6153      	str	r3, [r2, #20]
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40013c00 	.word	0x40013c00
 8000994:	40020c00 	.word	0x40020c00

08000998 <EXTI0_IRQHandler>:
	}
}

//External interrupt handler on line 0
void EXTI0_IRQHandler(void){
	if((EXTI -> PR & EXTI_PR_PR0) != 0){
 8000998:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <EXTI0_IRQHandler+0x2c>)
 800099a:	695b      	ldr	r3, [r3, #20]
 800099c:	07db      	lsls	r3, r3, #31
 800099e:	d50f      	bpl.n	80009c0 <EXTI0_IRQHandler+0x28>
		if((GPIOD -> ODR & GPIO_ODR_ODR_13) != 0){
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <EXTI0_IRQHandler+0x30>)
 80009a2:	695a      	ldr	r2, [r3, #20]
 80009a4:	f412 5f00 	tst.w	r2, #8192	; 0x2000

			GPIOD -> ODR	&= ~(GPIO_ODR_ODR_13); 	//LED3 off
 80009a8:	695a      	ldr	r2, [r3, #20]
 80009aa:	bf14      	ite	ne
 80009ac:	f422 5200 	bicne.w	r2, r2, #8192	; 0x2000
		}else{

			GPIOD -> ODR	|= GPIO_ODR_ODR_13; 	//LED3 on
 80009b0:	f442 5200 	orreq.w	r2, r2, #8192	; 0x2000
 80009b4:	615a      	str	r2, [r3, #20]
		}
		EXTI -> PR |= EXTI_PR_PR0; 	//Clear flag this is necessary
 80009b6:	4a03      	ldr	r2, [pc, #12]	; (80009c4 <EXTI0_IRQHandler+0x2c>)
 80009b8:	6953      	ldr	r3, [r2, #20]
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	6153      	str	r3, [r2, #20]
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40013c00 	.word	0x40013c00
 80009c8:	40020c00 	.word	0x40020c00

080009cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009d2:	e003      	b.n	80009dc <LoopCopyDataInit>

080009d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009da:	3104      	adds	r1, #4

080009dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009dc:	480b      	ldr	r0, [pc, #44]	; (8000a0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009e4:	d3f6      	bcc.n	80009d4 <CopyDataInit>
  ldr  r2, =_sbss
 80009e6:	4a0b      	ldr	r2, [pc, #44]	; (8000a14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009e8:	e002      	b.n	80009f0 <LoopFillZerobss>

080009ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009ec:	f842 3b04 	str.w	r3, [r2], #4

080009f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009f4:	d3f9      	bcc.n	80009ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009f6:	f000 f82b 	bl	8000a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009fa:	f000 f8a7 	bl	8000b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009fe:	f7ff ff67 	bl	80008d0 <main>
  bx  lr    
 8000a02:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a04:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a08:	08000bc8 	.word	0x08000bc8
  ldr  r0, =_sdata
 8000a0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a10:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000a14:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000a18:	20000024 	.word	0x20000024

08000a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a1c:	e7fe      	b.n	8000a1c <ADC_IRQHandler>
	...

08000a20 <NMI_Handler>:
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000a24:	e7fe      	b.n	8000a24 <HardFault_Handler>
 8000a26:	bf00      	nop

08000a28 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000a28:	e7fe      	b.n	8000a28 <MemManage_Handler>
 8000a2a:	bf00      	nop

08000a2c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000a2c:	e7fe      	b.n	8000a2c <BusFault_Handler>
 8000a2e:	bf00      	nop

08000a30 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000a30:	e7fe      	b.n	8000a30 <UsageFault_Handler>
 8000a32:	bf00      	nop

08000a34 <SVC_Handler>:
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <DebugMon_Handler>:
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <SysTick_Handler>:
  * @retval None
  */
void SysTick_Handler(void)
{
//*  TimingDelay_Decrement(); */
	delay_cnt--;
 8000a40:	4a02      	ldr	r2, [pc, #8]	; (8000a4c <SysTick_Handler+0xc>)
 8000a42:	6813      	ldr	r3, [r2, #0]
 8000a44:	3b01      	subs	r3, #1
 8000a46:	6013      	str	r3, [r2, #0]
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000020 	.word	0x20000020

08000a50 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a50:	4938      	ldr	r1, [pc, #224]	; (8000b34 <SystemInit+0xe4>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a52:	4b39      	ldr	r3, [pc, #228]	; (8000b38 <SystemInit+0xe8>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a54:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a58:	4838      	ldr	r0, [pc, #224]	; (8000b3c <SystemInit+0xec>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a5a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000a5e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8000a62:	681a      	ldr	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000a64:	2100      	movs	r1, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000a66:	f042 0201 	orr.w	r2, r2, #1
 8000a6a:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000a6c:	6099      	str	r1, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000a74:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a78:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8000a7a:	6058      	str	r0, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a7c:	681a      	ldr	r2, [r3, #0]
{
 8000a7e:	b082      	sub	sp, #8
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a84:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a86:	60d9      	str	r1, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000a88:	9100      	str	r1, [sp, #0]
 8000a8a:	9101      	str	r1, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000a92:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000a94:	461a      	mov	r2, r3
 8000a96:	e003      	b.n	8000aa0 <SystemInit+0x50>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000a98:	9b00      	ldr	r3, [sp, #0]
 8000a9a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000a9e:	d009      	beq.n	8000ab4 <SystemInit+0x64>
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000aa0:	6813      	ldr	r3, [r2, #0]
 8000aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa6:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 8000aa8:	9b00      	ldr	r3, [sp, #0]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000aae:	9b01      	ldr	r3, [sp, #4]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d0f1      	beq.n	8000a98 <SystemInit+0x48>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000ab4:	4b20      	ldr	r3, [pc, #128]	; (8000b38 <SystemInit+0xe8>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8000abc:	bf18      	it	ne
 8000abe:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000ac0:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000ac2:	9b01      	ldr	r3, [sp, #4]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d005      	beq.n	8000ad4 <SystemInit+0x84>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <SystemInit+0xe4>)
 8000aca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ace:	609a      	str	r2, [r3, #8]
}
 8000ad0:	b002      	add	sp, #8
 8000ad2:	4770      	bx	lr
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000ad4:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <SystemInit+0xe8>)
    PWR->CR |= PWR_CR_VOS;
 8000ad6:	491a      	ldr	r1, [pc, #104]	; (8000b40 <SystemInit+0xf0>)
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000ada:	481a      	ldr	r0, [pc, #104]	; (8000b44 <SystemInit+0xf4>)
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000adc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ae0:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000ae2:	680a      	ldr	r2, [r1, #0]
 8000ae4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000ae8:	600a      	str	r2, [r1, #0]
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000aea:	689a      	ldr	r2, [r3, #8]
 8000aec:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000aee:	689a      	ldr	r2, [r3, #8]
 8000af0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000af4:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000af6:	689a      	ldr	r2, [r3, #8]
 8000af8:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000afc:	609a      	str	r2, [r3, #8]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000afe:	6058      	str	r0, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000b06:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	0192      	lsls	r2, r2, #6
 8000b0c:	d5fc      	bpl.n	8000b08 <SystemInit+0xb8>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000b0e:	490e      	ldr	r1, [pc, #56]	; (8000b48 <SystemInit+0xf8>)
    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    RCC->CFGR |= RCC_CFGR_SW_PLL;

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000b10:	4a09      	ldr	r2, [pc, #36]	; (8000b38 <SystemInit+0xe8>)
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000b12:	f240 7005 	movw	r0, #1797	; 0x705
 8000b16:	6008      	str	r0, [r1, #0]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000b18:	6899      	ldr	r1, [r3, #8]
 8000b1a:	f021 0103 	bic.w	r1, r1, #3
 8000b1e:	6099      	str	r1, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000b20:	6899      	ldr	r1, [r3, #8]
 8000b22:	f041 0102 	orr.w	r1, r1, #2
 8000b26:	6099      	str	r1, [r3, #8]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000b28:	6893      	ldr	r3, [r2, #8]
 8000b2a:	f003 030c 	and.w	r3, r3, #12
 8000b2e:	2b08      	cmp	r3, #8
 8000b30:	d1fa      	bne.n	8000b28 <SystemInit+0xd8>
 8000b32:	e7c9      	b.n	8000ac8 <SystemInit+0x78>
 8000b34:	e000ed00 	.word	0xe000ed00
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	24003010 	.word	0x24003010
 8000b40:	40007000 	.word	0x40007000
 8000b44:	07405408 	.word	0x07405408
 8000b48:	40023c00 	.word	0x40023c00

08000b4c <__libc_init_array>:
 8000b4c:	b570      	push	{r4, r5, r6, lr}
 8000b4e:	4e0d      	ldr	r6, [pc, #52]	; (8000b84 <__libc_init_array+0x38>)
 8000b50:	4c0d      	ldr	r4, [pc, #52]	; (8000b88 <__libc_init_array+0x3c>)
 8000b52:	1ba4      	subs	r4, r4, r6
 8000b54:	10a4      	asrs	r4, r4, #2
 8000b56:	2500      	movs	r5, #0
 8000b58:	42a5      	cmp	r5, r4
 8000b5a:	d109      	bne.n	8000b70 <__libc_init_array+0x24>
 8000b5c:	4e0b      	ldr	r6, [pc, #44]	; (8000b8c <__libc_init_array+0x40>)
 8000b5e:	4c0c      	ldr	r4, [pc, #48]	; (8000b90 <__libc_init_array+0x44>)
 8000b60:	f000 f818 	bl	8000b94 <_init>
 8000b64:	1ba4      	subs	r4, r4, r6
 8000b66:	10a4      	asrs	r4, r4, #2
 8000b68:	2500      	movs	r5, #0
 8000b6a:	42a5      	cmp	r5, r4
 8000b6c:	d105      	bne.n	8000b7a <__libc_init_array+0x2e>
 8000b6e:	bd70      	pop	{r4, r5, r6, pc}
 8000b70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b74:	4798      	blx	r3
 8000b76:	3501      	adds	r5, #1
 8000b78:	e7ee      	b.n	8000b58 <__libc_init_array+0xc>
 8000b7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b7e:	4798      	blx	r3
 8000b80:	3501      	adds	r5, #1
 8000b82:	e7f2      	b.n	8000b6a <__libc_init_array+0x1e>
 8000b84:	08000bc0 	.word	0x08000bc0
 8000b88:	08000bc0 	.word	0x08000bc0
 8000b8c:	08000bc0 	.word	0x08000bc0
 8000b90:	08000bc4 	.word	0x08000bc4

08000b94 <_init>:
 8000b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b96:	bf00      	nop
 8000b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b9a:	bc08      	pop	{r3}
 8000b9c:	469e      	mov	lr, r3
 8000b9e:	4770      	bx	lr

08000ba0 <_fini>:
 8000ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba2:	bf00      	nop
 8000ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ba6:	bc08      	pop	{r3}
 8000ba8:	469e      	mov	lr, r3
 8000baa:	4770      	bx	lr
