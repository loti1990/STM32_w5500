
Test_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d3c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ec4  08000ec4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000ec4  08000ec4  00010ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000ec8  08000ec8  00010ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  08000ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
  7 .bss          00000024  20000018  20000018  00020018  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000003c  2000003c  00020018  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_info   00003576  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000b71  00000000  00000000  000235be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000001d8  00000000  00000000  00024130  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000218  00000000  00000000  00024308  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000011db  00000000  00000000  00024520  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000f0f  00000000  00000000  000256fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002660a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000003a8  00000000  00000000  00026688  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000074f  00000000  00000000  00026a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000003f  00000000  00000000  0002717f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000eac 	.word	0x08000eac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08000eac 	.word	0x08000eac

080001c8 <ADC1TempInit>:
#include "ADC.h"

//Initialize ADC1 for temperature measurement
void ADC1TempInit(){

	RCC		-> APB2ENR 	|= RCC_APB2ENR_ADC1EN;	//ADC1 clock enable default APB2 clock was 84 MHz
 80001c8:	4813      	ldr	r0, [pc, #76]	; (8000218 <ADC1TempInit+0x50>)

	ADC1 	-> CR2 		&= ~(ADC_CR2_ADON);		//Turn off ADC1
 80001ca:	4b14      	ldr	r3, [pc, #80]	; (800021c <ADC1TempInit+0x54>)
	RCC		-> APB2ENR 	|= RCC_APB2ENR_ADC1EN;	//ADC1 clock enable default APB2 clock was 84 MHz
 80001cc:	6c41      	ldr	r1, [r0, #68]	; 0x44

	ADC 	-> CCR 		|= ADC_CCR_TSVREFE;		//Enable temperature sensor
 80001ce:	4a14      	ldr	r2, [pc, #80]	; (8000220 <ADC1TempInit+0x58>)
	RCC		-> APB2ENR 	|= RCC_APB2ENR_ADC1EN;	//ADC1 clock enable default APB2 clock was 84 MHz
 80001d0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80001d4:	6441      	str	r1, [r0, #68]	; 0x44
	ADC1 	-> CR2 		&= ~(ADC_CR2_ADON);		//Turn off ADC1
 80001d6:	6899      	ldr	r1, [r3, #8]
 80001d8:	f021 0101 	bic.w	r1, r1, #1
 80001dc:	6099      	str	r1, [r3, #8]
	ADC 	-> CCR 		|= ADC_CCR_TSVREFE;		//Enable temperature sensor
 80001de:	6851      	ldr	r1, [r2, #4]
 80001e0:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001e4:	6051      	str	r1, [r2, #4]

	ADC 	-> CCR 		|= ADC_CCR_ADCPRE_0; 	//For all ADC clock was set to APB2/4(prescaler) = 84 MHz /4 = 21 MHz (1 cycle was 48 ns)
 80001e6:	6851      	ldr	r1, [r2, #4]
 80001e8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80001ec:	6051      	str	r1, [r2, #4]

	ADC1 	-> SQR1		&= ~(ADC_SQR1_L_0 | ADC_SQR1_L_1 | ADC_SQR1_L_2 | ADC_SQR1_L_3); 	// One conversion
 80001ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80001f0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80001f4:	62da      	str	r2, [r3, #44]	; 0x2c

	ADC1	-> SQR3 	|= ADC_SQR3_SQ1_4; 		//Select Channel 16 (temp sensor) to be converted in first and only sequance
 80001f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80001f8:	f042 0210 	orr.w	r2, r2, #16
 80001fc:	635a      	str	r2, [r3, #52]	; 0x34

	ADC1 	-> SMPR1 	|= (ADC_SMPR1_SMP16_0 | ADC_SMPR1_SMP16_1 | ADC_SMPR1_SMP16_2); 	//For temperature measurement the sampling time must be > 10 us so 480 cycle * 48 ns = 2,3 ms
 80001fe:	68da      	ldr	r2, [r3, #12]
 8000200:	f442 12e0 	orr.w	r2, r2, #1835008	; 0x1c0000
 8000204:	60da      	str	r2, [r3, #12]

	ADC1 	-> CR1 		&= ~(ADC_CR1_RES_0 | ADC_CR1_RES_1);	//Setup 12 bit resolution (take 15 ADC clock cycle
 8000206:	685a      	ldr	r2, [r3, #4]
 8000208:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800020c:	605a      	str	r2, [r3, #4]

	ADC1 	-> CR2 		|=(ADC_CR2_CONT); 		//Continious convertion mode
 800020e:	689a      	ldr	r2, [r3, #8]
 8000210:	f042 0202 	orr.w	r2, r2, #2
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	4770      	bx	lr
 8000218:	40023800 	.word	0x40023800
 800021c:	40012000 	.word	0x40012000
 8000220:	40012300 	.word	0x40012300

08000224 <DMA2ADC1Init>:
#include "DMA.h"

/*
 * DMA initialization function for ADC1 peripheral
 * */
void DMA2ADC1Init(uint16_t data_num, uint32_t *peripheral_address, uint32_t *memory_address){
 8000224:	b430      	push	{r4, r5}

	//Enable DMA2 AHB1 clock source
	RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8000226:	4d27      	ldr	r5, [pc, #156]	; (80002c4 <DMA2ADC1Init+0xa0>)

	//DMA2_Stream0 CR configurations

	DMA2_Stream0 -> CR		&= ~(DMA_SxCR_EN); 												//Disable DMA
 8000228:	4b27      	ldr	r3, [pc, #156]	; (80002c8 <DMA2ADC1Init+0xa4>)
	RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 800022a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800022c:	f444 0480 	orr.w	r4, r4, #4194304	; 0x400000
 8000230:	632c      	str	r4, [r5, #48]	; 0x30
	DMA2_Stream0 -> CR		&= ~(DMA_SxCR_EN); 												//Disable DMA
 8000232:	681c      	ldr	r4, [r3, #0]
 8000234:	f024 0401 	bic.w	r4, r4, #1
 8000238:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		&= ~(DMA_SxCR_CHSEL_0 | DMA_SxCR_CHSEL_1 | DMA_SxCR_CHSEL_2); 	//Stream 0 Chennel 0 select for ADC1 DMA
 800023a:	681c      	ldr	r4, [r3, #0]
 800023c:	f024 6460 	bic.w	r4, r4, #234881024	; 0xe000000
 8000240:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		&= ~(DMA_SxCR_MBURST_0 | DMA_SxCR_MBURST_1); 					//Memory burst transfer configuration -> single transfer
 8000242:	681c      	ldr	r4, [r3, #0]
 8000244:	f024 74c0 	bic.w	r4, r4, #25165824	; 0x1800000
 8000248:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		&= ~(DMA_SxCR_PBURST_0 | DMA_SxCR_PBURST_1); 					//Peripheral burst transfer configuration -> single transfer
 800024a:	681c      	ldr	r4, [r3, #0]
 800024c:	f424 04c0 	bic.w	r4, r4, #6291456	; 0x600000
 8000250:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		&= ~(DMA_SxCR_CT); 												//Current target -> the current target memory is Memory 0 (addressed by the DMA_SxM0AR pointer)
 8000252:	681c      	ldr	r4, [r3, #0]
 8000254:	f424 2400 	bic.w	r4, r4, #524288	; 0x80000
 8000258:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		&= ~(DMA_SxCR_DBM); 											//Double buffer mode -> no buffer switching at the end of transfer
 800025a:	681c      	ldr	r4, [r3, #0]
 800025c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8000260:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		|= (DMA_SxCR_PL_0 | DMA_SxCR_PL_1); 							//Priority level -> very high
 8000262:	681c      	ldr	r4, [r3, #0]
 8000264:	f444 3440 	orr.w	r4, r4, #196608	; 0x30000
 8000268:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		&= ~(DMA_SxCR_PINCOS);											//Peripheral increment offset size -> the offset size for the peripheral address calculation is linked to the PSIZE
 800026a:	681c      	ldr	r4, [r3, #0]
 800026c:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
 8000270:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		|= (DMA_SxCR_MSIZE_0); 											//Memory data size -> half-word (16 - bit)
 8000272:	681c      	ldr	r4, [r3, #0]
 8000274:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8000278:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		|= (DMA_SxCR_PSIZE_0);											//Peripheral data size -> half-word (16 - bit)
 800027a:	681c      	ldr	r4, [r3, #0]
 800027c:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8000280:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		|= (DMA_SxCR_MINC);												//Memory increment mode -> memory address pointer is incremented after each data transfer (increment is done according to MSIZE)
 8000282:	681c      	ldr	r4, [r3, #0]
 8000284:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8000288:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		&= ~(DMA_SxCR_PINC); 											//Peripheral increment mode -> peripheral address pointer is fixed
 800028a:	681c      	ldr	r4, [r3, #0]
 800028c:	f424 7400 	bic.w	r4, r4, #512	; 0x200
 8000290:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		|= (DMA_SxCR_CIRC); 											//Circular mode -> enabled
 8000292:	681c      	ldr	r4, [r3, #0]
 8000294:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8000298:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		&= ~(DMA_SxCR_DIR_0 | DMA_SxCR_DIR_1); 							//Data transfer direction -> peripheral-to-memory
 800029a:	681c      	ldr	r4, [r3, #0]
 800029c:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 80002a0:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		&= ~(DMA_SxCR_PFCTRL); 											//Peripheral flow controller -> the DMA is the flow controller
 80002a2:	681c      	ldr	r4, [r3, #0]
 80002a4:	f024 0420 	bic.w	r4, r4, #32
 80002a8:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		|= (DMA_SxCR_TCIE); 											//Transfer complete interrupt -> enable
 80002aa:	681c      	ldr	r4, [r3, #0]
 80002ac:	f044 0410 	orr.w	r4, r4, #16
 80002b0:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		&= ~(DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE); 			//Half transfer interrupt -> disable; Transfer error interrupt -> disable; Direct mode error interrupt -> disable
 80002b2:	681c      	ldr	r4, [r3, #0]
 80002b4:	f024 040e 	bic.w	r4, r4, #14
 80002b8:	601c      	str	r4, [r3, #0]

	//Data length to be transfered
	DMA2_Stream0 -> NDTR 	= data_num;							//Number of data items to transfer
 80002ba:	6058      	str	r0, [r3, #4]
	DMA2_Stream0 -> PAR 	= (uint32_t) peripheral_address;		//Peripheral address

	//DMA stream 0 memory 0 address register
	DMA2_Stream0 -> M0AR	= (uint32_t) memory_address;			//Memory address

}
 80002bc:	bc30      	pop	{r4, r5}
	DMA2_Stream0 -> PAR 	= (uint32_t) peripheral_address;		//Peripheral address
 80002be:	6099      	str	r1, [r3, #8]
	DMA2_Stream0 -> M0AR	= (uint32_t) memory_address;			//Memory address
 80002c0:	60da      	str	r2, [r3, #12]
}
 80002c2:	4770      	bx	lr
 80002c4:	40023800 	.word	0x40023800
 80002c8:	40026410 	.word	0x40026410

080002cc <DMA2Stream0InterruptEnable>:
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80002cc:	4b03      	ldr	r3, [pc, #12]	; (80002dc <DMA2Stream0InterruptEnable+0x10>)
 80002ce:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80002d2:	2210      	movs	r2, #16
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80002d4:	6059      	str	r1, [r3, #4]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80002d6:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
 80002da:	4770      	bx	lr
 80002dc:	e000e100 	.word	0xe000e100

080002e0 <InitGPIO>:
	/*************************************************
	////////////ENABLE CLK FOR PERIPHERALS////////////
	*************************************************/

	//Enable GPIOA AHB1 clock source
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002e0:	4992      	ldr	r1, [pc, #584]	; (800052c <InitGPIO+0x24c>)
				*************************************************/

	//////////////////////////////////////////////////////////
	//GPIOA PA3 configure for interrupt generated from W5500//
	//////////////////////////////////////////////////////////
	GPIOA -> MODER 		&= ~(GPIO_MODER_MODER3); 		//PA3 pin as input
 80002e2:	4b93      	ldr	r3, [pc, #588]	; (8000530 <InitGPIO+0x250>)
	GPIOA -> PUPDR 		|= GPIO_PUPDR_PUPDR8_0; 		//PA8 pull-up

	//////////////////////////////////////
	//GPIOD PD13/LED3 on discovery board//
	//////////////////////////////////////
	GPIOD -> MODER 		|= GPIO_MODER_MODER13_0;		//PD13 pin as output
 80002e4:	4893      	ldr	r0, [pc, #588]	; (8000534 <InitGPIO+0x254>)

	//////////
	//SPI3_CLK
	//////////
	//pin PB3 CLK configuration
	GPIOB -> MODER  	|= GPIO_MODER_MODER3_1; 	//PB3 pin as alternate function
 80002e6:	4a94      	ldr	r2, [pc, #592]	; (8000538 <InitGPIO+0x258>)
void InitGPIO(void){
 80002e8:	b4f0      	push	{r4, r5, r6, r7}
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002ea:	6b0f      	ldr	r7, [r1, #48]	; 0x30
	NVIC -> ISER[0] 	|= (1 << EXTI3_IRQn); 			//Enable external interrupt
 80002ec:	4d93      	ldr	r5, [pc, #588]	; (800053c <InitGPIO+0x25c>)
	SYSCFG -> EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PA;		//PA3 as external interrupt setting up in EXTICR1
 80002ee:	4e94      	ldr	r6, [pc, #592]	; (8000540 <InitGPIO+0x260>)
	EXTI -> FTSR 		|= EXTI_FTSR_TR3;				//interrupt generated at falling edge
 80002f0:	4c94      	ldr	r4, [pc, #592]	; (8000544 <InitGPIO+0x264>)
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002f2:	f047 0701 	orr.w	r7, r7, #1
 80002f6:	630f      	str	r7, [r1, #48]	; 0x30
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80002f8:	6b0f      	ldr	r7, [r1, #48]	; 0x30
 80002fa:	f047 0702 	orr.w	r7, r7, #2
 80002fe:	630f      	str	r7, [r1, #48]	; 0x30
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000300:	6b0f      	ldr	r7, [r1, #48]	; 0x30
 8000302:	f047 0708 	orr.w	r7, r7, #8
 8000306:	630f      	str	r7, [r1, #48]	; 0x30
	RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 8000308:	6c0f      	ldr	r7, [r1, #64]	; 0x40
 800030a:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 800030e:	640f      	str	r7, [r1, #64]	; 0x40
	RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000310:	6c4f      	ldr	r7, [r1, #68]	; 0x44
 8000312:	f447 5780 	orr.w	r7, r7, #4096	; 0x1000
 8000316:	644f      	str	r7, [r1, #68]	; 0x44
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000318:	6c4f      	ldr	r7, [r1, #68]	; 0x44
 800031a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800031e:	644f      	str	r7, [r1, #68]	; 0x44
	GPIOA -> MODER 		&= ~(GPIO_MODER_MODER3); 		//PA3 pin as input
 8000320:	6819      	ldr	r1, [r3, #0]
 8000322:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000326:	6019      	str	r1, [r3, #0]
	GPIOA -> PUPDR 		|= GPIO_PUPDR_PUPDR3_0; 		//PA3 pull-up
 8000328:	68d9      	ldr	r1, [r3, #12]
 800032a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800032e:	60d9      	str	r1, [r3, #12]
	NVIC -> ISER[0] 	|= (1 << EXTI3_IRQn); 			//Enable external interrupt
 8000330:	6829      	ldr	r1, [r5, #0]
	NVIC -> IP[EXTI3_IRQn] 		= (uint8_t) 0x02;		//set priority of EXTI3_IRQn to 2 (lower are the number the higher are priority)
 8000332:	2702      	movs	r7, #2
	NVIC -> ISER[0] 	|= (1 << EXTI3_IRQn); 			//Enable external interrupt
 8000334:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8000338:	6029      	str	r1, [r5, #0]
	NVIC -> IP[EXTI3_IRQn] 		= (uint8_t) 0x02;		//set priority of EXTI3_IRQn to 2 (lower are the number the higher are priority)
 800033a:	f885 7309 	strb.w	r7, [r5, #777]	; 0x309
	SYSCFG -> EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PA;		//PA3 as external interrupt setting up in EXTICR1
 800033e:	68b1      	ldr	r1, [r6, #8]
 8000340:	60b1      	str	r1, [r6, #8]
	EXTI -> FTSR 		|= EXTI_FTSR_TR3;				//interrupt generated at falling edge
 8000342:	68e1      	ldr	r1, [r4, #12]
 8000344:	f041 0108 	orr.w	r1, r1, #8
 8000348:	60e1      	str	r1, [r4, #12]
	EXTI -> IMR			|= EXTI_IMR_MR3; 				//Enable external interrupt at pin 3
 800034a:	6821      	ldr	r1, [r4, #0]
 800034c:	f041 0108 	orr.w	r1, r1, #8
 8000350:	6021      	str	r1, [r4, #0]
	GPIOA -> MODER 		&= ~(GPIO_MODER_MODER0); 		//PA0 pin as input
 8000352:	6819      	ldr	r1, [r3, #0]
 8000354:	f021 0103 	bic.w	r1, r1, #3
 8000358:	6019      	str	r1, [r3, #0]
	GPIOA -> PUPDR 		&= ~(GPIO_PUPDR_PUPDR0); 		//PA0 no pull-up, pull-down
 800035a:	68d9      	ldr	r1, [r3, #12]
 800035c:	f021 0103 	bic.w	r1, r1, #3
 8000360:	60d9      	str	r1, [r3, #12]
	NVIC -> ISER[0] 	|= (1 << EXTI0_IRQn); 			//Enable external interrupt
 8000362:	6829      	ldr	r1, [r5, #0]
	NVIC -> IP[EXTI0_IRQn] 		= (uint8_t) 0x01;		//set priority of EXTI3_IRQn to 1 (lower are the number the higher are priority)
 8000364:	2701      	movs	r7, #1
	NVIC -> ISER[0] 	|= (1 << EXTI0_IRQn); 			//Enable external interrupt
 8000366:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800036a:	6029      	str	r1, [r5, #0]
	NVIC -> IP[EXTI0_IRQn] 		= (uint8_t) 0x01;		//set priority of EXTI3_IRQn to 1 (lower are the number the higher are priority)
 800036c:	f885 7306 	strb.w	r7, [r5, #774]	; 0x306
	SYSCFG -> EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;		//PA0 as external interrupt setting up in EXTICR1
 8000370:	68b1      	ldr	r1, [r6, #8]
 8000372:	60b1      	str	r1, [r6, #8]
	EXTI -> RTSR 		|= EXTI_RTSR_TR0;				//interrupt generated at rising edge
 8000374:	68a1      	ldr	r1, [r4, #8]
 8000376:	4339      	orrs	r1, r7
 8000378:	60a1      	str	r1, [r4, #8]
	EXTI -> IMR			|= EXTI_IMR_MR0; 				//Enable external interrupt at pin 0
 800037a:	6821      	ldr	r1, [r4, #0]
 800037c:	4339      	orrs	r1, r7
 800037e:	6021      	str	r1, [r4, #0]
	GPIOA -> MODER 		|= GPIO_MODER_MODER8_0; 		//PA8 pin as output
 8000380:	6819      	ldr	r1, [r3, #0]
 8000382:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8000386:	6019      	str	r1, [r3, #0]
	GPIOA -> OTYPER 	&= ~(GPIO_OTYPER_OT_8);			//PA8 output type push-pull
 8000388:	6859      	ldr	r1, [r3, #4]
 800038a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800038e:	6059      	str	r1, [r3, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR8; 		//PA8 output speed register (very high speed)
 8000390:	6899      	ldr	r1, [r3, #8]
 8000392:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
 8000396:	6099      	str	r1, [r3, #8]
	GPIOA -> PUPDR 		|= GPIO_PUPDR_PUPDR8_0; 		//PA8 pull-up
 8000398:	68d9      	ldr	r1, [r3, #12]
 800039a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800039e:	60d9      	str	r1, [r3, #12]
	GPIOD -> MODER 		|= GPIO_MODER_MODER13_0;		//PD13 pin as output
 80003a0:	6801      	ldr	r1, [r0, #0]
 80003a2:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 80003a6:	6001      	str	r1, [r0, #0]
	GPIOD -> OTYPER 	&= ~(GPIO_OTYPER_OT_13);		//PD13 output type push-pull
 80003a8:	6841      	ldr	r1, [r0, #4]
 80003aa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80003ae:	6041      	str	r1, [r0, #4]
	GPIOD -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR13_0; 	//PD13 output speed register (medium speed)
 80003b0:	6881      	ldr	r1, [r0, #8]
 80003b2:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 80003b6:	6081      	str	r1, [r0, #8]
	GPIOD -> PUPDR 		&= ~(GPIO_PUPDR_PUPDR13); 		//PD13 pull-up
 80003b8:	68c1      	ldr	r1, [r0, #12]
 80003ba:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 80003be:	60c1      	str	r1, [r0, #12]
	GPIOA -> MODER 		|=  GPIO_MODER_MODER2_0; 		//PA2 pin as output
 80003c0:	6819      	ldr	r1, [r3, #0]
 80003c2:	f041 0110 	orr.w	r1, r1, #16
 80003c6:	6019      	str	r1, [r3, #0]
	GPIOA -> OTYPER 	&= ~(GPIO_OTYPER_OT_2);			//PA2 output type push-pull
 80003c8:	6859      	ldr	r1, [r3, #4]
 80003ca:	f021 0104 	bic.w	r1, r1, #4
 80003ce:	6059      	str	r1, [r3, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR2_0; 	//PA2 output speed register (medium speed)
 80003d0:	6899      	ldr	r1, [r3, #8]
 80003d2:	f041 0110 	orr.w	r1, r1, #16
 80003d6:	6099      	str	r1, [r3, #8]
	GPIOA -> PUPDR 		&= ~(GPIO_PUPDR_PUPDR2); 		//PA2 pull-up
 80003d8:	68d9      	ldr	r1, [r3, #12]
 80003da:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 80003de:	60d9      	str	r1, [r3, #12]
	GPIOA -> ODR 		|= GPIO_ODR_ODR_2; 				//Enable W5500 module
 80003e0:	6959      	ldr	r1, [r3, #20]
 80003e2:	f041 0104 	orr.w	r1, r1, #4
 80003e6:	6159      	str	r1, [r3, #20]
	GPIOA -> MODER		|= GPIO_MODER_MODER4_0;		//PA4 pin output mode
 80003e8:	6819      	ldr	r1, [r3, #0]
 80003ea:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80003ee:	6019      	str	r1, [r3, #0]
	GPIOA -> OTYPER 	&= ~(GPIO_OTYPER_OT_4); 	//PA4 output push-pull
 80003f0:	6859      	ldr	r1, [r3, #4]
 80003f2:	f021 0110 	bic.w	r1, r1, #16
 80003f6:	6059      	str	r1, [r3, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR4; 	//PA4 output speed register (very high speed)
 80003f8:	6899      	ldr	r1, [r3, #8]
 80003fa:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 80003fe:	6099      	str	r1, [r3, #8]
	GPIOA -> PUPDR		|= GPIO_PUPDR_PUPDR4_0; 	//PA4 pull-up
 8000400:	68d9      	ldr	r1, [r3, #12]
 8000402:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000406:	60d9      	str	r1, [r3, #12]
	GPIOA -> ODR 		|= GPIO_ODR_ODR_4;			//PA4 set in a high output logical level
 8000408:	6959      	ldr	r1, [r3, #20]
 800040a:	f041 0110 	orr.w	r1, r1, #16
 800040e:	6159      	str	r1, [r3, #20]
	GPIOA -> MODER  	|= GPIO_MODER_MODER5_1; 	//PA5 pin as alternate function
 8000410:	6819      	ldr	r1, [r3, #0]
 8000412:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8000416:	6019      	str	r1, [r3, #0]
	GPIOA -> OTYPER     &= ~(GPIO_OTYPER_OT_5); 	//PA5 output type push-pull
 8000418:	6859      	ldr	r1, [r3, #4]
 800041a:	f021 0120 	bic.w	r1, r1, #32
 800041e:	6059      	str	r1, [r3, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR5;  //PA5 output speed register (very high speed)
 8000420:	6899      	ldr	r1, [r3, #8]
 8000422:	f441 6140 	orr.w	r1, r1, #3072	; 0xc00
 8000426:	6099      	str	r1, [r3, #8]
	GPIOA -> PUPDR		|= GPIO_PUPDR_PUPDR5_0; 	//PA5 pull-up
 8000428:	68d9      	ldr	r1, [r3, #12]
 800042a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800042e:	60d9      	str	r1, [r3, #12]
	GPIOA -> AFR[0] 	|= (0x05 << 20); 			//PA5 alternate function SPI1_CLK
 8000430:	6a19      	ldr	r1, [r3, #32]
 8000432:	f441 01a0 	orr.w	r1, r1, #5242880	; 0x500000
 8000436:	6219      	str	r1, [r3, #32]
	GPIOA -> MODER  	|= GPIO_MODER_MODER6_1; 	//PA6 pin as alternate function
 8000438:	6819      	ldr	r1, [r3, #0]
 800043a:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800043e:	6019      	str	r1, [r3, #0]
	GPIOA -> OTYPER     &= ~(GPIO_OTYPER_OT_6); 	//PA6 output type push-pull
 8000440:	6859      	ldr	r1, [r3, #4]
 8000442:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8000446:	6059      	str	r1, [r3, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR6;  //PA6 output speed register (very high speed)
 8000448:	6899      	ldr	r1, [r3, #8]
 800044a:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
 800044e:	6099      	str	r1, [r3, #8]
	GPIOA -> PUPDR		|= GPIO_PUPDR_PUPDR6_0; 	//PA6 pull-up
 8000450:	68d9      	ldr	r1, [r3, #12]
 8000452:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8000456:	60d9      	str	r1, [r3, #12]
	GPIOA -> AFR[0] 	|= (0x05 << 24); 			//PA6 alternate function SPI1_MISO
 8000458:	6a19      	ldr	r1, [r3, #32]
 800045a:	f041 61a0 	orr.w	r1, r1, #83886080	; 0x5000000
 800045e:	6219      	str	r1, [r3, #32]
	GPIOA -> MODER  	|= GPIO_MODER_MODER7_1; 	//PA7 pin as alternate function
 8000460:	6819      	ldr	r1, [r3, #0]
 8000462:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8000466:	6019      	str	r1, [r3, #0]
	GPIOA -> OTYPER     &= ~(GPIO_OTYPER_OT_7); 	//PA7 output type push-pull
 8000468:	6859      	ldr	r1, [r3, #4]
 800046a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800046e:	6059      	str	r1, [r3, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR7;  //PA7 output speed register (very high speed)
 8000470:	6899      	ldr	r1, [r3, #8]
 8000472:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8000476:	6099      	str	r1, [r3, #8]
	GPIOA -> PUPDR		|= GPIO_PUPDR_PUPDR7_0; 	//PA7 pull-up
 8000478:	68d9      	ldr	r1, [r3, #12]
 800047a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800047e:	60d9      	str	r1, [r3, #12]
	GPIOA -> AFR[0] 	|= (0x05 << 28); 			//PA7 alternate function SPI1_MOSI
 8000480:	6a19      	ldr	r1, [r3, #32]
 8000482:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
 8000486:	6219      	str	r1, [r3, #32]
	GPIOA -> MODER  	|= GPIO_MODER_MODER15_1; 	//PA15 pin as alternate function
 8000488:	6819      	ldr	r1, [r3, #0]
 800048a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800048e:	6019      	str	r1, [r3, #0]
	GPIOA -> OTYPER     &= ~(GPIO_OTYPER_OT_15); 	//PA15 output type push-pull
 8000490:	6859      	ldr	r1, [r3, #4]
 8000492:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8000496:	6059      	str	r1, [r3, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR15; //PA15 output speed register (very high speed)
 8000498:	6899      	ldr	r1, [r3, #8]
 800049a:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
 800049e:	6099      	str	r1, [r3, #8]
	GPIOA -> PUPDR		|= GPIO_PUPDR_PUPDR15_0; 	//PA15 pull-up
 80004a0:	68d9      	ldr	r1, [r3, #12]
 80004a2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80004a6:	60d9      	str	r1, [r3, #12]
	GPIOA -> AFR[1] 	|= (0x06 << 28); 			//PA15 alternate function SPI3_NSS
 80004a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80004aa:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
 80004ae:	6259      	str	r1, [r3, #36]	; 0x24
	GPIOB -> MODER  	|= GPIO_MODER_MODER3_1; 	//PB3 pin as alternate function
 80004b0:	6813      	ldr	r3, [r2, #0]
 80004b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004b6:	6013      	str	r3, [r2, #0]
	GPIOB -> OTYPER     &= ~(GPIO_OTYPER_OT_3); 	//PB3 output type push-pull
 80004b8:	6853      	ldr	r3, [r2, #4]
 80004ba:	f023 0308 	bic.w	r3, r3, #8
 80004be:	6053      	str	r3, [r2, #4]
	GPIOB -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR3;  //PB3 output speed register (very high speed)
 80004c0:	6893      	ldr	r3, [r2, #8]
 80004c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80004c6:	6093      	str	r3, [r2, #8]
	GPIOB -> PUPDR		|= GPIO_PUPDR_PUPDR3_0; 	//PB3 pull-up
 80004c8:	68d3      	ldr	r3, [r2, #12]
 80004ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004ce:	60d3      	str	r3, [r2, #12]
	GPIOB -> AFR[0] 	|= (0x06 << 12); 			//PB3 alternate function SPI3_CLK
 80004d0:	6a13      	ldr	r3, [r2, #32]
 80004d2:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80004d6:	6213      	str	r3, [r2, #32]

	///////////
	//SPI3_MISO
	///////////
	//pin PB4 MISO configuration
	GPIOB -> MODER  	|= GPIO_MODER_MODER4_1; 	//PB4 pin as alternate function
 80004d8:	6813      	ldr	r3, [r2, #0]
 80004da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004de:	6013      	str	r3, [r2, #0]
	GPIOB -> OTYPER     &= ~(GPIO_OTYPER_OT_4); 	//PB4 output type push-pull
 80004e0:	6853      	ldr	r3, [r2, #4]
 80004e2:	f023 0310 	bic.w	r3, r3, #16
 80004e6:	6053      	str	r3, [r2, #4]
	GPIOB -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR4;  //PB4 output speed register (very high speed)
 80004e8:	6893      	ldr	r3, [r2, #8]
 80004ea:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80004ee:	6093      	str	r3, [r2, #8]
	GPIOB -> PUPDR		|= GPIO_PUPDR_PUPDR4_0; 	//PB4 pull-up
 80004f0:	68d3      	ldr	r3, [r2, #12]
 80004f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004f6:	60d3      	str	r3, [r2, #12]
	GPIOB -> AFR[0] 	|= (0x06 << 16); 			//PB4 alternate function SPI3_MISO
 80004f8:	6a13      	ldr	r3, [r2, #32]
 80004fa:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 80004fe:	6213      	str	r3, [r2, #32]

	///////////
	//SPI3_MOSI
	///////////
	//pin PB5 MOSI configuration
	GPIOB -> MODER  	|= GPIO_MODER_MODER5_1; 	//PB5 pin as alternate function
 8000500:	6813      	ldr	r3, [r2, #0]
 8000502:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000506:	6013      	str	r3, [r2, #0]
	GPIOB -> OTYPER     &= ~(GPIO_OTYPER_OT_5); 	//PB5 output type push-pull
 8000508:	6853      	ldr	r3, [r2, #4]
 800050a:	f023 0320 	bic.w	r3, r3, #32
 800050e:	6053      	str	r3, [r2, #4]
	GPIOB -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR5;  //PB5 output speed register (very high speed)
 8000510:	6893      	ldr	r3, [r2, #8]
 8000512:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000516:	6093      	str	r3, [r2, #8]
	GPIOB -> PUPDR		|= GPIO_PUPDR_PUPDR5_0; 	//PB5 pull-up
 8000518:	68d3      	ldr	r3, [r2, #12]
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	60d3      	str	r3, [r2, #12]
	GPIOB -> AFR[0] 	|= (0x06 << 20); 			//PB5 alternate function SPI3_MOSI
 8000520:	6a13      	ldr	r3, [r2, #32]
 8000522:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 8000526:	6213      	str	r3, [r2, #32]

}
 8000528:	bcf0      	pop	{r4, r5, r6, r7}
 800052a:	4770      	bx	lr
 800052c:	40023800 	.word	0x40023800
 8000530:	40020000 	.word	0x40020000
 8000534:	40020c00 	.word	0x40020c00
 8000538:	40020400 	.word	0x40020400
 800053c:	e000e100 	.word	0xe000e100
 8000540:	40013800 	.word	0x40013800
 8000544:	40013c00 	.word	0x40013c00

08000548 <SPI1Init>:

//SPI1 inicialization
void SPI1Init(){

	//Configure NSS hardware pin
	SPI1 -> CR1 	&= ~(SPI_CR1_SSM);
 8000548:	4b1e      	ldr	r3, [pc, #120]	; (80005c4 <SPI1Init+0x7c>)
 800054a:	881a      	ldrh	r2, [r3, #0]
 800054c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000550:	0412      	lsls	r2, r2, #16
 8000552:	0c12      	lsrs	r2, r2, #16
 8000554:	801a      	strh	r2, [r3, #0]
	SPI1 -> CR2 	|= SPI_CR2_SSOE;
 8000556:	889a      	ldrh	r2, [r3, #4]
 8000558:	b292      	uxth	r2, r2
 800055a:	f042 0204 	orr.w	r2, r2, #4
 800055e:	809a      	strh	r2, [r3, #4]

	//Configure clock polarity sample at positive clock edge
	SPI1 -> CR1 	&= ~(SPI_CR1_CPHA);
 8000560:	881a      	ldrh	r2, [r3, #0]
 8000562:	f022 0201 	bic.w	r2, r2, #1
 8000566:	0412      	lsls	r2, r2, #16
 8000568:	0c12      	lsrs	r2, r2, #16
 800056a:	801a      	strh	r2, [r3, #0]
	SPI1 -> CR1 	&= ~(SPI_CR1_CPOL);
 800056c:	881a      	ldrh	r2, [r3, #0]
 800056e:	f022 0202 	bic.w	r2, r2, #2
 8000572:	0412      	lsls	r2, r2, #16
 8000574:	0c12      	lsrs	r2, r2, #16
 8000576:	801a      	strh	r2, [r3, #0]

	//MSB bit first out
	SPI1 -> CR1 	&= ~(SPI_CR1_LSBFIRST);
 8000578:	881a      	ldrh	r2, [r3, #0]
 800057a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800057e:	0412      	lsls	r2, r2, #16
 8000580:	0c12      	lsrs	r2, r2, #16
 8000582:	801a      	strh	r2, [r3, #0]

	//2-line SPI mode (MISO & MOSI)
	SPI1 -> CR1 	&= ~(SPI_CR1_BIDIMODE);
 8000584:	881a      	ldrh	r2, [r3, #0]
 8000586:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800058a:	801a      	strh	r2, [r3, #0]

	//SPI full duplex mode
	SPI1 -> CR1 	&= ~(SPI_CR1_RXONLY);
 800058c:	881a      	ldrh	r2, [r3, #0]
 800058e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000592:	0412      	lsls	r2, r2, #16
 8000594:	0c12      	lsrs	r2, r2, #16
 8000596:	801a      	strh	r2, [r3, #0]

	//SPI 8-bit data frame format
	SPI1 -> CR1 	&= ~(SPI_CR1_DFF);
 8000598:	881a      	ldrh	r2, [r3, #0]
 800059a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800059e:	0412      	lsls	r2, r2, #16
 80005a0:	0c12      	lsrs	r2, r2, #16
 80005a2:	801a      	strh	r2, [r3, #0]

	//SPI baud rate without prescaler the sclk clock would be 42 MHz
	//SPI1 -> CR1 	|= ~(SPI_CR1_BR); 	// 84 MHz / 2 = 42 MHz
	SPI1 -> CR1 	|= (SPI_CR1_BR_1 |  SPI_CR1_BR_0); 	// 84 MHz / 16 = 5.25 MHz
 80005a4:	881a      	ldrh	r2, [r3, #0]
 80005a6:	b292      	uxth	r2, r2
 80005a8:	f042 0218 	orr.w	r2, r2, #24
 80005ac:	801a      	strh	r2, [r3, #0]
	//SPI1 -> CR1 	|= SPI_CR1_BR; 		// 84 MHz / 256 = 328 kHz (only in test version)

	//SPI in master mode configuration
	SPI1 -> CR1 	|= SPI_CR1_MSTR;
 80005ae:	881a      	ldrh	r2, [r3, #0]
 80005b0:	b292      	uxth	r2, r2
 80005b2:	f042 0204 	orr.w	r2, r2, #4
 80005b6:	801a      	strh	r2, [r3, #0]

	//SPI enable
	SPI1 -> CR1 	|= SPI_CR1_SPE;
 80005b8:	881a      	ldrh	r2, [r3, #0]
 80005ba:	b292      	uxth	r2, r2
 80005bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80005c0:	801a      	strh	r2, [r3, #0]
 80005c2:	4770      	bx	lr
 80005c4:	40013000 	.word	0x40013000

080005c8 <SPI1SendNByte>:

	 //variable for count
	 uint32_t i = 0;

	 //SPI1 CS enable (output low logical level)
	 GPIOA -> ODR 		&= ~(GPIO_ODR_ODR_4);
 80005c8:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <SPI1SendNByte+0x3c>)
 80005ca:	6953      	ldr	r3, [r2, #20]
 80005cc:	f023 0310 	bic.w	r3, r3, #16
 80005d0:	6153      	str	r3, [r2, #20]

	 for(i = 0;i < data_len;i++){
 80005d2:	b181      	cbz	r1, 80005f6 <SPI1SendNByte+0x2e>
	 SPI1 -> DR = *data;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <SPI1SendNByte+0x40>)
 80005d6:	4401      	add	r1, r0
 80005d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80005dc:	819a      	strh	r2, [r3, #12]
	 while(!(SPI1 -> SR & SPI_SR_TXE));
 80005de:	891a      	ldrh	r2, [r3, #8]
 80005e0:	0792      	lsls	r2, r2, #30
 80005e2:	d5fc      	bpl.n	80005de <SPI1SendNByte+0x16>
	 while(!(SPI1 -> SR & SPI_SR_RXNE));
 80005e4:	891a      	ldrh	r2, [r3, #8]
 80005e6:	07d2      	lsls	r2, r2, #31
 80005e8:	d5fc      	bpl.n	80005e4 <SPI1SendNByte+0x1c>
	 while(SPI1 -> SR & SPI_SR_BSY);
 80005ea:	891a      	ldrh	r2, [r3, #8]
 80005ec:	0612      	lsls	r2, r2, #24
 80005ee:	d4fc      	bmi.n	80005ea <SPI1SendNByte+0x22>
	 for(i = 0;i < data_len;i++){
 80005f0:	4288      	cmp	r0, r1
	 return SPI1 -> DR;
 80005f2:	899a      	ldrh	r2, [r3, #12]
	 for(i = 0;i < data_len;i++){
 80005f4:	d1f0      	bne.n	80005d8 <SPI1SendNByte+0x10>
		 //Write 8 bit data
		 SPI1Send1ByteReceive1Byte(&(data[i]));
	 }

	 //SPI1 CS disable (output high logical level)
	 GPIOA -> ODR 		|= GPIO_ODR_ODR_4;
 80005f6:	4a03      	ldr	r2, [pc, #12]	; (8000604 <SPI1SendNByte+0x3c>)
 80005f8:	6953      	ldr	r3, [r2, #20]
 80005fa:	f043 0310 	orr.w	r3, r3, #16
 80005fe:	6153      	str	r3, [r2, #20]

}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40020000 	.word	0x40020000
 8000608:	40013000 	.word	0x40013000

0800060c <SPI1SendNByteReceive1Byte>:

	 //Received data variable
	 uint8_t received_data = 0x00;

	 //SPI1 CS enable (output low logical level)
	 GPIOA -> ODR 		&= ~(GPIO_ODR_ODR_4);
 800060c:	4a17      	ldr	r2, [pc, #92]	; (800066c <SPI1SendNByteReceive1Byte+0x60>)
 800060e:	6953      	ldr	r3, [r2, #20]
 8000610:	f023 0310 	bic.w	r3, r3, #16
uint8_t SPI1SendNByteReceive1Byte(uint8_t *data_to_send, uint32_t send_data_len){
 8000614:	b430      	push	{r4, r5}
	 GPIOA -> ODR 		&= ~(GPIO_ODR_ODR_4);
 8000616:	6153      	str	r3, [r2, #20]

	 for(i = 0;i < send_data_len;i++){
 8000618:	b189      	cbz	r1, 800063e <SPI1SendNByteReceive1Byte+0x32>
	 SPI1 -> DR = *data;
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <SPI1SendNByteReceive1Byte+0x64>)
 800061c:	4604      	mov	r4, r0
 800061e:	1845      	adds	r5, r0, r1
 8000620:	f814 2b01 	ldrb.w	r2, [r4], #1
 8000624:	819a      	strh	r2, [r3, #12]
	 while(!(SPI1 -> SR & SPI_SR_TXE));
 8000626:	891a      	ldrh	r2, [r3, #8]
 8000628:	0792      	lsls	r2, r2, #30
 800062a:	d5fc      	bpl.n	8000626 <SPI1SendNByteReceive1Byte+0x1a>
	 while(!(SPI1 -> SR & SPI_SR_RXNE));
 800062c:	891a      	ldrh	r2, [r3, #8]
 800062e:	07d2      	lsls	r2, r2, #31
 8000630:	d5fc      	bpl.n	800062c <SPI1SendNByteReceive1Byte+0x20>
	 while(SPI1 -> SR & SPI_SR_BSY);
 8000632:	891a      	ldrh	r2, [r3, #8]
 8000634:	0612      	lsls	r2, r2, #24
 8000636:	d4fc      	bmi.n	8000632 <SPI1SendNByteReceive1Byte+0x26>
	 for(i = 0;i < send_data_len;i++){
 8000638:	42ac      	cmp	r4, r5
	 return SPI1 -> DR;
 800063a:	899a      	ldrh	r2, [r3, #12]
	 for(i = 0;i < send_data_len;i++){
 800063c:	d1f0      	bne.n	8000620 <SPI1SendNByteReceive1Byte+0x14>
	 SPI1 -> DR = *data;
 800063e:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <SPI1SendNByteReceive1Byte+0x64>)
 8000640:	5c43      	ldrb	r3, [r0, r1]
 8000642:	8193      	strh	r3, [r2, #12]
	 while(!(SPI1 -> SR & SPI_SR_TXE));
 8000644:	8913      	ldrh	r3, [r2, #8]
 8000646:	0798      	lsls	r0, r3, #30
 8000648:	d5fc      	bpl.n	8000644 <SPI1SendNByteReceive1Byte+0x38>
	 while(!(SPI1 -> SR & SPI_SR_RXNE));
 800064a:	4a09      	ldr	r2, [pc, #36]	; (8000670 <SPI1SendNByteReceive1Byte+0x64>)
 800064c:	8913      	ldrh	r3, [r2, #8]
 800064e:	07d9      	lsls	r1, r3, #31
 8000650:	d5fc      	bpl.n	800064c <SPI1SendNByteReceive1Byte+0x40>
	 while(SPI1 -> SR & SPI_SR_BSY);
 8000652:	4a07      	ldr	r2, [pc, #28]	; (8000670 <SPI1SendNByteReceive1Byte+0x64>)
 8000654:	8913      	ldrh	r3, [r2, #8]
 8000656:	061b      	lsls	r3, r3, #24
 8000658:	d4fc      	bmi.n	8000654 <SPI1SendNByteReceive1Byte+0x48>
		 SPI1Send1ByteReceive1Byte(&data_to_send[i]);
	 }
	 received_data = SPI1Send1ByteReceive1Byte(&data_to_send[i]);

	 //SPI1 CS disable (output high logical level)
	 GPIOA -> ODR 		|= GPIO_ODR_ODR_4;
 800065a:	4904      	ldr	r1, [pc, #16]	; (800066c <SPI1SendNByteReceive1Byte+0x60>)
	 return SPI1 -> DR;
 800065c:	8990      	ldrh	r0, [r2, #12]
	 GPIOA -> ODR 		|= GPIO_ODR_ODR_4;
 800065e:	694b      	ldr	r3, [r1, #20]
 8000660:	f043 0310 	orr.w	r3, r3, #16

	 return received_data;
}
 8000664:	b2c0      	uxtb	r0, r0
	 GPIOA -> ODR 		|= GPIO_ODR_ODR_4;
 8000666:	614b      	str	r3, [r1, #20]
}
 8000668:	bc30      	pop	{r4, r5}
 800066a:	4770      	bx	lr
 800066c:	40020000 	.word	0x40020000
 8000670:	40013000 	.word	0x40013000

08000674 <SPI3Init>:

//SPI3 initialization
void SPI3Init(){

	//Configure NSS hardware pin
	SPI3 -> CR1 	&= ~(SPI_CR1_SSM); 		//Use hardware controlled chip select line
 8000674:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <SPI3Init+0x70>)
 8000676:	881a      	ldrh	r2, [r3, #0]
 8000678:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800067c:	0412      	lsls	r2, r2, #16
 800067e:	0c12      	lsrs	r2, r2, #16
 8000680:	801a      	strh	r2, [r3, #0]
	SPI3 -> CR2		|= SPI_CR2_SSOE; 		//Use hardware output chip select that was active in low state
 8000682:	889a      	ldrh	r2, [r3, #4]
 8000684:	b292      	uxth	r2, r2
 8000686:	f042 0204 	orr.w	r2, r2, #4
 800068a:	809a      	strh	r2, [r3, #4]

	//Configure clock polarity sample at positive edge of clock
	SPI3 -> CR1 	&= ~(SPI_CR1_CPHA);
 800068c:	881a      	ldrh	r2, [r3, #0]
 800068e:	f022 0201 	bic.w	r2, r2, #1
 8000692:	0412      	lsls	r2, r2, #16
 8000694:	0c12      	lsrs	r2, r2, #16
 8000696:	801a      	strh	r2, [r3, #0]
	SPI3 -> CR1 	|= SPI_CR1_CPOL;
 8000698:	881a      	ldrh	r2, [r3, #0]
 800069a:	b292      	uxth	r2, r2
 800069c:	f042 0202 	orr.w	r2, r2, #2
 80006a0:	801a      	strh	r2, [r3, #0]

	//MSB bit first out
	SPI3 -> CR1 	&= ~(SPI_CR1_LSBFIRST);
 80006a2:	881a      	ldrh	r2, [r3, #0]
 80006a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80006a8:	0412      	lsls	r2, r2, #16
 80006aa:	0c12      	lsrs	r2, r2, #16
 80006ac:	801a      	strh	r2, [r3, #0]

	//2-line SPI mode (MISO & MOSI)
	SPI3 -> CR1 	&= ~(SPI_CR1_BIDIMODE);
 80006ae:	881a      	ldrh	r2, [r3, #0]
 80006b0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80006b4:	801a      	strh	r2, [r3, #0]

	//SPI full duplex mode
	SPI3 -> CR1 	&= ~(SPI_CR1_RXONLY);
 80006b6:	881a      	ldrh	r2, [r3, #0]
 80006b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80006bc:	0412      	lsls	r2, r2, #16
 80006be:	0c12      	lsrs	r2, r2, #16
 80006c0:	801a      	strh	r2, [r3, #0]

	//SPI 8-bit data frame format
	SPI3 -> CR1 	&= ~(SPI_CR1_DFF);
 80006c2:	881a      	ldrh	r2, [r3, #0]
 80006c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006c8:	0412      	lsls	r2, r2, #16
 80006ca:	0c12      	lsrs	r2, r2, #16
 80006cc:	801a      	strh	r2, [r3, #0]

	//SPI baud rate without prescaler the sclk clock would be 42 MHz
	SPI3 -> CR1 	|= SPI_CR1_BR_0; 	// 42 MHz / 4 = 10,5 MHz
 80006ce:	881a      	ldrh	r2, [r3, #0]
 80006d0:	b292      	uxth	r2, r2
 80006d2:	f042 0208 	orr.w	r2, r2, #8
 80006d6:	801a      	strh	r2, [r3, #0]

	//SPI in master mode configuration
	SPI3 -> CR1 	|= SPI_CR1_MSTR;
 80006d8:	881a      	ldrh	r2, [r3, #0]
 80006da:	b292      	uxth	r2, r2
 80006dc:	f042 0204 	orr.w	r2, r2, #4
 80006e0:	801a      	strh	r2, [r3, #0]
 80006e2:	4770      	bx	lr
 80006e4:	40003c00 	.word	0x40003c00

080006e8 <W5500SpiConnCheck>:

}
//Check SPI connection with external W5500 ethernet module
//0 - connection established thru SPI communication
//1 - connection error
uint8_t W5500SpiConnCheck(void){
 80006e8:	b500      	push	{lr}
 80006ea:	b085      	sub	sp, #20

	//temporary register, necessary to initialize to initial state
	uint8_t temp_array[10] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 80006ec:	2300      	movs	r3, #0

	//Read version of W5500 external device
	temp_array[0]	= MSB(W5500_CBR_VERSIONR);
	temp_array[1]	= LSB(W5500_CBR_VERSIONR);
 80006ee:	2239      	movs	r2, #57	; 0x39
	temp_array[2] 	= (W5500_CP_BSB_CR
					| W5500_CP_READ
					| W5500_CP_OM_VDLM); 			//set byte for reading from common register

	//Read thru SPI data interface
	temp_array[9] = SPI1SendNByteReceive1Byte(temp_array,3);
 80006f0:	a801      	add	r0, sp, #4
 80006f2:	2103      	movs	r1, #3
	uint8_t temp_array[10] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 80006f4:	9301      	str	r3, [sp, #4]
 80006f6:	9302      	str	r3, [sp, #8]
 80006f8:	f8ad 300c 	strh.w	r3, [sp, #12]
	temp_array[1]	= LSB(W5500_CBR_VERSIONR);
 80006fc:	f88d 2005 	strb.w	r2, [sp, #5]
	temp_array[9] = SPI1SendNByteReceive1Byte(temp_array,3);
 8000700:	f7ff ff84 	bl	800060c <SPI1SendNByteReceive1Byte>
	if(temp_array[9] == W5500_CBR_VERSIONR_CON){
		return 0; 		//W5500 device is proper connected thru SPI connection
	}else{
		return 1; 		//W5500 device SPI error
	}
}
 8000704:	3804      	subs	r0, #4
 8000706:	bf18      	it	ne
 8000708:	2001      	movne	r0, #1
 800070a:	b005      	add	sp, #20
 800070c:	f85d fb04 	ldr.w	pc, [sp], #4

08000710 <W5500InitV2>:
//IP address 			<ip> 		for example {192,168,1,1}
//Gateway address		<gateway> 	for example {192,168,1,1}
//Subnet mask 			<submask> 	for example {255,255,255,0}
//MAC address 			<mac> 		for example {0x00,0x08,0xdc,0x01,0x02,0x03}
//Returned value 		0-OK status 1- error
void W5500InitV2(uint8_t *ip, uint8_t *gateway, uint8_t *submask, uint8_t *mac){
 8000710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}


	//w5500 enable ping response
	temp_array[0] 		= MSB(W5500_CRB_MR);			//set address for common mode register MSB
	temp_array[1] 		= LSB(W5500_CRB_MR);			//set address for common mode register LSB
	temp_array[2] 		= (W5500_CP_BSB_CR
 8000714:	2404      	movs	r4, #4
void W5500InitV2(uint8_t *ip, uint8_t *gateway, uint8_t *submask, uint8_t *mac){
 8000716:	b085      	sub	sp, #20
 8000718:	4689      	mov	r9, r1
	uint8_t temp_array[10] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 800071a:	2500      	movs	r5, #0
void W5500InitV2(uint8_t *ip, uint8_t *gateway, uint8_t *submask, uint8_t *mac){
 800071c:	4607      	mov	r7, r0
						| W5500_CRB_MR_WOL
						| W5500_CRB_MR_PB
						| W5500_CRB_MR_PPPOE
						| W5500_CRB_MR_FARP); 			//write in to common mode register
	//write thru spi communication
	SPI1SendNByte(temp_array,4);
 800071e:	4621      	mov	r1, r4
 8000720:	eb0d 0004 	add.w	r0, sp, r4
void W5500InitV2(uint8_t *ip, uint8_t *gateway, uint8_t *submask, uint8_t *mac){
 8000724:	461e      	mov	r6, r3
 8000726:	4690      	mov	r8, r2
	uint8_t temp_array[10] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 8000728:	9501      	str	r5, [sp, #4]
 800072a:	9502      	str	r5, [sp, #8]
 800072c:	f8ad 500c 	strh.w	r5, [sp, #12]
	temp_array[2] 		= (W5500_CP_BSB_CR
 8000730:	f88d 4006 	strb.w	r4, [sp, #6]
	SPI1SendNByte(temp_array,4);
 8000734:	f7ff ff48 	bl	80005c8 <SPI1SendNByte>
	temp_array[0] 		= MSB(W5500_CRB_GAR_0);			//set address for common gateway register MSB
	temp_array[1] 		= LSB(W5500_CRB_GAR_0);			//set address for common gateway register LSB
	temp_array[2] 		= (W5500_CP_BSB_CR
						| W5500_CP_WRITE
						| W5500_CP_OM_VDLM); 			//set byte for write in to common register
	temp_array[3] 		= gateway[0]; 					//setup gateway address byte 0
 8000738:	f899 0000 	ldrb.w	r0, [r9]
	temp_array[4] 		= gateway[1]; 					//setup gateway address byte 1
 800073c:	f899 3001 	ldrb.w	r3, [r9, #1]
	temp_array[5] 		= gateway[2]; 					//setup gateway address byte 2
 8000740:	f899 1002 	ldrb.w	r1, [r9, #2]
	temp_array[6] 		= gateway[3]; 					//setup gateway address byte 3
 8000744:	f899 2003 	ldrb.w	r2, [r9, #3]
	temp_array[3] 		= gateway[0]; 					//setup gateway address byte 0
 8000748:	f88d 0007 	strb.w	r0, [sp, #7]
	temp_array[4] 		= gateway[1]; 					//setup gateway address byte 1
 800074c:	f88d 3008 	strb.w	r3, [sp, #8]
	//write thru spi communication
	SPI1SendNByte(temp_array,7);
 8000750:	eb0d 0004 	add.w	r0, sp, r4
	temp_array[1] 		= LSB(W5500_CRB_GAR_0);			//set address for common gateway register LSB
 8000754:	2301      	movs	r3, #1
	temp_array[5] 		= gateway[2]; 					//setup gateway address byte 2
 8000756:	f88d 1009 	strb.w	r1, [sp, #9]
	SPI1SendNByte(temp_array,7);
 800075a:	2107      	movs	r1, #7
	temp_array[6] 		= gateway[3]; 					//setup gateway address byte 3
 800075c:	f88d 200a 	strb.w	r2, [sp, #10]
	temp_array[1] 		= LSB(W5500_CRB_GAR_0);			//set address for common gateway register LSB
 8000760:	f88d 3005 	strb.w	r3, [sp, #5]
	temp_array[0] 		= MSB(W5500_CRB_GAR_0);			//set address for common gateway register MSB
 8000764:	f88d 5004 	strb.w	r5, [sp, #4]
	temp_array[2] 		= (W5500_CP_BSB_CR
 8000768:	f88d 4006 	strb.w	r4, [sp, #6]
	SPI1SendNByte(temp_array,7);
 800076c:	f7ff ff2c 	bl	80005c8 <SPI1SendNByte>
	temp_array[0] 		= MSB(W5500_CRB_SUBR_0);		//set address for common subnet mask register MSB
	temp_array[1] 		= LSB(W5500_CRB_SUBR_0);		//set address for common subnet mask register LSB
	temp_array[2] 		= (W5500_CP_BSB_CR
						| W5500_CP_WRITE
						| W5500_CP_OM_VDLM); 			//set byte for write in to common register
	temp_array[3] 		= submask[0]; 					//setup subnet mask address byte 0
 8000770:	f898 3000 	ldrb.w	r3, [r8]
	temp_array[4] 		= submask[1]; 					//setup subnet mask address byte 1
 8000774:	f898 1001 	ldrb.w	r1, [r8, #1]
	temp_array[5] 		= submask[2]; 					//setup subnet mask address byte 2
 8000778:	f898 e002 	ldrb.w	lr, [r8, #2]
	temp_array[6] 		= submask[3]; 					//setup subnet mask address byte 3
 800077c:	f898 2003 	ldrb.w	r2, [r8, #3]
	temp_array[3] 		= submask[0]; 					//setup subnet mask address byte 0
 8000780:	f88d 3007 	strb.w	r3, [sp, #7]
	//write thru spi communication
	SPI1SendNByte(temp_array,7);
 8000784:	eb0d 0004 	add.w	r0, sp, r4
	temp_array[1] 		= LSB(W5500_CRB_SUBR_0);		//set address for common subnet mask register LSB
 8000788:	2305      	movs	r3, #5
	temp_array[4] 		= submask[1]; 					//setup subnet mask address byte 1
 800078a:	f88d 1008 	strb.w	r1, [sp, #8]
	SPI1SendNByte(temp_array,7);
 800078e:	2107      	movs	r1, #7
	temp_array[5] 		= submask[2]; 					//setup subnet mask address byte 2
 8000790:	f88d e009 	strb.w	lr, [sp, #9]
	temp_array[6] 		= submask[3]; 					//setup subnet mask address byte 3
 8000794:	f88d 200a 	strb.w	r2, [sp, #10]
	temp_array[1] 		= LSB(W5500_CRB_SUBR_0);		//set address for common subnet mask register LSB
 8000798:	f88d 3005 	strb.w	r3, [sp, #5]
	temp_array[0] 		= MSB(W5500_CRB_SUBR_0);		//set address for common subnet mask register MSB
 800079c:	f88d 5004 	strb.w	r5, [sp, #4]
	temp_array[2] 		= (W5500_CP_BSB_CR
 80007a0:	f88d 4006 	strb.w	r4, [sp, #6]
	SPI1SendNByte(temp_array,7);
 80007a4:	f7ff ff10 	bl	80005c8 <SPI1SendNByte>


	//setup hardware address register
	temp_array[0] 		= MSB(W5500_CRB_SHAR_0);		//set address for common hardware address register MSB
	temp_array[1] 		= LSB(W5500_CRB_SHAR_0);		//set address for common hardware address register LSB
 80007a8:	2309      	movs	r3, #9
	temp_array[2] 		= (W5500_CP_BSB_CR
						| W5500_CP_WRITE
						| W5500_CP_OM_VDLM); 			//set byte for write in to common register
	temp_array[3] 		= mac[0]; 						//setup hardware address byte 0
 80007aa:	7832      	ldrb	r2, [r6, #0]
	temp_array[4] 		= mac[1]; 						//setup hardware address byte 1
 80007ac:	7870      	ldrb	r0, [r6, #1]
	temp_array[5] 		= mac[2]; 						//setup hardware address byte 2
 80007ae:	78b1      	ldrb	r1, [r6, #2]
	temp_array[6] 		= mac[3]; 						//setup hardware address byte 3
 80007b0:	f896 c003 	ldrb.w	ip, [r6, #3]
	temp_array[7] 		= mac[4]; 						//setup hardware address byte 4
 80007b4:	f896 e004 	ldrb.w	lr, [r6, #4]
	temp_array[3] 		= mac[0]; 						//setup hardware address byte 0
 80007b8:	f88d 2007 	strb.w	r2, [sp, #7]
	temp_array[4] 		= mac[1]; 						//setup hardware address byte 1
 80007bc:	f88d 0008 	strb.w	r0, [sp, #8]
	temp_array[8] 		= mac[5]; 						//setup hardware address byte 5
 80007c0:	7972      	ldrb	r2, [r6, #5]
	temp_array[5] 		= mac[2]; 						//setup hardware address byte 2
 80007c2:	f88d 1009 	strb.w	r1, [sp, #9]
	//write thru spi communication
	SPI1SendNByte(temp_array,9);
 80007c6:	eb0d 0004 	add.w	r0, sp, r4
 80007ca:	4619      	mov	r1, r3
	temp_array[6] 		= mac[3]; 						//setup hardware address byte 3
 80007cc:	f88d c00a 	strb.w	ip, [sp, #10]
	temp_array[7] 		= mac[4]; 						//setup hardware address byte 4
 80007d0:	f88d e00b 	strb.w	lr, [sp, #11]
	temp_array[8] 		= mac[5]; 						//setup hardware address byte 5
 80007d4:	f88d 200c 	strb.w	r2, [sp, #12]
	temp_array[1] 		= LSB(W5500_CRB_SHAR_0);		//set address for common hardware address register LSB
 80007d8:	f88d 3005 	strb.w	r3, [sp, #5]
	temp_array[0] 		= MSB(W5500_CRB_SHAR_0);		//set address for common hardware address register MSB
 80007dc:	f88d 5004 	strb.w	r5, [sp, #4]
	temp_array[2] 		= (W5500_CP_BSB_CR
 80007e0:	f88d 4006 	strb.w	r4, [sp, #6]
	SPI1SendNByte(temp_array,9);
 80007e4:	f7ff fef0 	bl	80005c8 <SPI1SendNByte>
	temp_array[0] 		= MSB(W5500_CRB_SIPR_0);		//set address for source IP register MSB
	temp_array[1] 		= LSB(W5500_CRB_SIPR_0);		//set address for source IP register LSB
	temp_array[2] 		= (W5500_CP_BSB_CR
						| W5500_CP_WRITE
						| W5500_CP_OM_VDLM); 			//set byte for write in to common register
	temp_array[3] 		= ip[0]; 						//setup source IP address byte 0
 80007e8:	f897 c000 	ldrb.w	ip, [r7]
	temp_array[4] 		= ip[1]; 						//setup source IP address byte 1
 80007ec:	f897 e001 	ldrb.w	lr, [r7, #1]
	temp_array[5] 		= ip[2]; 						//setup source IP address byte 2
	temp_array[6] 		= ip[3]; 						//setup source IP address byte 3
 80007f0:	78fa      	ldrb	r2, [r7, #3]
	temp_array[5] 		= ip[2]; 						//setup source IP address byte 2
 80007f2:	78be      	ldrb	r6, [r7, #2]
	temp_array[3] 		= ip[0]; 						//setup source IP address byte 0
 80007f4:	f88d c007 	strb.w	ip, [sp, #7]
	//write thru spi communication
	SPI1SendNByte(temp_array,7);
 80007f8:	eb0d 0004 	add.w	r0, sp, r4
	temp_array[1] 		= LSB(W5500_CRB_SIPR_0);		//set address for source IP register LSB
 80007fc:	230f      	movs	r3, #15
	SPI1SendNByte(temp_array,7);
 80007fe:	2107      	movs	r1, #7
	temp_array[4] 		= ip[1]; 						//setup source IP address byte 1
 8000800:	f88d e008 	strb.w	lr, [sp, #8]
	temp_array[6] 		= ip[3]; 						//setup source IP address byte 3
 8000804:	f88d 200a 	strb.w	r2, [sp, #10]
	temp_array[1] 		= LSB(W5500_CRB_SIPR_0);		//set address for source IP register LSB
 8000808:	f88d 3005 	strb.w	r3, [sp, #5]
	temp_array[0] 		= MSB(W5500_CRB_SIPR_0);		//set address for source IP register MSB
 800080c:	f88d 5004 	strb.w	r5, [sp, #4]
	temp_array[2] 		= (W5500_CP_BSB_CR
 8000810:	f88d 4006 	strb.w	r4, [sp, #6]
	temp_array[5] 		= ip[2]; 						//setup source IP address byte 2
 8000814:	f88d 6009 	strb.w	r6, [sp, #9]
	SPI1SendNByte(temp_array,7);
 8000818:	f7ff fed6 	bl	80005c8 <SPI1SendNByte>


	//setup PHY configuration register
	temp_array[0] 	= MSB(W5500_CRB_PHYCFGR);
 800081c:	4b04      	ldr	r3, [pc, #16]	; (8000830 <W5500InitV2+0x120>)
 800081e:	9301      	str	r3, [sp, #4]
					| W5500_CP_OM_VDLM); 				//write in to common register
	temp_array[3] 	= (W5500_CRB_PHYCFGR_RST
					| W5500_CRB_PHYCFGR_OPMD
					| W5500_CRB_PHYCFGR_OPMDC_100FD); 	//100BT full-duplex auto negotiation disable
	//write thru spi communication
	SPI1SendNByte(temp_array,4);
 8000820:	4621      	mov	r1, r4
 8000822:	eb0d 0004 	add.w	r0, sp, r4
 8000826:	f7ff fecf 	bl	80005c8 <SPI1SendNByte>


}
 800082a:	b005      	add	sp, #20
 800082c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000830:	d8042e00 	.word	0xd8042e00

08000834 <W5500InitTCP>:
//Socket number 	<socket_no> 	(0,1,2,3,4,5,6,7)
//Port number 		<port>			for example 1000
//TX buffer size 	<TX_buff_size> 	(0,1,2,4,8,16)
//RX buffer size 	<RX_buff_size> 	(0,1,2,4,8,16)
//Returned value 	0-OK status 1- error
uint8_t W5500InitTCP(uint8_t socket_no, uint16_t port, uint8_t TX_buff_size, uint8_t RX_buff_size){
 8000834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000838:	b084      	sub	sp, #16

	//temporary register, necessary to initialize to initial state
	uint8_t temp_array[10] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 800083a:	2400      	movs	r4, #0
 800083c:	9402      	str	r4, [sp, #8]
 800083e:	9401      	str	r4, [sp, #4]
 8000840:	f8ad 400c 	strh.w	r4, [sp, #12]
	//socket select register which select proper offset address allocation
	uint8_t socket_sel_register;

	switch(socket_no){
 8000844:	2807      	cmp	r0, #7
 8000846:	d869      	bhi.n	800091c <W5500InitTCP+0xe8>
 8000848:	e8df f000 	tbb	[pc, r0]
 800084c:	56530465 	.word	0x56530465
 8000850:	625f5c59 	.word	0x625f5c59
 8000854:	f04f 082c 	mov.w	r8, #44	; 0x2c
	temp_array[0] 	= MSB(W5500_CRB_SIMR);
	temp_array[1] 	= LSB(W5500_CRB_SIMR);
	temp_array[2] 	= (W5500_CP_BSB_CR
					| W5500_CP_WRITE
					| W5500_CP_OM_VDLM); 				//write in to common register
	temp_array[3] 	= (1 << socket_no); 				//Enable socket n mask interrupt register
 8000858:	f04f 0a01 	mov.w	sl, #1
	temp_array[2] 	= (W5500_CP_BSB_CR
 800085c:	2504      	movs	r5, #4
	temp_array[3] 	= (1 << socket_no); 				//Enable socket n mask interrupt register
 800085e:	fa0a f000 	lsl.w	r0, sl, r0
 8000862:	460e      	mov	r6, r1
 8000864:	4699      	mov	r9, r3
	//write thru spi communication
	SPI1SendNByte(temp_array,4);
 8000866:	4629      	mov	r1, r5
	temp_array[1] 	= LSB(W5500_CRB_SIMR);
 8000868:	2318      	movs	r3, #24
	temp_array[3] 	= (1 << socket_no); 				//Enable socket n mask interrupt register
 800086a:	f88d 0007 	strb.w	r0, [sp, #7]
	SPI1SendNByte(temp_array,4);
 800086e:	eb0d 0005 	add.w	r0, sp, r5
 8000872:	4617      	mov	r7, r2
	temp_array[1] 	= LSB(W5500_CRB_SIMR);
 8000874:	f88d 3005 	strb.w	r3, [sp, #5]
	temp_array[2] 	= (W5500_CP_BSB_CR
 8000878:	f88d 5006 	strb.w	r5, [sp, #6]
	SPI1SendNByte(temp_array,4);
 800087c:	f7ff fea4 	bl	80005c8 <SPI1SendNByte>


	//clear Socket interrupt register SIR
	temp_array[0] 	= MSB(W5500_CRB_SIR);
 8000880:	4b27      	ldr	r3, [pc, #156]	; (8000920 <W5500InitTCP+0xec>)
 8000882:	9301      	str	r3, [sp, #4]
	temp_array[2] 	= (W5500_CP_BSB_CR
					| W5500_CP_WRITE
					| W5500_CP_OM_VDLM); 				//write in to common register
	temp_array[3] 	= 0x00; 							//Clear all status flags in socket interrupt register
	//write thru spi communication
	SPI1SendNByte(temp_array,4);
 8000884:	4629      	mov	r1, r5
 8000886:	eb0d 0005 	add.w	r0, sp, r5
 800088a:	f7ff fe9d 	bl	80005c8 <SPI1SendNByte>


	//setup Socket n RX and TX memory allocation
	temp_array[0] 	= MSB(W5500_SR_RXBUF_SIZE);
 800088e:	2400      	movs	r4, #0
	temp_array[1] 	= LSB(W5500_SR_RXBUF_SIZE);
 8000890:	231e      	movs	r3, #30
					| W5500_CP_WRITE
					| W5500_CP_OM_VDLM); 				//write in to socket n configuration register
	temp_array[3] 	= RX_buff_size; 					//Define RX buffer size
	temp_array[4] 	= TX_buff_size; 					//Define TX buffer size at address (RX buffer size register) + 1 = 0x001f
	//write thru spi communication
	SPI1SendNByte(temp_array,5);
 8000892:	2105      	movs	r1, #5
 8000894:	eb0d 0005 	add.w	r0, sp, r5
	temp_array[1] 	= LSB(W5500_SR_RXBUF_SIZE);
 8000898:	f88d 3005 	strb.w	r3, [sp, #5]
	temp_array[2] 	= (socket_sel_register          	//Select socket n
 800089c:	f88d 8006 	strb.w	r8, [sp, #6]
	temp_array[3] 	= RX_buff_size; 					//Define RX buffer size
 80008a0:	f88d 9007 	strb.w	r9, [sp, #7]
	temp_array[4] 	= TX_buff_size; 					//Define TX buffer size at address (RX buffer size register) + 1 = 0x001f
 80008a4:	f88d 7008 	strb.w	r7, [sp, #8]
	temp_array[0] 	= MSB(W5500_SR_RXBUF_SIZE);
 80008a8:	f88d 4004 	strb.w	r4, [sp, #4]
	SPI1SendNByte(temp_array,5);
 80008ac:	f7ff fe8c 	bl	80005c8 <SPI1SendNByte>
	temp_array[2] 	= (socket_sel_register          	//Select socket n
					| W5500_CP_WRITE
					| W5500_CP_OM_VDLM); 				//write in to socket n configuration register
	temp_array[3] 	= W5500_SR_MR_TCP; 					//Configure socket n as TCP protocol
	//write thru spi communication
	SPI1SendNByte(temp_array,4);
 80008b0:	4629      	mov	r1, r5
 80008b2:	eb0d 0005 	add.w	r0, sp, r5
	temp_array[3] 	= W5500_SR_MR_TCP; 					//Configure socket n as TCP protocol
 80008b6:	f88d a007 	strb.w	sl, [sp, #7]
	temp_array[0] 	= MSB(W5500_SR_MR);
 80008ba:	f88d 4004 	strb.w	r4, [sp, #4]
	temp_array[1] 	= LSB(W5500_SR_MR);
 80008be:	f88d 4005 	strb.w	r4, [sp, #5]
	temp_array[2] 	= (socket_sel_register          	//Select socket n
 80008c2:	f88d 8006 	strb.w	r8, [sp, #6]
	SPI1SendNByte(temp_array,4);
 80008c6:	f7ff fe7f 	bl	80005c8 <SPI1SendNByte>
					| W5500_CP_WRITE
					| W5500_CP_OM_VDLM); 				//write in to socket n configuration register
	temp_array[3] 	= MSB(port);						//Configure MSB byte of port register
	temp_array[4] 	= LSB(port); 						//Configure LSB byte of port register
	//write thru spi communication
	SPI1SendNByte(temp_array,5);
 80008ca:	eb0d 0005 	add.w	r0, sp, r5
	temp_array[3] 	= MSB(port);						//Configure MSB byte of port register
 80008ce:	0a33      	lsrs	r3, r6, #8
	SPI1SendNByte(temp_array,5);
 80008d0:	2105      	movs	r1, #5
	temp_array[0] 	= MSB(W5500_SR_PORT_0);
 80008d2:	f88d 4004 	strb.w	r4, [sp, #4]
	temp_array[1] 	= LSB(W5500_SR_PORT_0);
 80008d6:	f88d 5005 	strb.w	r5, [sp, #5]
	temp_array[2] 	= (socket_sel_register          	//Select socket n
 80008da:	f88d 8006 	strb.w	r8, [sp, #6]
	temp_array[4] 	= LSB(port); 						//Configure LSB byte of port register
 80008de:	f88d 6008 	strb.w	r6, [sp, #8]
	temp_array[3] 	= MSB(port);						//Configure MSB byte of port register
 80008e2:	f88d 3007 	strb.w	r3, [sp, #7]
	SPI1SendNByte(temp_array,5);
 80008e6:	f7ff fe6f 	bl	80005c8 <SPI1SendNByte>

	return 0;
 80008ea:	4620      	mov	r0, r4
}
 80008ec:	b004      	add	sp, #16
 80008ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		break;
 80008f2:	f04f 084c 	mov.w	r8, #76	; 0x4c
 80008f6:	e7af      	b.n	8000858 <W5500InitTCP+0x24>
		break;
 80008f8:	f04f 086c 	mov.w	r8, #108	; 0x6c
 80008fc:	e7ac      	b.n	8000858 <W5500InitTCP+0x24>
		break;
 80008fe:	f04f 088c 	mov.w	r8, #140	; 0x8c
 8000902:	e7a9      	b.n	8000858 <W5500InitTCP+0x24>
		break;
 8000904:	f04f 08ac 	mov.w	r8, #172	; 0xac
 8000908:	e7a6      	b.n	8000858 <W5500InitTCP+0x24>
		break;
 800090a:	f04f 08cc 	mov.w	r8, #204	; 0xcc
 800090e:	e7a3      	b.n	8000858 <W5500InitTCP+0x24>
		break;
 8000910:	f04f 08ec 	mov.w	r8, #236	; 0xec
 8000914:	e7a0      	b.n	8000858 <W5500InitTCP+0x24>
	switch(socket_no){
 8000916:	f04f 080c 	mov.w	r8, #12
 800091a:	e79d      	b.n	8000858 <W5500InitTCP+0x24>
		return 1; 										//error
 800091c:	2001      	movs	r0, #1
 800091e:	e7e5      	b.n	80008ec <W5500InitTCP+0xb8>
 8000920:	00041700 	.word	0x00041700

08000924 <W5500OpenTCPServer>:

//Open TCP protocol
//Socket number 	<socket_no> 	(0,1,2,3,4,5,6,7)
//Returned value 0-OK status 1- error
uint8_t W5500OpenTCPServer(uint8_t socket_no){
 8000924:	b570      	push	{r4, r5, r6, lr}
 8000926:	b084      	sub	sp, #16

	//temporary register, necessary to initialize to initial state
	uint8_t temp_array[10] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 8000928:	2300      	movs	r3, #0
 800092a:	9302      	str	r3, [sp, #8]
 800092c:	9301      	str	r3, [sp, #4]
 800092e:	f8ad 300c 	strh.w	r3, [sp, #12]
	//socket select register which select proper offset address allocation
	uint8_t socket_sel_register;

	switch(socket_no){
 8000932:	2807      	cmp	r0, #7
 8000934:	d856      	bhi.n	80009e4 <W5500OpenTCPServer+0xc0>
 8000936:	e8df f000 	tbb	[pc, r0]
 800093a:	0440      	.short	0x0440
 800093c:	46524f4c 	.word	0x46524f4c
 8000940:	4349      	.short	0x4349
 8000942:	262c      	movs	r6, #44	; 0x2c

		case 0x00:
			socket_sel_register = W5500_CP_BSB_S0_R; 		//socket 0 address
			break;
		case 0x01:
			socket_sel_register = W5500_CP_BSB_S1_R; 		//socket 1 address
 8000944:	2528      	movs	r5, #40	; 0x28
	temp_array[2] 	= (socket_sel_register
					| W5500_CP_WRITE
					| W5500_CP_OM_VDLM); 				//write in to socket n configuration register
	temp_array[3] 	= W5500_SR_CR_OPEN; 				//open command
	//write thru spi communication
	SPI1SendNByte(temp_array,4);
 8000946:	2104      	movs	r1, #4
	temp_array[1] 	= LSB(W5500_SR_CR);
 8000948:	2301      	movs	r3, #1
	SPI1SendNByte(temp_array,4);
 800094a:	eb0d 0001 	add.w	r0, sp, r1
	temp_array[1] 	= LSB(W5500_SR_CR);
 800094e:	f88d 3005 	strb.w	r3, [sp, #5]
	temp_array[3] 	= W5500_SR_CR_OPEN; 				//open command
 8000952:	f88d 3007 	strb.w	r3, [sp, #7]
	temp_array[2] 	= (socket_sel_register
 8000956:	f88d 6006 	strb.w	r6, [sp, #6]
	SPI1SendNByte(temp_array,4);
 800095a:	f7ff fe35 	bl	80005c8 <SPI1SendNByte>

	//Read status register
	temp_array[0]	= MSB(W5500_SR_SR);
 800095e:	2200      	movs	r2, #0
	temp_array[1]	= LSB(W5500_SR_SR);
 8000960:	2303      	movs	r3, #3
	temp_array[2] 	= (socket_sel_register
 8000962:	f88d 5006 	strb.w	r5, [sp, #6]
	temp_array[0]	= MSB(W5500_SR_SR);
 8000966:	f88d 2004 	strb.w	r2, [sp, #4]
	temp_array[1]	= LSB(W5500_SR_SR);
 800096a:	f88d 3005 	strb.w	r3, [sp, #5]
					| W5500_CP_READ
					| W5500_CP_OM_VDLM); 				//set byte for reading from common register

	//wait on Socket n SOCK_INIT flag
	while(!(SPI1SendNByteReceive1Byte(temp_array,3) == W5500_SR_SR_SOCK_INIT));
 800096e:	2103      	movs	r1, #3
 8000970:	a801      	add	r0, sp, #4
 8000972:	f7ff fe4b 	bl	800060c <SPI1SendNByteReceive1Byte>
 8000976:	2813      	cmp	r0, #19
 8000978:	d1f9      	bne.n	800096e <W5500OpenTCPServer+0x4a>
	temp_array[2] 	= (socket_sel_register
					| W5500_CP_WRITE
					| W5500_CP_OM_VDLM); 				//write in to socket n configuration register
	temp_array[3] 	= W5500_SR_CR_LISTEN; 				//listen command
	//write thru spi communication
	SPI1SendNByte(temp_array,4);
 800097a:	2104      	movs	r1, #4
	temp_array[3] 	= W5500_SR_CR_LISTEN; 				//listen command
 800097c:	2302      	movs	r3, #2
	temp_array[0] 	= MSB(W5500_SR_CR);
 800097e:	2400      	movs	r4, #0
	temp_array[1] 	= LSB(W5500_SR_CR);
 8000980:	2201      	movs	r2, #1
	SPI1SendNByte(temp_array,4);
 8000982:	eb0d 0001 	add.w	r0, sp, r1
	temp_array[3] 	= W5500_SR_CR_LISTEN; 				//listen command
 8000986:	f88d 3007 	strb.w	r3, [sp, #7]
	temp_array[2] 	= (socket_sel_register
 800098a:	f88d 6006 	strb.w	r6, [sp, #6]
	temp_array[0] 	= MSB(W5500_SR_CR);
 800098e:	f88d 4004 	strb.w	r4, [sp, #4]
	temp_array[1] 	= LSB(W5500_SR_CR);
 8000992:	f88d 2005 	strb.w	r2, [sp, #5]
	SPI1SendNByte(temp_array,4);
 8000996:	f7ff fe17 	bl	80005c8 <SPI1SendNByte>


	//Read status register
	temp_array[0]	= MSB(W5500_SR_SR);
	temp_array[1]	= LSB(W5500_SR_SR);
 800099a:	2303      	movs	r3, #3
	temp_array[0]	= MSB(W5500_SR_SR);
 800099c:	f88d 4004 	strb.w	r4, [sp, #4]
	temp_array[2] 	= (socket_sel_register
 80009a0:	f88d 5006 	strb.w	r5, [sp, #6]
	temp_array[1]	= LSB(W5500_SR_SR);
 80009a4:	f88d 3005 	strb.w	r3, [sp, #5]
					| W5500_CP_READ
					| W5500_CP_OM_VDLM); 				//set byte for reading from common register
	//wait on Socket n SOCK_LISTEN flag
	while(!(SPI1SendNByteReceive1Byte(temp_array,3) == W5500_SR_SR_SOCK_LISTEN));
 80009a8:	2103      	movs	r1, #3
 80009aa:	a801      	add	r0, sp, #4
 80009ac:	f7ff fe2e 	bl	800060c <SPI1SendNByteReceive1Byte>
 80009b0:	2814      	cmp	r0, #20
 80009b2:	d1f9      	bne.n	80009a8 <W5500OpenTCPServer+0x84>


	return 0;
 80009b4:	2000      	movs	r0, #0
}
 80009b6:	b004      	add	sp, #16
 80009b8:	bd70      	pop	{r4, r5, r6, pc}
	switch(socket_no){
 80009ba:	260c      	movs	r6, #12
			socket_sel_register = W5500_CP_BSB_S0_R; 		//socket 0 address
 80009bc:	2508      	movs	r5, #8
 80009be:	e7c2      	b.n	8000946 <W5500OpenTCPServer+0x22>
			break;
 80009c0:	26ec      	movs	r6, #236	; 0xec
			socket_sel_register = W5500_CP_BSB_S7_R; 		//socket 7 address
 80009c2:	25e8      	movs	r5, #232	; 0xe8
			break;
 80009c4:	e7bf      	b.n	8000946 <W5500OpenTCPServer+0x22>
			break;
 80009c6:	26ac      	movs	r6, #172	; 0xac
			socket_sel_register = W5500_CP_BSB_S5_R; 		//socket 5 address
 80009c8:	25a8      	movs	r5, #168	; 0xa8
			break;
 80009ca:	e7bc      	b.n	8000946 <W5500OpenTCPServer+0x22>
			break;
 80009cc:	26cc      	movs	r6, #204	; 0xcc
			socket_sel_register = W5500_CP_BSB_S6_R; 		//socket 6 address
 80009ce:	25c8      	movs	r5, #200	; 0xc8
			break;
 80009d0:	e7b9      	b.n	8000946 <W5500OpenTCPServer+0x22>
			break;
 80009d2:	264c      	movs	r6, #76	; 0x4c
			socket_sel_register = W5500_CP_BSB_S2_R;		//socket 2 address
 80009d4:	2548      	movs	r5, #72	; 0x48
			break;
 80009d6:	e7b6      	b.n	8000946 <W5500OpenTCPServer+0x22>
			break;
 80009d8:	266c      	movs	r6, #108	; 0x6c
			socket_sel_register = W5500_CP_BSB_S3_R; 		//socket 3 address
 80009da:	2568      	movs	r5, #104	; 0x68
			break;
 80009dc:	e7b3      	b.n	8000946 <W5500OpenTCPServer+0x22>
			break;
 80009de:	268c      	movs	r6, #140	; 0x8c
			socket_sel_register = W5500_CP_BSB_S4_R; 		//socket 4 address
 80009e0:	2588      	movs	r5, #136	; 0x88
			break;
 80009e2:	e7b0      	b.n	8000946 <W5500OpenTCPServer+0x22>
			return 1; 										//error
 80009e4:	2001      	movs	r0, #1
 80009e6:	e7e6      	b.n	80009b6 <W5500OpenTCPServer+0x92>

080009e8 <CheckInterruptStatus>:
//Check on which socket was occurred interrupt
//Returned value was equal to number on which socket occurred interrupt (0,1,2,3,4,5,6,7) or
//8 if multiple interrupt occurred at the same time
uint8_t CheckInterruptStatus(){
 80009e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009ec:	b082      	sub	sp, #8

	//temporary register, necessary to initialize to initial state
	uint8_t temp_array[5] = {0x00,0x00,0x00,0x00,0x00};
 80009ee:	2700      	movs	r7, #0
	//socket address selected register
	uint8_t socket_sel_register;

	//Read from socket interrupt register
	temp_array[0]	= MSB(W5500_CRB_SIR);
	temp_array[1]	= LSB(W5500_CRB_SIR);
 80009f0:	2317      	movs	r3, #23
	temp_array[2] 	= (W5500_CP_BSB_CR
					| W5500_CP_READ
					| W5500_CP_OM_VDLM); 				//set byte for reading from common register

	//read from SIR register
	temp_array[4] 	= SPI1SendNByteReceive1Byte(temp_array,3);
 80009f2:	4668      	mov	r0, sp
 80009f4:	2103      	movs	r1, #3
	uint8_t temp_array[5] = {0x00,0x00,0x00,0x00,0x00};
 80009f6:	9700      	str	r7, [sp, #0]
 80009f8:	f88d 7004 	strb.w	r7, [sp, #4]
	temp_array[1]	= LSB(W5500_CRB_SIR);
 80009fc:	f88d 3001 	strb.w	r3, [sp, #1]
	temp_array[4] 	= SPI1SendNByteReceive1Byte(temp_array,3);
 8000a00:	f7ff fe04 	bl	800060c <SPI1SendNByteReceive1Byte>

	switch(temp_array[4]){
 8000a04:	2808      	cmp	r0, #8
	temp_array[4] 	= SPI1SendNByteReceive1Byte(temp_array,3);
 8000a06:	f88d 0004 	strb.w	r0, [sp, #4]
	switch(temp_array[4]){
 8000a0a:	f000 808e 	beq.w	8000b2a <CheckInterruptStatus+0x142>
 8000a0e:	d950      	bls.n	8000ab2 <CheckInterruptStatus+0xca>
 8000a10:	2820      	cmp	r0, #32
 8000a12:	f000 8082 	beq.w	8000b1a <CheckInterruptStatus+0x132>
 8000a16:	d967      	bls.n	8000ae8 <CheckInterruptStatus+0x100>
 8000a18:	2840      	cmp	r0, #64	; 0x40
 8000a1a:	d05d      	beq.n	8000ad8 <CheckInterruptStatus+0xf0>
 8000a1c:	2880      	cmp	r0, #128	; 0x80
 8000a1e:	d14e      	bne.n	8000abe <CheckInterruptStatus+0xd6>

	//interrupt occurred on socket 7
	case 128:
		socket_num 			= 7;
		socket_sel_register = W5500_CP_BSB_S7_R; 		//socket 7 address
		break;
 8000a20:	257f      	movs	r5, #127	; 0x7f
 8000a22:	f04f 0aec 	mov.w	sl, #236	; 0xec
		socket_sel_register = W5500_CP_BSB_S7_R; 		//socket 7 address
 8000a26:	f04f 09e8 	mov.w	r9, #232	; 0xe8
		socket_num 			= 7;
 8000a2a:	2707      	movs	r7, #7
		return 8;
	}
	////////////////TESTNO ZA RAZJASNITEV DELOVANJA PREKINITEV

	//read interrupt flag from Sn_IR register
	temp_array[0]	= MSB(W5500_SR_IR);
 8000a2c:	2400      	movs	r4, #0
	temp_array[1]	= LSB(W5500_SR_IR);
 8000a2e:	2602      	movs	r6, #2
	temp_array[2] 	= (socket_sel_register
					| W5500_CP_READ
					| W5500_CP_OM_VDLM); 				//set byte for reading from socket n register

	//read from Sn_IR register
	SPI1SendNByteReceive1Byte(temp_array,3);
 8000a30:	2103      	movs	r1, #3
 8000a32:	4668      	mov	r0, sp
	temp_array[0]	= MSB(W5500_SR_IR);
	temp_array[1]	= LSB(W5500_SR_IR);
	temp_array[2] 	= (socket_sel_register
					| W5500_CP_WRITE
					| W5500_CP_OM_VDLM); 				//set byte for  writing in to socket n register
	temp_array[3] 	= 0x03;
 8000a34:	f04f 0803 	mov.w	r8, #3
	temp_array[1]	= LSB(W5500_SR_IR);
 8000a38:	f88d 6001 	strb.w	r6, [sp, #1]
	temp_array[2] 	= (socket_sel_register
 8000a3c:	f88d 9002 	strb.w	r9, [sp, #2]
	temp_array[0]	= MSB(W5500_SR_IR);
 8000a40:	f88d 4000 	strb.w	r4, [sp]
	SPI1SendNByteReceive1Byte(temp_array,3);
 8000a44:	f7ff fde2 	bl	800060c <SPI1SendNByteReceive1Byte>

	//write in to Sn_IR register
	SPI1SendNByte(temp_array,4);
 8000a48:	4668      	mov	r0, sp
 8000a4a:	2104      	movs	r1, #4
	temp_array[1]	= LSB(W5500_SR_IR);
 8000a4c:	f88d 6001 	strb.w	r6, [sp, #1]
	temp_array[0]	= MSB(W5500_SR_IR);
 8000a50:	f88d 4000 	strb.w	r4, [sp]
	temp_array[2] 	= (socket_sel_register
 8000a54:	f88d a002 	strb.w	sl, [sp, #2]
	temp_array[3] 	= 0x03;
 8000a58:	f88d 8003 	strb.w	r8, [sp, #3]
	SPI1SendNByte(temp_array,4);
 8000a5c:	f7ff fdb4 	bl	80005c8 <SPI1SendNByte>
	temp_array[2] 	= (socket_sel_register
					| W5500_CP_READ
					| W5500_CP_OM_VDLM); 				//set byte for reading from socket n register

	//read from Sn_IR register
	SPI1SendNByteReceive1Byte(temp_array,3);
 8000a60:	4641      	mov	r1, r8
 8000a62:	4668      	mov	r0, sp
	temp_array[1]	= LSB(W5500_SR_IR);
 8000a64:	f88d 6001 	strb.w	r6, [sp, #1]
	temp_array[0]	= MSB(W5500_SR_IR);
 8000a68:	f88d 4000 	strb.w	r4, [sp]
	temp_array[2] 	= (socket_sel_register
 8000a6c:	f88d 9002 	strb.w	r9, [sp, #2]
	SPI1SendNByteReceive1Byte(temp_array,3);
 8000a70:	f7ff fdcc 	bl	800060c <SPI1SendNByteReceive1Byte>
	temp_array[0]	= MSB(W5500_CRB_SIR);
	temp_array[1]	= LSB(W5500_CRB_SIR);
	temp_array[2] 	= (W5500_CP_BSB_CR
					| W5500_CP_WRITE
					| W5500_CP_OM_VDLM); 					//set byte for reading from common register
	temp_array[3] 	= temp_array[4] & ~(1 << socket_num);
 8000a74:	f89d 2004 	ldrb.w	r2, [sp, #4]
	temp_array[0]	= MSB(W5500_CRB_SIR);
 8000a78:	f88d 4000 	strb.w	r4, [sp]
	temp_array[2] 	= (W5500_CP_BSB_CR
 8000a7c:	2304      	movs	r3, #4
	temp_array[3] 	= temp_array[4] & ~(1 << socket_num);
 8000a7e:	4015      	ands	r5, r2

	//write thru spi communication
	SPI1SendNByte(temp_array,4);
 8000a80:	4619      	mov	r1, r3
	temp_array[1]	= LSB(W5500_CRB_SIR);
 8000a82:	2617      	movs	r6, #23
	SPI1SendNByte(temp_array,4);
 8000a84:	4668      	mov	r0, sp
	temp_array[2] 	= (W5500_CP_BSB_CR
 8000a86:	f88d 3002 	strb.w	r3, [sp, #2]
	temp_array[3] 	= temp_array[4] & ~(1 << socket_num);
 8000a8a:	f88d 5003 	strb.w	r5, [sp, #3]
	temp_array[1]	= LSB(W5500_CRB_SIR);
 8000a8e:	f88d 6001 	strb.w	r6, [sp, #1]
	SPI1SendNByte(temp_array,4);
 8000a92:	f7ff fd99 	bl	80005c8 <SPI1SendNByte>
	temp_array[2] 	= (W5500_CP_BSB_CR
					| W5500_CP_READ
					| W5500_CP_OM_VDLM); 				//set byte for reading from common register

	//read from SIR register
	SPI1SendNByteReceive1Byte(temp_array,3);
 8000a96:	4641      	mov	r1, r8
 8000a98:	4668      	mov	r0, sp
	temp_array[0]	= MSB(W5500_CRB_SIR);
 8000a9a:	f88d 4000 	strb.w	r4, [sp]
	temp_array[1]	= LSB(W5500_CRB_SIR);
 8000a9e:	f88d 6001 	strb.w	r6, [sp, #1]
	temp_array[2] 	= (W5500_CP_BSB_CR
 8000aa2:	f88d 4002 	strb.w	r4, [sp, #2]
	SPI1SendNByteReceive1Byte(temp_array,3);
 8000aa6:	f7ff fdb1 	bl	800060c <SPI1SendNByteReceive1Byte>

	////////////////TESTNO ZA RAZJASNITEV DELOVANJA PREKINITEV

	return socket_num;
}
 8000aaa:	4638      	mov	r0, r7
 8000aac:	b002      	add	sp, #8
 8000aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch(temp_array[4]){
 8000ab2:	2802      	cmp	r0, #2
 8000ab4:	d022      	beq.n	8000afc <CheckInterruptStatus+0x114>
 8000ab6:	2804      	cmp	r0, #4
 8000ab8:	d006      	beq.n	8000ac8 <CheckInterruptStatus+0xe0>
 8000aba:	2801      	cmp	r0, #1
 8000abc:	d026      	beq.n	8000b0c <CheckInterruptStatus+0x124>
		return 8;
 8000abe:	2708      	movs	r7, #8
}
 8000ac0:	4638      	mov	r0, r7
 8000ac2:	b002      	add	sp, #8
 8000ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		break;
 8000ac8:	f06f 0504 	mvn.w	r5, #4
 8000acc:	f04f 0a4c 	mov.w	sl, #76	; 0x4c
		socket_sel_register = W5500_CP_BSB_S2_R; 		//socket 2 address
 8000ad0:	f04f 0948 	mov.w	r9, #72	; 0x48
		socket_num 			= 2;
 8000ad4:	2702      	movs	r7, #2
		break;
 8000ad6:	e7a9      	b.n	8000a2c <CheckInterruptStatus+0x44>
		break;
 8000ad8:	f06f 0540 	mvn.w	r5, #64	; 0x40
 8000adc:	f04f 0acc 	mov.w	sl, #204	; 0xcc
		socket_sel_register = W5500_CP_BSB_S6_R; 		//socket 6 address
 8000ae0:	f04f 09c8 	mov.w	r9, #200	; 0xc8
		socket_num 			= 6;
 8000ae4:	2706      	movs	r7, #6
		break;
 8000ae6:	e7a1      	b.n	8000a2c <CheckInterruptStatus+0x44>
	switch(temp_array[4]){
 8000ae8:	2810      	cmp	r0, #16
 8000aea:	d1e8      	bne.n	8000abe <CheckInterruptStatus+0xd6>
		break;
 8000aec:	f06f 0510 	mvn.w	r5, #16
 8000af0:	f04f 0a8c 	mov.w	sl, #140	; 0x8c
		socket_sel_register = W5500_CP_BSB_S4_R; 		//socket 4 address
 8000af4:	f04f 0988 	mov.w	r9, #136	; 0x88
		socket_num 			= 4;
 8000af8:	2704      	movs	r7, #4
		break;
 8000afa:	e797      	b.n	8000a2c <CheckInterruptStatus+0x44>
	switch(temp_array[4]){
 8000afc:	f06f 0502 	mvn.w	r5, #2
 8000b00:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
		socket_sel_register = W5500_CP_BSB_S1_R; 		//socket 1 address
 8000b04:	f04f 0928 	mov.w	r9, #40	; 0x28
		socket_num 			= 1;
 8000b08:	2701      	movs	r7, #1
 8000b0a:	e78f      	b.n	8000a2c <CheckInterruptStatus+0x44>
	switch(temp_array[4]){
 8000b0c:	f06f 0501 	mvn.w	r5, #1
 8000b10:	f04f 0a0c 	mov.w	sl, #12
		socket_sel_register = W5500_CP_BSB_S0_R; 		//socket 0 address
 8000b14:	f04f 0908 	mov.w	r9, #8
 8000b18:	e788      	b.n	8000a2c <CheckInterruptStatus+0x44>
		break;
 8000b1a:	f06f 0520 	mvn.w	r5, #32
 8000b1e:	f04f 0aac 	mov.w	sl, #172	; 0xac
		socket_sel_register = W5500_CP_BSB_S5_R; 		//socket 5 address
 8000b22:	f04f 09a8 	mov.w	r9, #168	; 0xa8
		socket_num 			= 5;
 8000b26:	2705      	movs	r7, #5
		break;
 8000b28:	e780      	b.n	8000a2c <CheckInterruptStatus+0x44>
		break;
 8000b2a:	f06f 0508 	mvn.w	r5, #8
 8000b2e:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
		socket_sel_register = W5500_CP_BSB_S3_R; 		//socket 3 address
 8000b32:	f04f 0968 	mov.w	r9, #104	; 0x68
		socket_num 			= 3;
 8000b36:	2703      	movs	r7, #3
		break;
 8000b38:	e778      	b.n	8000a2c <CheckInterruptStatus+0x44>
 8000b3a:	bf00      	nop

08000b3c <main>:
uint8_t TCP_sorket_num 			= 0;								//TCP socket number form 0 to 7

//
//MAIN
//
int main(void){
 8000b3c:	b570      	push	{r4, r5, r6, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
  uint32_t ret_code_from_sysTick; 	//return code from SysTick_Config function 1 for error see core_cm4.h
  uint8_t error_hand;

  volatile uint16_t adc_data[16];

  volatile uint16_t i = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f8ad 3006 	strh.w	r3, [sp, #6]

  //volatile float temperature = 0.0;
  //volatile uint16_t temp = 0;

  //Init GPIOA
  InitGPIO();
 8000b46:	f7ff fbcb 	bl	80002e0 <InitGPIO>
  //Init SPI3
  SPI3Init();
 8000b4a:	f7ff fd93 	bl	8000674 <SPI3Init>
  //Init SPI1
  SPI1Init();
 8000b4e:	f7ff fcfb 	bl	8000548 <SPI1Init>
  //Init ADC1 for temp sensor
  ADC1TempInit();
 8000b52:	f7ff fb39 	bl	80001c8 <ADC1TempInit>
  //Initialize DAM for ADC1 temperature sensor
  DMA2ADC1Init(16, (uint32_t *) &ADC1 -> DR, (uint32_t *) &adc_data);
 8000b56:	aa02      	add	r2, sp, #8
 8000b58:	4924      	ldr	r1, [pc, #144]	; (8000bec <main+0xb0>)
 8000b5a:	2010      	movs	r0, #16
 8000b5c:	f7ff fb62 	bl	8000224 <DMA2ADC1Init>
  //Enable interrupt for DMA2 stream 0
  DMA2Stream0InterruptEnable();
 8000b60:	f7ff fbb4 	bl	80002cc <DMA2Stream0InterruptEnable>

  //W5500 initialize
  //W5500Init();
  if(W5500SpiConnCheck() == 0){
 8000b64:	f7ff fdc0 	bl	80006e8 <W5500SpiConnCheck>
 8000b68:	b110      	cbz	r0, 8000b70 <main+0x34>
	  //Enable SPI3
	  //SPI3 -> CR1 	|= SPI_CR1_SPE;
	  //Disable SPI3
	  //SPI3 -> CR1 	&= ~(SPI_CR1_SPE);
  }
}
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	b00a      	add	sp, #40	; 0x28
 8000b6e:	bd70      	pop	{r4, r5, r6, pc}
	  W5500InitV2(ip, gateway, submask, mac);
 8000b70:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <main+0xb4>)
 8000b72:	4a20      	ldr	r2, [pc, #128]	; (8000bf4 <main+0xb8>)
 8000b74:	4920      	ldr	r1, [pc, #128]	; (8000bf8 <main+0xbc>)
 8000b76:	4821      	ldr	r0, [pc, #132]	; (8000bfc <main+0xc0>)
	  error_hand = W5500InitTCP(TCP_sorket_num,1024,2,2);
 8000b78:	4c21      	ldr	r4, [pc, #132]	; (8000c00 <main+0xc4>)
	  W5500InitV2(ip, gateway, submask, mac);
 8000b7a:	f7ff fdc9 	bl	8000710 <W5500InitV2>
	  error_hand = W5500InitTCP(TCP_sorket_num,1024,2,2);
 8000b7e:	2302      	movs	r3, #2
 8000b80:	7820      	ldrb	r0, [r4, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b88:	f7ff fe54 	bl	8000834 <W5500InitTCP>
	  if(error_hand !=0)return 0;
 8000b8c:	2800      	cmp	r0, #0
 8000b8e:	d1ec      	bne.n	8000b6a <main+0x2e>
	  error_hand = W5500OpenTCPServer(TCP_sorket_num);
 8000b90:	7820      	ldrb	r0, [r4, #0]
 8000b92:	f7ff fec7 	bl	8000924 <W5500OpenTCPServer>
	  if(error_hand !=0)return 0;
 8000b96:	2800      	cmp	r0, #0
 8000b98:	d1e7      	bne.n	8000b6a <main+0x2e>
  ret_code_from_sysTick = SysTick_Config(SystemCoreClock / 1000000);
 8000b9a:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <main+0xc8>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000b9c:	4a1a      	ldr	r2, [pc, #104]	; (8000c08 <main+0xcc>)
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000b9e:	4d1b      	ldr	r5, [pc, #108]	; (8000c0c <main+0xd0>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4c1b      	ldr	r4, [pc, #108]	; (8000c10 <main+0xd4>)
  DMA2_Stream0 	-> CR		|= (DMA_SxCR_EN);
 8000ba4:	491b      	ldr	r1, [pc, #108]	; (8000c14 <main+0xd8>)
  ret_code_from_sysTick = SysTick_Config(SystemCoreClock / 1000000);
 8000ba6:	fbb3 f3f4 	udiv	r3, r3, r4
 8000baa:	26f0      	movs	r6, #240	; 0xf0
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000bac:	3b01      	subs	r3, #1
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bae:	2407      	movs	r4, #7
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000bb0:	6053      	str	r3, [r2, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000bb2:	f885 6023 	strb.w	r6, [r5, #35]	; 0x23
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000bb6:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb8:	6014      	str	r4, [r2, #0]
  DMA2_Stream0 	-> CR		|= (DMA_SxCR_EN);
 8000bba:	680a      	ldr	r2, [r1, #0]
  ADC1 			-> CR2 		|= (ADC_CR2_DMA);
 8000bbc:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <main+0xdc>)
  DMA2_Stream0 	-> CR		|= (DMA_SxCR_EN);
 8000bbe:	f042 0201 	orr.w	r2, r2, #1
 8000bc2:	600a      	str	r2, [r1, #0]
  ADC1 			-> CR2 		|= (ADC_CR2_DMA);
 8000bc4:	689a      	ldr	r2, [r3, #8]
 8000bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bca:	609a      	str	r2, [r3, #8]
  ADC1 	-> CR2 		|= ADC_CR2_ADON;
 8000bcc:	689a      	ldr	r2, [r3, #8]
 8000bce:	f042 0201 	orr.w	r2, r2, #1
 8000bd2:	609a      	str	r2, [r3, #8]
  ADC1 			-> CR2 		|= ADC_CR2_SWSTART;
 8000bd4:	689a      	ldr	r2, [r3, #8]
 8000bd6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000bda:	609a      	str	r2, [r3, #8]
	  i++;
 8000bdc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000be0:	3301      	adds	r3, #1
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8000be8:	e7f8      	b.n	8000bdc <main+0xa0>
 8000bea:	bf00      	nop
 8000bec:	4001204c 	.word	0x4001204c
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	20000010 	.word	0x20000010
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	20000004 	.word	0x20000004
 8000c00:	20000034 	.word	0x20000034
 8000c04:	20000014 	.word	0x20000014
 8000c08:	e000e010 	.word	0xe000e010
 8000c0c:	e000ed00 	.word	0xe000ed00
 8000c10:	000f4240 	.word	0x000f4240
 8000c14:	40026410 	.word	0x40026410
 8000c18:	40012000 	.word	0x40012000

08000c1c <EXTI3_IRQHandler>:

//External interrupt handler on line 3
void EXTI3_IRQHandler(void){
 8000c1c:	b508      	push	{r3, lr}
	//Check if interrupt occurred in W5500 side
	if((EXTI -> PR & EXTI_PR_PR3) != 0){
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <EXTI3_IRQHandler+0x34>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	071b      	lsls	r3, r3, #28
 8000c24:	d400      	bmi.n	8000c28 <EXTI3_IRQHandler+0xc>
 8000c26:	bd08      	pop	{r3, pc}

		if(CheckInterruptStatus() == 0){ //check on which socket occurred interrupt
 8000c28:	f7ff fede 	bl	80009e8 <CheckInterruptStatus>
 8000c2c:	b950      	cbnz	r0, 8000c44 <EXTI3_IRQHandler+0x28>

			if((GPIOD -> ODR & GPIO_ODR_ODR_13) != 0){
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <EXTI3_IRQHandler+0x38>)
 8000c30:	695a      	ldr	r2, [r3, #20]
 8000c32:	f412 5f00 	tst.w	r2, #8192	; 0x2000

				GPIOD -> ODR	&= ~(GPIO_ODR_ODR_13); 	//LED3 off
 8000c36:	695a      	ldr	r2, [r3, #20]
 8000c38:	bf14      	ite	ne
 8000c3a:	f422 5200 	bicne.w	r2, r2, #8192	; 0x2000
			}else{

				GPIOD -> ODR	|= GPIO_ODR_ODR_13; 	//LED3 on
 8000c3e:	f442 5200 	orreq.w	r2, r2, #8192	; 0x2000
 8000c42:	615a      	str	r2, [r3, #20]
			}
		}

		EXTI -> PR |= EXTI_PR_PR3; 	//Clear flag this is necessary
 8000c44:	4a02      	ldr	r2, [pc, #8]	; (8000c50 <EXTI3_IRQHandler+0x34>)
 8000c46:	6953      	ldr	r3, [r2, #20]
 8000c48:	f043 0308 	orr.w	r3, r3, #8
 8000c4c:	6153      	str	r3, [r2, #20]
 8000c4e:	bd08      	pop	{r3, pc}
 8000c50:	40013c00 	.word	0x40013c00
 8000c54:	40020c00 	.word	0x40020c00

08000c58 <EXTI0_IRQHandler>:
	}
}

//External interrupt handler on line 0
void EXTI0_IRQHandler(void){
	if((EXTI -> PR & EXTI_PR_PR0) != 0){
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <EXTI0_IRQHandler+0x2c>)
 8000c5a:	695b      	ldr	r3, [r3, #20]
 8000c5c:	07db      	lsls	r3, r3, #31
 8000c5e:	d50f      	bpl.n	8000c80 <EXTI0_IRQHandler+0x28>
		if((GPIOD -> ODR & GPIO_ODR_ODR_13) != 0){
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <EXTI0_IRQHandler+0x30>)
 8000c62:	695a      	ldr	r2, [r3, #20]
 8000c64:	f412 5f00 	tst.w	r2, #8192	; 0x2000

			GPIOD -> ODR	&= ~(GPIO_ODR_ODR_13); 	//LED3 off
 8000c68:	695a      	ldr	r2, [r3, #20]
 8000c6a:	bf14      	ite	ne
 8000c6c:	f422 5200 	bicne.w	r2, r2, #8192	; 0x2000
		}else{

			GPIOD -> ODR	|= GPIO_ODR_ODR_13; 	//LED3 on
 8000c70:	f442 5200 	orreq.w	r2, r2, #8192	; 0x2000
 8000c74:	615a      	str	r2, [r3, #20]
		}
		EXTI -> PR |= EXTI_PR_PR0; 	//Clear flag this is necessary
 8000c76:	4a03      	ldr	r2, [pc, #12]	; (8000c84 <EXTI0_IRQHandler+0x2c>)
 8000c78:	6953      	ldr	r3, [r2, #20]
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	6153      	str	r3, [r2, #20]
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40013c00 	.word	0x40013c00
 8000c88:	40020c00 	.word	0x40020c00

08000c8c <DMA2_Stream0_IRQHandler>:

//DMA2 interrupt handler on stream 0
void DMA2_Stream0_IRQHandler(void){

	//Check if interrupt was ocured on stream 0 transfer complete
	if(DMA2 -> LISR & DMA_LISR_TCIF0){
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <DMA2_Stream0_IRQHandler+0x48>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	069b      	lsls	r3, r3, #26
 8000c92:	d50a      	bpl.n	8000caa <DMA2_Stream0_IRQHandler+0x1e>

		if((GPIOD -> ODR & GPIO_ODR_ODR_13) != 0){
 8000c94:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <DMA2_Stream0_IRQHandler+0x4c>)
 8000c96:	695a      	ldr	r2, [r3, #20]
 8000c98:	f412 5f00 	tst.w	r2, #8192	; 0x2000

			GPIOD -> ODR	&= ~(GPIO_ODR_ODR_13); 	//LED3 off
 8000c9c:	695a      	ldr	r2, [r3, #20]
 8000c9e:	bf14      	ite	ne
 8000ca0:	f422 5200 	bicne.w	r2, r2, #8192	; 0x2000
		}else{

			GPIOD -> ODR	|= GPIO_ODR_ODR_13; 	//LED3 on
 8000ca4:	f442 5200 	orreq.w	r2, r2, #8192	; 0x2000
 8000ca8:	615a      	str	r2, [r3, #20]
		}
	}
	DMA2 -> LIFCR	|= DMA_LIFCR_CTCIF0; 		//Clear interrupt flag
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <DMA2_Stream0_IRQHandler+0x48>)
	DMA2 -> LIFCR	|= DMA_LIFCR_CHTIF0; 		//Clear interrupt flag
	DMA2_Stream0 	-> CR		&= ~(DMA_SxCR_EN);
 8000cac:	480b      	ldr	r0, [pc, #44]	; (8000cdc <DMA2_Stream0_IRQHandler+0x50>)
	DMA2 -> LIFCR	|= DMA_LIFCR_CTCIF0; 		//Clear interrupt flag
 8000cae:	689a      	ldr	r2, [r3, #8]
	ADC1 			-> CR2 		&= ~(ADC_CR2_DMA);
 8000cb0:	490b      	ldr	r1, [pc, #44]	; (8000ce0 <DMA2_Stream0_IRQHandler+0x54>)
	DMA2 -> LIFCR	|= DMA_LIFCR_CTCIF0; 		//Clear interrupt flag
 8000cb2:	f042 0220 	orr.w	r2, r2, #32
 8000cb6:	609a      	str	r2, [r3, #8]
	DMA2 -> LIFCR	|= DMA_LIFCR_CHTIF0; 		//Clear interrupt flag
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	f042 0210 	orr.w	r2, r2, #16
 8000cbe:	609a      	str	r2, [r3, #8]
	DMA2_Stream0 	-> CR		&= ~(DMA_SxCR_EN);
 8000cc0:	6803      	ldr	r3, [r0, #0]
 8000cc2:	f023 0301 	bic.w	r3, r3, #1
 8000cc6:	6003      	str	r3, [r0, #0]
	ADC1 			-> CR2 		&= ~(ADC_CR2_DMA);
 8000cc8:	688b      	ldr	r3, [r1, #8]
 8000cca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cce:	608b      	str	r3, [r1, #8]
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40026400 	.word	0x40026400
 8000cd8:	40020c00 	.word	0x40020c00
 8000cdc:	40026410 	.word	0x40026410
 8000ce0:	40012000 	.word	0x40012000

08000ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ce8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cea:	e003      	b.n	8000cf4 <LoopCopyDataInit>

08000cec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cf0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cf2:	3104      	adds	r1, #4

08000cf4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cf4:	480b      	ldr	r0, [pc, #44]	; (8000d24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cf8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cfa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cfc:	d3f6      	bcc.n	8000cec <CopyDataInit>
  ldr  r2, =_sbss
 8000cfe:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d00:	e002      	b.n	8000d08 <LoopFillZerobss>

08000d02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d04:	f842 3b04 	str.w	r3, [r2], #4

08000d08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d0c:	d3f9      	bcc.n	8000d02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d0e:	f000 f82b 	bl	8000d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d12:	f000 f8a7 	bl	8000e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d16:	f7ff ff11 	bl	8000b3c <main>
  bx  lr    
 8000d1a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d1c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d20:	08000ecc 	.word	0x08000ecc
  ldr  r0, =_sdata
 8000d24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d28:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8000d2c:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8000d30:	2000003c 	.word	0x2000003c

08000d34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <ADC_IRQHandler>
	...

08000d38 <NMI_Handler>:
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000d3c:	e7fe      	b.n	8000d3c <HardFault_Handler>
 8000d3e:	bf00      	nop

08000d40 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000d40:	e7fe      	b.n	8000d40 <MemManage_Handler>
 8000d42:	bf00      	nop

08000d44 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000d44:	e7fe      	b.n	8000d44 <BusFault_Handler>
 8000d46:	bf00      	nop

08000d48 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000d48:	e7fe      	b.n	8000d48 <UsageFault_Handler>
 8000d4a:	bf00      	nop

08000d4c <SVC_Handler>:
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <DebugMon_Handler>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <SysTick_Handler>:
  * @retval None
  */
void SysTick_Handler(void)
{
//*  TimingDelay_Decrement(); */
	delay_cnt--;
 8000d58:	4a02      	ldr	r2, [pc, #8]	; (8000d64 <SysTick_Handler+0xc>)
 8000d5a:	6813      	ldr	r3, [r2, #0]
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000038 	.word	0x20000038

08000d68 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d68:	4938      	ldr	r1, [pc, #224]	; (8000e4c <SystemInit+0xe4>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000d6a:	4b39      	ldr	r3, [pc, #228]	; (8000e50 <SystemInit+0xe8>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d6c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000d70:	4838      	ldr	r0, [pc, #224]	; (8000e54 <SystemInit+0xec>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d72:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000d76:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8000d7a:	681a      	ldr	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000d7c:	2100      	movs	r1, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000d7e:	f042 0201 	orr.w	r2, r2, #1
 8000d82:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000d84:	6099      	str	r1, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000d8c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d90:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8000d92:	6058      	str	r0, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d94:	681a      	ldr	r2, [r3, #0]
{
 8000d96:	b082      	sub	sp, #8
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d9c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000d9e:	60d9      	str	r1, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000da0:	9100      	str	r1, [sp, #0]
 8000da2:	9101      	str	r1, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000daa:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000dac:	461a      	mov	r2, r3
 8000dae:	e003      	b.n	8000db8 <SystemInit+0x50>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000db0:	9b00      	ldr	r3, [sp, #0]
 8000db2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000db6:	d009      	beq.n	8000dcc <SystemInit+0x64>
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000db8:	6813      	ldr	r3, [r2, #0]
 8000dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dbe:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 8000dc0:	9b00      	ldr	r3, [sp, #0]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000dc6:	9b01      	ldr	r3, [sp, #4]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d0f1      	beq.n	8000db0 <SystemInit+0x48>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000dcc:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <SystemInit+0xe8>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8000dd4:	bf18      	it	ne
 8000dd6:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000dd8:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000dda:	9b01      	ldr	r3, [sp, #4]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d005      	beq.n	8000dec <SystemInit+0x84>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000de0:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <SystemInit+0xe4>)
 8000de2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000de6:	609a      	str	r2, [r3, #8]
}
 8000de8:	b002      	add	sp, #8
 8000dea:	4770      	bx	lr
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000dec:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <SystemInit+0xe8>)
    PWR->CR |= PWR_CR_VOS;
 8000dee:	491a      	ldr	r1, [pc, #104]	; (8000e58 <SystemInit+0xf0>)
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000df0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000df2:	481a      	ldr	r0, [pc, #104]	; (8000e5c <SystemInit+0xf4>)
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000df4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000df8:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000dfa:	680a      	ldr	r2, [r1, #0]
 8000dfc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000e00:	600a      	str	r2, [r1, #0]
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000e02:	689a      	ldr	r2, [r3, #8]
 8000e04:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000e06:	689a      	ldr	r2, [r3, #8]
 8000e08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e0c:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000e0e:	689a      	ldr	r2, [r3, #8]
 8000e10:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000e14:	609a      	str	r2, [r3, #8]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000e16:	6058      	str	r0, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000e1e:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	0192      	lsls	r2, r2, #6
 8000e24:	d5fc      	bpl.n	8000e20 <SystemInit+0xb8>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000e26:	490e      	ldr	r1, [pc, #56]	; (8000e60 <SystemInit+0xf8>)
    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    RCC->CFGR |= RCC_CFGR_SW_PLL;

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000e28:	4a09      	ldr	r2, [pc, #36]	; (8000e50 <SystemInit+0xe8>)
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000e2a:	f240 7005 	movw	r0, #1797	; 0x705
 8000e2e:	6008      	str	r0, [r1, #0]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000e30:	6899      	ldr	r1, [r3, #8]
 8000e32:	f021 0103 	bic.w	r1, r1, #3
 8000e36:	6099      	str	r1, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000e38:	6899      	ldr	r1, [r3, #8]
 8000e3a:	f041 0102 	orr.w	r1, r1, #2
 8000e3e:	6099      	str	r1, [r3, #8]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000e40:	6893      	ldr	r3, [r2, #8]
 8000e42:	f003 030c 	and.w	r3, r3, #12
 8000e46:	2b08      	cmp	r3, #8
 8000e48:	d1fa      	bne.n	8000e40 <SystemInit+0xd8>
 8000e4a:	e7c9      	b.n	8000de0 <SystemInit+0x78>
 8000e4c:	e000ed00 	.word	0xe000ed00
 8000e50:	40023800 	.word	0x40023800
 8000e54:	24003010 	.word	0x24003010
 8000e58:	40007000 	.word	0x40007000
 8000e5c:	07405408 	.word	0x07405408
 8000e60:	40023c00 	.word	0x40023c00

08000e64 <__libc_init_array>:
 8000e64:	b570      	push	{r4, r5, r6, lr}
 8000e66:	4e0d      	ldr	r6, [pc, #52]	; (8000e9c <__libc_init_array+0x38>)
 8000e68:	4c0d      	ldr	r4, [pc, #52]	; (8000ea0 <__libc_init_array+0x3c>)
 8000e6a:	1ba4      	subs	r4, r4, r6
 8000e6c:	10a4      	asrs	r4, r4, #2
 8000e6e:	2500      	movs	r5, #0
 8000e70:	42a5      	cmp	r5, r4
 8000e72:	d109      	bne.n	8000e88 <__libc_init_array+0x24>
 8000e74:	4e0b      	ldr	r6, [pc, #44]	; (8000ea4 <__libc_init_array+0x40>)
 8000e76:	4c0c      	ldr	r4, [pc, #48]	; (8000ea8 <__libc_init_array+0x44>)
 8000e78:	f000 f818 	bl	8000eac <_init>
 8000e7c:	1ba4      	subs	r4, r4, r6
 8000e7e:	10a4      	asrs	r4, r4, #2
 8000e80:	2500      	movs	r5, #0
 8000e82:	42a5      	cmp	r5, r4
 8000e84:	d105      	bne.n	8000e92 <__libc_init_array+0x2e>
 8000e86:	bd70      	pop	{r4, r5, r6, pc}
 8000e88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e8c:	4798      	blx	r3
 8000e8e:	3501      	adds	r5, #1
 8000e90:	e7ee      	b.n	8000e70 <__libc_init_array+0xc>
 8000e92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e96:	4798      	blx	r3
 8000e98:	3501      	adds	r5, #1
 8000e9a:	e7f2      	b.n	8000e82 <__libc_init_array+0x1e>
 8000e9c:	08000ec4 	.word	0x08000ec4
 8000ea0:	08000ec4 	.word	0x08000ec4
 8000ea4:	08000ec4 	.word	0x08000ec4
 8000ea8:	08000ec8 	.word	0x08000ec8

08000eac <_init>:
 8000eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eae:	bf00      	nop
 8000eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eb2:	bc08      	pop	{r3}
 8000eb4:	469e      	mov	lr, r3
 8000eb6:	4770      	bx	lr

08000eb8 <_fini>:
 8000eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eba:	bf00      	nop
 8000ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ebe:	bc08      	pop	{r3}
 8000ec0:	469e      	mov	lr, r3
 8000ec2:	4770      	bx	lr
