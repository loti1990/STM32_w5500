
Test_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001af4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001c7c  08001c7c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001c7c  08001c7c  00011c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001c80  08001c80  00011c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  08001c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
  7 .bss          00001024  20000018  20000018  00020018  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000103c  2000103c  00020018  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_info   000043bd  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000e06  00000000  00000000  00024405  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000250  00000000  00000000  00025210  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002e0  00000000  00000000  00025460  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001679  00000000  00000000  00025740  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000010fe  00000000  00000000  00026db9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00027eb7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000614  00000000  00000000  00027f34  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00000bd1  00000000  00000000  00028548  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000003f  00000000  00000000  00029119  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001c64 	.word	0x08001c64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08001c64 	.word	0x08001c64

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2uiz>:
 800095c:	004a      	lsls	r2, r1, #1
 800095e:	d211      	bcs.n	8000984 <__aeabi_d2uiz+0x28>
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d211      	bcs.n	800098a <__aeabi_d2uiz+0x2e>
 8000966:	d50d      	bpl.n	8000984 <__aeabi_d2uiz+0x28>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d40e      	bmi.n	8000990 <__aeabi_d2uiz+0x34>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	fa23 f002 	lsr.w	r0, r3, r2
 8000982:	4770      	bx	lr
 8000984:	f04f 0000 	mov.w	r0, #0
 8000988:	4770      	bx	lr
 800098a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800098e:	d102      	bne.n	8000996 <__aeabi_d2uiz+0x3a>
 8000990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000994:	4770      	bx	lr
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	4770      	bx	lr

0800099c <ADC1TempInit>:
#include "ADC.h"

//Initialize ADC1 for temperature measurement
void ADC1TempInit(){

	RCC		-> APB2ENR 	|= RCC_APB2ENR_ADC1EN;	//ADC1 clock enable default APB2 clock was 84 MHz
 800099c:	4813      	ldr	r0, [pc, #76]	; (80009ec <ADC1TempInit+0x50>)

	ADC1 	-> CR2 		&= ~(ADC_CR2_ADON);		//Turn off ADC1
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <ADC1TempInit+0x54>)
	RCC		-> APB2ENR 	|= RCC_APB2ENR_ADC1EN;	//ADC1 clock enable default APB2 clock was 84 MHz
 80009a0:	6c41      	ldr	r1, [r0, #68]	; 0x44

	ADC 	-> CCR 		|= ADC_CCR_TSVREFE;		//Enable temperature sensor
 80009a2:	4a14      	ldr	r2, [pc, #80]	; (80009f4 <ADC1TempInit+0x58>)
	RCC		-> APB2ENR 	|= RCC_APB2ENR_ADC1EN;	//ADC1 clock enable default APB2 clock was 84 MHz
 80009a4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80009a8:	6441      	str	r1, [r0, #68]	; 0x44
	ADC1 	-> CR2 		&= ~(ADC_CR2_ADON);		//Turn off ADC1
 80009aa:	6899      	ldr	r1, [r3, #8]
 80009ac:	f021 0101 	bic.w	r1, r1, #1
 80009b0:	6099      	str	r1, [r3, #8]
	ADC 	-> CCR 		|= ADC_CCR_TSVREFE;		//Enable temperature sensor
 80009b2:	6851      	ldr	r1, [r2, #4]
 80009b4:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009b8:	6051      	str	r1, [r2, #4]

	ADC 	-> CCR 		|= ADC_CCR_ADCPRE_0; 	//For all ADC clock was set to APB2/4(prescaler) = 84 MHz /4 = 21 MHz (1 cycle was 48 ns)
 80009ba:	6851      	ldr	r1, [r2, #4]
 80009bc:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80009c0:	6051      	str	r1, [r2, #4]

	ADC1 	-> SQR1		&= ~(ADC_SQR1_L_0 | ADC_SQR1_L_1 | ADC_SQR1_L_2 | ADC_SQR1_L_3); 	// One conversion
 80009c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009c4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80009c8:	62da      	str	r2, [r3, #44]	; 0x2c

	ADC1	-> SQR3 	|= ADC_SQR3_SQ1_4; 		//Select Channel 16 (temp sensor) to be converted in first and only sequance
 80009ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009cc:	f042 0210 	orr.w	r2, r2, #16
 80009d0:	635a      	str	r2, [r3, #52]	; 0x34

	ADC1 	-> SMPR1 	|= (ADC_SMPR1_SMP16_0 | ADC_SMPR1_SMP16_1 | ADC_SMPR1_SMP16_2); 	//For temperature measurement the sampling time must be > 10 us so 480 cycle * 48 ns = 23 us
 80009d2:	68da      	ldr	r2, [r3, #12]
 80009d4:	f442 12e0 	orr.w	r2, r2, #1835008	; 0x1c0000
 80009d8:	60da      	str	r2, [r3, #12]

	//ADC1 	-> CR1 		&= ~(ADC_CR1_RES_0 | ADC_CR1_RES_1);	//Setup 12 bit resolution (take 15 ADC clock cycle)

	ADC1 	-> CR1 		|= (ADC_CR1_RES_1);		//Setup 8 bit resolution (take 11 ADC clock cycle)
 80009da:	685a      	ldr	r2, [r3, #4]
 80009dc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80009e0:	605a      	str	r2, [r3, #4]

	ADC1 	-> CR2 		|=(ADC_CR2_CONT); 		//Continious convertion mode
 80009e2:	689a      	ldr	r2, [r3, #8]
 80009e4:	f042 0202 	orr.w	r2, r2, #2
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	4770      	bx	lr
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40012000 	.word	0x40012000
 80009f4:	40012300 	.word	0x40012300

080009f8 <ADC1In8Read>:
}

//Read ADC value form channel 8 at PB0
uint16_t ADC1In8Read(){

	ADC1 	-> CR2 		|= ADC_CR2_SWSTART;		//Start conversion
 80009f8:	4a05      	ldr	r2, [pc, #20]	; (8000a10 <ADC1In8Read+0x18>)
 80009fa:	6893      	ldr	r3, [r2, #8]
 80009fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000a00:	6093      	str	r3, [r2, #8]


	while(!(ADC1 -> SR & ADC_SR_EOC)); 			//Wait on EOC status flag
 8000a02:	6813      	ldr	r3, [r2, #0]
 8000a04:	079b      	lsls	r3, r3, #30
 8000a06:	d5fc      	bpl.n	8000a02 <ADC1In8Read+0xa>

	return (uint16_t) ADC1 -> DR;
 8000a08:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
}
 8000a0a:	b280      	uxth	r0, r0
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40012000 	.word	0x40012000

08000a14 <DMA2ADC1Init>:
#include "DMA.h"

/*
 * DMA initialization function for ADC1 peripheral
 * */
void DMA2ADC1Init(uint16_t data_num, uint32_t *peripheral_address, uint32_t *memory_address){
 8000a14:	b430      	push	{r4, r5}

	//Enable DMA2 AHB1 clock source
	RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8000a16:	4d27      	ldr	r5, [pc, #156]	; (8000ab4 <DMA2ADC1Init+0xa0>)

	//DMA2_Stream0 CR configurations

	DMA2_Stream0 -> CR		&= ~(DMA_SxCR_EN); 												//Disable DMA
 8000a18:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <DMA2ADC1Init+0xa4>)
	RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8000a1a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8000a1c:	f444 0480 	orr.w	r4, r4, #4194304	; 0x400000
 8000a20:	632c      	str	r4, [r5, #48]	; 0x30
	DMA2_Stream0 -> CR		&= ~(DMA_SxCR_EN); 												//Disable DMA
 8000a22:	681c      	ldr	r4, [r3, #0]
 8000a24:	f024 0401 	bic.w	r4, r4, #1
 8000a28:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		&= ~(DMA_SxCR_CHSEL_0 | DMA_SxCR_CHSEL_1 | DMA_SxCR_CHSEL_2); 	//Stream 0 Chennel 0 select for ADC1 DMA
 8000a2a:	681c      	ldr	r4, [r3, #0]
 8000a2c:	f024 6460 	bic.w	r4, r4, #234881024	; 0xe000000
 8000a30:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		&= ~(DMA_SxCR_MBURST_0 | DMA_SxCR_MBURST_1); 					//Memory burst transfer configuration -> single transfer
 8000a32:	681c      	ldr	r4, [r3, #0]
 8000a34:	f024 74c0 	bic.w	r4, r4, #25165824	; 0x1800000
 8000a38:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		&= ~(DMA_SxCR_PBURST_0 | DMA_SxCR_PBURST_1); 					//Peripheral burst transfer configuration -> single transfer
 8000a3a:	681c      	ldr	r4, [r3, #0]
 8000a3c:	f424 04c0 	bic.w	r4, r4, #6291456	; 0x600000
 8000a40:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		&= ~(DMA_SxCR_CT); 												//Current target -> the current target memory is Memory 0 (addressed by the DMA_SxM0AR pointer)
 8000a42:	681c      	ldr	r4, [r3, #0]
 8000a44:	f424 2400 	bic.w	r4, r4, #524288	; 0x80000
 8000a48:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		&= ~(DMA_SxCR_DBM); 											//Double buffer mode -> no buffer switching at the end of transfer
 8000a4a:	681c      	ldr	r4, [r3, #0]
 8000a4c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8000a50:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		|= (DMA_SxCR_PL_0 | DMA_SxCR_PL_1); 							//Priority level -> very high
 8000a52:	681c      	ldr	r4, [r3, #0]
 8000a54:	f444 3440 	orr.w	r4, r4, #196608	; 0x30000
 8000a58:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		&= ~(DMA_SxCR_PINCOS);											//Peripheral increment offset size -> the offset size for the peripheral address calculation is linked to the PSIZE
 8000a5a:	681c      	ldr	r4, [r3, #0]
 8000a5c:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
 8000a60:	601c      	str	r4, [r3, #0]

	//DMA2_Stream0 -> CR		|= (DMA_SxCR_MSIZE_0); 											//Memory data size -> half-word (16 - bit)
	DMA2_Stream0 -> CR		&= ~(DMA_SxCR_MSIZE_0 | DMA_SxCR_MSIZE_1); 						//Memory data size -> half-word (8 - bit)
 8000a62:	681c      	ldr	r4, [r3, #0]
 8000a64:	f424 44c0 	bic.w	r4, r4, #24576	; 0x6000
 8000a68:	601c      	str	r4, [r3, #0]

	//DMA2_Stream0 -> CR		|= (DMA_SxCR_PSIZE_0);											//Peripheral data size -> half-word (16 - bit)

	DMA2_Stream0 -> CR		&= ~(DMA_SxCR_PSIZE_0 | DMA_SxCR_PSIZE_1);						//Peripheral data size -> half-word (8 - bit)
 8000a6a:	681c      	ldr	r4, [r3, #0]
 8000a6c:	f424 54c0 	bic.w	r4, r4, #6144	; 0x1800
 8000a70:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		|= (DMA_SxCR_MINC);												//Memory increment mode -> memory address pointer is incremented after each data transfer (increment is done according to MSIZE)
 8000a72:	681c      	ldr	r4, [r3, #0]
 8000a74:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8000a78:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		&= ~(DMA_SxCR_PINC); 											//Peripheral increment mode -> peripheral address pointer is fixed
 8000a7a:	681c      	ldr	r4, [r3, #0]
 8000a7c:	f424 7400 	bic.w	r4, r4, #512	; 0x200
 8000a80:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		|= (DMA_SxCR_CIRC); 											//Circular mode -> enabled
 8000a82:	681c      	ldr	r4, [r3, #0]
 8000a84:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8000a88:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		&= ~(DMA_SxCR_DIR_0 | DMA_SxCR_DIR_1); 							//Data transfer direction -> peripheral-to-memory
 8000a8a:	681c      	ldr	r4, [r3, #0]
 8000a8c:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8000a90:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		&= ~(DMA_SxCR_PFCTRL); 											//Peripheral flow controller -> the DMA is the flow controller
 8000a92:	681c      	ldr	r4, [r3, #0]
 8000a94:	f024 0420 	bic.w	r4, r4, #32
 8000a98:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		|= (DMA_SxCR_TCIE); 											//Transfer complete interrupt -> enable
 8000a9a:	681c      	ldr	r4, [r3, #0]
 8000a9c:	f044 0410 	orr.w	r4, r4, #16
 8000aa0:	601c      	str	r4, [r3, #0]

	DMA2_Stream0 -> CR		&= ~(DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE); 			//Half transfer interrupt -> disable; Transfer error interrupt -> disable; Direct mode error interrupt -> disable
 8000aa2:	681c      	ldr	r4, [r3, #0]
 8000aa4:	f024 040e 	bic.w	r4, r4, #14
 8000aa8:	601c      	str	r4, [r3, #0]

	//Data length to be transfered
	DMA2_Stream0 -> NDTR 	= data_num;								//Number of data items to transfer
 8000aaa:	6058      	str	r0, [r3, #4]
	DMA2_Stream0 -> PAR 	= (uint32_t) peripheral_address;		//Peripheral address

	//DMA stream 0 memory 0 address register
	DMA2_Stream0 -> M0AR	= (uint32_t) memory_address;			//Memory address

}
 8000aac:	bc30      	pop	{r4, r5}
	DMA2_Stream0 -> PAR 	= (uint32_t) peripheral_address;		//Peripheral address
 8000aae:	6099      	str	r1, [r3, #8]
	DMA2_Stream0 -> M0AR	= (uint32_t) memory_address;			//Memory address
 8000ab0:	60da      	str	r2, [r3, #12]
}
 8000ab2:	4770      	bx	lr
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40026410 	.word	0x40026410

08000abc <DMA2Stream0InterruptEnable>:
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <DMA2Stream0InterruptEnable+0x10>)
 8000abe:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000ac2:	2210      	movs	r2, #16
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000ac4:	6059      	str	r1, [r3, #4]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000ac6:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
 8000aca:	4770      	bx	lr
 8000acc:	e000e100 	.word	0xe000e100

08000ad0 <DMA2ADC1CollectNewData>:

}

void DMA2ADC1CollectNewData(void){

	  DMA2_Stream0 	-> CR		|= (DMA_SxCR_EN); 		//Enable DAM2
 8000ad0:	4909      	ldr	r1, [pc, #36]	; (8000af8 <DMA2ADC1CollectNewData+0x28>)
	  ADC1 			-> CR2 		|= (ADC_CR2_DMA); 		//Enable DMA on ADC1
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <DMA2ADC1CollectNewData+0x2c>)
	  DMA2_Stream0 	-> CR		|= (DMA_SxCR_EN); 		//Enable DAM2
 8000ad4:	680a      	ldr	r2, [r1, #0]
 8000ad6:	f042 0201 	orr.w	r2, r2, #1
 8000ada:	600a      	str	r2, [r1, #0]
	  ADC1 			-> CR2 		|= (ADC_CR2_DMA); 		//Enable DMA on ADC1
 8000adc:	689a      	ldr	r2, [r3, #8]
 8000ade:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ae2:	609a      	str	r2, [r3, #8]
	  ADC1 			-> CR2 		|= ADC_CR2_ADON; 		//Turn ADC1 to ON state
 8000ae4:	689a      	ldr	r2, [r3, #8]
 8000ae6:	f042 0201 	orr.w	r2, r2, #1
 8000aea:	609a      	str	r2, [r3, #8]
	  ADC1 			-> CR2 		|= ADC_CR2_SWSTART; 	//Software start ADC1
 8000aec:	689a      	ldr	r2, [r3, #8]
 8000aee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40026410 	.word	0x40026410
 8000afc:	40012000 	.word	0x40012000

08000b00 <InitGPIO>:
	/*************************************************
	////////////ENABLE CLK FOR PERIPHERALS////////////
	*************************************************/

	//Enable GPIOA AHB1 clock source
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000b00:	49a8      	ldr	r1, [pc, #672]	; (8000da4 <InitGPIO+0x2a4>)
				*************************************************/

	//////////////////////////////////////////////////////////
	//GPIOA PA3 configure for interrupt generated from W5500//
	//////////////////////////////////////////////////////////
	GPIOA -> MODER 		&= ~(GPIO_MODER_MODER3); 		//PA3 pin as input
 8000b02:	4ba9      	ldr	r3, [pc, #676]	; (8000da8 <InitGPIO+0x2a8>)


	//////////////////////////////////////////////////////////
	//GPIOB PB0 configure for ADC1 IN8////////////////////////
	//////////////////////////////////////////////////////////
	GPIOB -> MODER 		|= GPIO_MODER_MODER0; 			//PB0 analog mode
 8000b04:	4aa9      	ldr	r2, [pc, #676]	; (8000dac <InitGPIO+0x2ac>)
	GPIOA -> PUPDR 		|= GPIO_PUPDR_PUPDR8_0; 		//PA8 pull-up

	//////////////////////////////////////
	//GPIOD PD13/LED3 on discovery board//
	//////////////////////////////////////
	GPIOD -> MODER 		|= GPIO_MODER_MODER13_0;		//PD13 pin as output
 8000b06:	48aa      	ldr	r0, [pc, #680]	; (8000db0 <InitGPIO+0x2b0>)
void InitGPIO(void){
 8000b08:	b4f0      	push	{r4, r5, r6, r7}
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000b0a:	6b0f      	ldr	r7, [r1, #48]	; 0x30
	NVIC -> ISER[0] 	|= (1 << EXTI3_IRQn); 			//Enable external interrupt
 8000b0c:	4da9      	ldr	r5, [pc, #676]	; (8000db4 <InitGPIO+0x2b4>)
	SYSCFG -> EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PA;		//PA3 as external interrupt setting up in EXTICR1
 8000b0e:	4eaa      	ldr	r6, [pc, #680]	; (8000db8 <InitGPIO+0x2b8>)
	EXTI -> FTSR 		|= EXTI_FTSR_TR3;				//interrupt generated at falling edge
 8000b10:	4caa      	ldr	r4, [pc, #680]	; (8000dbc <InitGPIO+0x2bc>)
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000b12:	f047 0701 	orr.w	r7, r7, #1
 8000b16:	630f      	str	r7, [r1, #48]	; 0x30
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000b18:	6b0f      	ldr	r7, [r1, #48]	; 0x30
 8000b1a:	f047 0702 	orr.w	r7, r7, #2
 8000b1e:	630f      	str	r7, [r1, #48]	; 0x30
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000b20:	6b0f      	ldr	r7, [r1, #48]	; 0x30
 8000b22:	f047 0708 	orr.w	r7, r7, #8
 8000b26:	630f      	str	r7, [r1, #48]	; 0x30
	RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 8000b28:	6c0f      	ldr	r7, [r1, #64]	; 0x40
 8000b2a:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 8000b2e:	640f      	str	r7, [r1, #64]	; 0x40
	RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 8000b30:	6c0f      	ldr	r7, [r1, #64]	; 0x40
 8000b32:	f447 2780 	orr.w	r7, r7, #262144	; 0x40000
 8000b36:	640f      	str	r7, [r1, #64]	; 0x40
	RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000b38:	6c4f      	ldr	r7, [r1, #68]	; 0x44
 8000b3a:	f447 5780 	orr.w	r7, r7, #4096	; 0x1000
 8000b3e:	644f      	str	r7, [r1, #68]	; 0x44
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000b40:	6c4f      	ldr	r7, [r1, #68]	; 0x44
 8000b42:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000b46:	644f      	str	r7, [r1, #68]	; 0x44
	GPIOA -> MODER 		&= ~(GPIO_MODER_MODER3); 		//PA3 pin as input
 8000b48:	6819      	ldr	r1, [r3, #0]
 8000b4a:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000b4e:	6019      	str	r1, [r3, #0]
	GPIOA -> PUPDR 		|= GPIO_PUPDR_PUPDR3_0; 		//PA3 pull-up
 8000b50:	68d9      	ldr	r1, [r3, #12]
 8000b52:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8000b56:	60d9      	str	r1, [r3, #12]
	NVIC -> ISER[0] 	|= (1 << EXTI3_IRQn); 			//Enable external interrupt
 8000b58:	6829      	ldr	r1, [r5, #0]
	NVIC -> IP[EXTI3_IRQn] 		= (uint8_t) 0x02;		//set priority of EXTI3_IRQn to 2 (lower are the number the higher are priority)
 8000b5a:	2702      	movs	r7, #2
	NVIC -> ISER[0] 	|= (1 << EXTI3_IRQn); 			//Enable external interrupt
 8000b5c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8000b60:	6029      	str	r1, [r5, #0]
	NVIC -> IP[EXTI3_IRQn] 		= (uint8_t) 0x02;		//set priority of EXTI3_IRQn to 2 (lower are the number the higher are priority)
 8000b62:	f885 7309 	strb.w	r7, [r5, #777]	; 0x309
	SYSCFG -> EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PA;		//PA3 as external interrupt setting up in EXTICR1
 8000b66:	68b1      	ldr	r1, [r6, #8]
 8000b68:	60b1      	str	r1, [r6, #8]
	EXTI -> FTSR 		|= EXTI_FTSR_TR3;				//interrupt generated at falling edge
 8000b6a:	68e1      	ldr	r1, [r4, #12]
 8000b6c:	f041 0108 	orr.w	r1, r1, #8
 8000b70:	60e1      	str	r1, [r4, #12]
	EXTI -> IMR			|= EXTI_IMR_MR3; 				//Enable external interrupt at pin 3
 8000b72:	6821      	ldr	r1, [r4, #0]
 8000b74:	f041 0108 	orr.w	r1, r1, #8
 8000b78:	6021      	str	r1, [r4, #0]
	GPIOA -> MODER 		&= ~(GPIO_MODER_MODER0); 		//PA0 pin as input
 8000b7a:	6819      	ldr	r1, [r3, #0]
 8000b7c:	f021 0103 	bic.w	r1, r1, #3
 8000b80:	6019      	str	r1, [r3, #0]
	GPIOA -> PUPDR 		&= ~(GPIO_PUPDR_PUPDR0); 		//PA0 no pull-up, pull-down
 8000b82:	68d9      	ldr	r1, [r3, #12]
 8000b84:	f021 0103 	bic.w	r1, r1, #3
 8000b88:	60d9      	str	r1, [r3, #12]
	NVIC -> ISER[0] 	|= (1 << EXTI0_IRQn); 			//Enable external interrupt
 8000b8a:	6829      	ldr	r1, [r5, #0]
	NVIC -> IP[EXTI0_IRQn] 		= (uint8_t) 0x01;		//set priority of EXTI3_IRQn to 1 (lower are the number the higher are priority)
 8000b8c:	2701      	movs	r7, #1
	NVIC -> ISER[0] 	|= (1 << EXTI0_IRQn); 			//Enable external interrupt
 8000b8e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8000b92:	6029      	str	r1, [r5, #0]
	NVIC -> IP[EXTI0_IRQn] 		= (uint8_t) 0x01;		//set priority of EXTI3_IRQn to 1 (lower are the number the higher are priority)
 8000b94:	f885 7306 	strb.w	r7, [r5, #774]	; 0x306
	SYSCFG -> EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;		//PA0 as external interrupt setting up in EXTICR1
 8000b98:	68b1      	ldr	r1, [r6, #8]
 8000b9a:	60b1      	str	r1, [r6, #8]
	EXTI -> RTSR 		|= EXTI_RTSR_TR0;				//interrupt generated at rising edge
 8000b9c:	68a1      	ldr	r1, [r4, #8]
 8000b9e:	4339      	orrs	r1, r7
 8000ba0:	60a1      	str	r1, [r4, #8]
	EXTI -> IMR			|= EXTI_IMR_MR0; 				//Enable external interrupt at pin 0
 8000ba2:	6821      	ldr	r1, [r4, #0]
 8000ba4:	4339      	orrs	r1, r7
 8000ba6:	6021      	str	r1, [r4, #0]
	GPIOB -> MODER 		|= GPIO_MODER_MODER0; 			//PB0 analog mode
 8000ba8:	6811      	ldr	r1, [r2, #0]
 8000baa:	f041 0103 	orr.w	r1, r1, #3
 8000bae:	6011      	str	r1, [r2, #0]
	GPIOB -> PUPDR 		&= ~(GPIO_PUPDR_PUPDR0);	 	//PB0 no pull-up or pull-down
 8000bb0:	68d1      	ldr	r1, [r2, #12]
 8000bb2:	f021 0103 	bic.w	r1, r1, #3
 8000bb6:	60d1      	str	r1, [r2, #12]
	GPIOA -> MODER 		|= GPIO_MODER_MODER8_0; 		//PA8 pin as output
 8000bb8:	6819      	ldr	r1, [r3, #0]
 8000bba:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8000bbe:	6019      	str	r1, [r3, #0]
	GPIOA -> OTYPER 	&= ~(GPIO_OTYPER_OT_8);			//PA8 output type push-pull
 8000bc0:	6859      	ldr	r1, [r3, #4]
 8000bc2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8000bc6:	6059      	str	r1, [r3, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR8; 		//PA8 output speed register (very high speed)
 8000bc8:	6899      	ldr	r1, [r3, #8]
 8000bca:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
 8000bce:	6099      	str	r1, [r3, #8]
	GPIOA -> PUPDR 		|= GPIO_PUPDR_PUPDR8_0; 		//PA8 pull-up
 8000bd0:	68d9      	ldr	r1, [r3, #12]
 8000bd2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8000bd6:	60d9      	str	r1, [r3, #12]
	GPIOD -> MODER 		|= GPIO_MODER_MODER13_0;		//PD13 pin as output
 8000bd8:	6801      	ldr	r1, [r0, #0]
 8000bda:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8000bde:	6001      	str	r1, [r0, #0]
	GPIOD -> OTYPER 	&= ~(GPIO_OTYPER_OT_13);		//PD13 output type push-pull
 8000be0:	6841      	ldr	r1, [r0, #4]
 8000be2:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8000be6:	6041      	str	r1, [r0, #4]
	GPIOD -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR13_0; 	//PD13 output speed register (medium speed)
 8000be8:	6881      	ldr	r1, [r0, #8]
 8000bea:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8000bee:	6081      	str	r1, [r0, #8]
	GPIOD -> PUPDR 		&= ~(GPIO_PUPDR_PUPDR13); 		//PD13 pull-up
 8000bf0:	68c1      	ldr	r1, [r0, #12]
 8000bf2:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8000bf6:	60c1      	str	r1, [r0, #12]

	////////////////////////////////////////////
	//GPIOA PA2 pin for reset control in W5500//
	////////////////////////////////////////////
	GPIOA -> MODER 		|=  GPIO_MODER_MODER2_0; 		//PA2 pin as output
 8000bf8:	6819      	ldr	r1, [r3, #0]
 8000bfa:	f041 0110 	orr.w	r1, r1, #16
 8000bfe:	6019      	str	r1, [r3, #0]
	GPIOA -> OTYPER 	&= ~(GPIO_OTYPER_OT_2);			//PA2 output type push-pull
 8000c00:	6859      	ldr	r1, [r3, #4]
 8000c02:	f021 0104 	bic.w	r1, r1, #4
 8000c06:	6059      	str	r1, [r3, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR2_0; 	//PA2 output speed register (medium speed)
 8000c08:	6899      	ldr	r1, [r3, #8]
 8000c0a:	f041 0110 	orr.w	r1, r1, #16
 8000c0e:	6099      	str	r1, [r3, #8]
	GPIOA -> PUPDR 		&= ~(GPIO_PUPDR_PUPDR2); 		//PA2 pull-up
 8000c10:	68d9      	ldr	r1, [r3, #12]
 8000c12:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8000c16:	60d9      	str	r1, [r3, #12]
	GPIOA -> ODR 		|= GPIO_ODR_ODR_2; 				//Enable W5500 module
 8000c18:	6959      	ldr	r1, [r3, #20]
 8000c1a:	f041 0104 	orr.w	r1, r1, #4
 8000c1e:	6159      	str	r1, [r3, #20]
	***********************************************************************************/

	//////////
	//USART3 RX
	//////////
	GPIOB -> MODER  	|= GPIO_MODER_MODER11_1; 	//PB11 pin as alternate function
 8000c20:	6811      	ldr	r1, [r2, #0]
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c26:	6011      	str	r1, [r2, #0]
	GPIOB -> OTYPER     &= ~(GPIO_OTYPER_OT_11); 	//PB11 output type push-pull
 8000c28:	6851      	ldr	r1, [r2, #4]
 8000c2a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8000c2e:	6051      	str	r1, [r2, #4]
	GPIOB -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR11; //PB11 output speed register (very high speed)
 8000c30:	6891      	ldr	r1, [r2, #8]
 8000c32:	f441 0140 	orr.w	r1, r1, #12582912	; 0xc00000
 8000c36:	6091      	str	r1, [r2, #8]
	GPIOB -> PUPDR		|= GPIO_PUPDR_PUPDR11_0; 	//PB11 pull-up
 8000c38:	68d1      	ldr	r1, [r2, #12]
 8000c3a:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8000c3e:	60d1      	str	r1, [r2, #12]
	GPIOB -> AFR[1] 	|= (0x07 << 12); 			//PB11 alternate function USART3 RX
 8000c40:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000c42:	f441 41e0 	orr.w	r1, r1, #28672	; 0x7000
 8000c46:	6251      	str	r1, [r2, #36]	; 0x24


	//////////
	//USART3 TX
	//////////
	GPIOB -> MODER  	|= GPIO_MODER_MODER10_1; 	//PB10 pin as alternate function
 8000c48:	6811      	ldr	r1, [r2, #0]
 8000c4a:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8000c4e:	6011      	str	r1, [r2, #0]
	GPIOB -> OTYPER     &= ~(GPIO_OTYPER_OT_10); 	//PB10 output type push-pull
 8000c50:	6851      	ldr	r1, [r2, #4]
 8000c52:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8000c56:	6051      	str	r1, [r2, #4]
	GPIOB -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR10; //PB10 output speed register (very high speed)
 8000c58:	6891      	ldr	r1, [r2, #8]
 8000c5a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8000c5e:	6091      	str	r1, [r2, #8]
	GPIOB -> PUPDR		|= GPIO_PUPDR_PUPDR10_0; 	//PB10 pull-up
 8000c60:	68d1      	ldr	r1, [r2, #12]
 8000c62:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c66:	60d1      	str	r1, [r2, #12]
	GPIOB -> AFR[1] 	|= (0x07 << 8); 			//PB10 alternate function USART3 TX
 8000c68:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000c6a:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
 8000c6e:	6251      	str	r1, [r2, #36]	; 0x24
//	GPIOA -> AFR[0] 	|= (0x05 << 16); 			//PA4 alternate function SPI1_NSS

	//////////
	//SPI1_NSS software
	//////////
	GPIOA -> MODER		|= GPIO_MODER_MODER4_0;		//PA4 pin output mode
 8000c70:	6819      	ldr	r1, [r3, #0]
 8000c72:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000c76:	6019      	str	r1, [r3, #0]
	GPIOA -> OTYPER 	&= ~(GPIO_OTYPER_OT_4); 	//PA4 output push-pull
 8000c78:	6859      	ldr	r1, [r3, #4]
 8000c7a:	f021 0110 	bic.w	r1, r1, #16
 8000c7e:	6059      	str	r1, [r3, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR4; 	//PA4 output speed register (very high speed)
 8000c80:	6899      	ldr	r1, [r3, #8]
 8000c82:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 8000c86:	6099      	str	r1, [r3, #8]
	GPIOA -> PUPDR		|= GPIO_PUPDR_PUPDR4_0; 	//PA4 pull-up
 8000c88:	68d9      	ldr	r1, [r3, #12]
 8000c8a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000c8e:	60d9      	str	r1, [r3, #12]
	GPIOA -> ODR 		|= GPIO_ODR_ODR_4;			//PA4 set in a high output logical level
 8000c90:	6959      	ldr	r1, [r3, #20]
 8000c92:	f041 0110 	orr.w	r1, r1, #16
 8000c96:	6159      	str	r1, [r3, #20]

	//////////
	//SPI1_CLK
	//////////
	//pin PA5 CLK configuration
	GPIOA -> MODER  	|= GPIO_MODER_MODER5_1; 	//PA5 pin as alternate function
 8000c98:	6819      	ldr	r1, [r3, #0]
 8000c9a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8000c9e:	6019      	str	r1, [r3, #0]
	GPIOA -> OTYPER     &= ~(GPIO_OTYPER_OT_5); 	//PA5 output type push-pull
 8000ca0:	6859      	ldr	r1, [r3, #4]
 8000ca2:	f021 0120 	bic.w	r1, r1, #32
 8000ca6:	6059      	str	r1, [r3, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR5;  //PA5 output speed register (very high speed)
 8000ca8:	6899      	ldr	r1, [r3, #8]
 8000caa:	f441 6140 	orr.w	r1, r1, #3072	; 0xc00
 8000cae:	6099      	str	r1, [r3, #8]
	GPIOA -> PUPDR		|= GPIO_PUPDR_PUPDR5_0; 	//PA5 pull-up
 8000cb0:	68d9      	ldr	r1, [r3, #12]
 8000cb2:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000cb6:	60d9      	str	r1, [r3, #12]
	GPIOA -> AFR[0] 	|= (0x05 << 20); 			//PA5 alternate function SPI1_CLK
 8000cb8:	6a19      	ldr	r1, [r3, #32]
 8000cba:	f441 01a0 	orr.w	r1, r1, #5242880	; 0x500000
 8000cbe:	6219      	str	r1, [r3, #32]

	///////////
	//SPI1_MISO
	///////////
	//pin PA6 MISO configuration
	GPIOA -> MODER  	|= GPIO_MODER_MODER6_1; 	//PA6 pin as alternate function
 8000cc0:	6819      	ldr	r1, [r3, #0]
 8000cc2:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8000cc6:	6019      	str	r1, [r3, #0]
	GPIOA -> OTYPER     &= ~(GPIO_OTYPER_OT_6); 	//PA6 output type push-pull
 8000cc8:	6859      	ldr	r1, [r3, #4]
 8000cca:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8000cce:	6059      	str	r1, [r3, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR6;  //PA6 output speed register (very high speed)
 8000cd0:	6899      	ldr	r1, [r3, #8]
 8000cd2:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
 8000cd6:	6099      	str	r1, [r3, #8]
	GPIOA -> PUPDR		|= GPIO_PUPDR_PUPDR6_0; 	//PA6 pull-up
 8000cd8:	68d9      	ldr	r1, [r3, #12]
 8000cda:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8000cde:	60d9      	str	r1, [r3, #12]
	GPIOA -> AFR[0] 	|= (0x05 << 24); 			//PA6 alternate function SPI1_MISO
 8000ce0:	6a19      	ldr	r1, [r3, #32]
 8000ce2:	f041 61a0 	orr.w	r1, r1, #83886080	; 0x5000000
 8000ce6:	6219      	str	r1, [r3, #32]

	///////////
	//SPI1_MOSI
	///////////
	//pin PA7 MOSI configuration
	GPIOA -> MODER  	|= GPIO_MODER_MODER7_1; 	//PA7 pin as alternate function
 8000ce8:	6819      	ldr	r1, [r3, #0]
 8000cea:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8000cee:	6019      	str	r1, [r3, #0]
	GPIOA -> OTYPER     &= ~(GPIO_OTYPER_OT_7); 	//PA7 output type push-pull
 8000cf0:	6859      	ldr	r1, [r3, #4]
 8000cf2:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8000cf6:	6059      	str	r1, [r3, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR7;  //PA7 output speed register (very high speed)
 8000cf8:	6899      	ldr	r1, [r3, #8]
 8000cfa:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8000cfe:	6099      	str	r1, [r3, #8]
	GPIOA -> PUPDR		|= GPIO_PUPDR_PUPDR7_0; 	//PA7 pull-up
 8000d00:	68d9      	ldr	r1, [r3, #12]
 8000d02:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000d06:	60d9      	str	r1, [r3, #12]
	GPIOA -> AFR[0] 	|= (0x05 << 28); 			//PA7 alternate function SPI1_MOSI
 8000d08:	6a19      	ldr	r1, [r3, #32]
 8000d0a:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
 8000d0e:	6219      	str	r1, [r3, #32]

	//////////
	//SPI3_NSS
	//////////
	//pin PA15 NSS configuration
	GPIOA -> MODER  	|= GPIO_MODER_MODER15_1; 	//PA15 pin as alternate function
 8000d10:	6819      	ldr	r1, [r3, #0]
 8000d12:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8000d16:	6019      	str	r1, [r3, #0]
	GPIOA -> OTYPER     &= ~(GPIO_OTYPER_OT_15); 	//PA15 output type push-pull
 8000d18:	6859      	ldr	r1, [r3, #4]
 8000d1a:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8000d1e:	6059      	str	r1, [r3, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR15; //PA15 output speed register (very high speed)
 8000d20:	6899      	ldr	r1, [r3, #8]
 8000d22:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
 8000d26:	6099      	str	r1, [r3, #8]
	GPIOA -> PUPDR		|= GPIO_PUPDR_PUPDR15_0; 	//PA15 pull-up
 8000d28:	68d9      	ldr	r1, [r3, #12]
 8000d2a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8000d2e:	60d9      	str	r1, [r3, #12]
	GPIOA -> AFR[1] 	|= (0x06 << 28); 			//PA15 alternate function SPI3_NSS
 8000d30:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000d32:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
 8000d36:	6259      	str	r1, [r3, #36]	; 0x24

	//////////
	//SPI3_CLK
	//////////
	//pin PB3 CLK configuration
	GPIOB -> MODER  	|= GPIO_MODER_MODER3_1; 	//PB3 pin as alternate function
 8000d38:	6813      	ldr	r3, [r2, #0]
 8000d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d3e:	6013      	str	r3, [r2, #0]
	GPIOB -> OTYPER     &= ~(GPIO_OTYPER_OT_3); 	//PB3 output type push-pull
 8000d40:	6853      	ldr	r3, [r2, #4]
 8000d42:	f023 0308 	bic.w	r3, r3, #8
 8000d46:	6053      	str	r3, [r2, #4]
	GPIOB -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR3;  //PB3 output speed register (very high speed)
 8000d48:	6893      	ldr	r3, [r2, #8]
 8000d4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d4e:	6093      	str	r3, [r2, #8]
	GPIOB -> PUPDR		|= GPIO_PUPDR_PUPDR3_0; 	//PB3 pull-up
 8000d50:	68d3      	ldr	r3, [r2, #12]
 8000d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d56:	60d3      	str	r3, [r2, #12]
	GPIOB -> AFR[0] 	|= (0x06 << 12); 			//PB3 alternate function SPI3_CLK
 8000d58:	6a13      	ldr	r3, [r2, #32]
 8000d5a:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000d5e:	6213      	str	r3, [r2, #32]

	///////////
	//SPI3_MISO
	///////////
	//pin PB4 MISO configuration
	GPIOB -> MODER  	|= GPIO_MODER_MODER4_1; 	//PB4 pin as alternate function
 8000d60:	6813      	ldr	r3, [r2, #0]
 8000d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d66:	6013      	str	r3, [r2, #0]
	GPIOB -> OTYPER     &= ~(GPIO_OTYPER_OT_4); 	//PB4 output type push-pull
 8000d68:	6853      	ldr	r3, [r2, #4]
 8000d6a:	f023 0310 	bic.w	r3, r3, #16
 8000d6e:	6053      	str	r3, [r2, #4]
	GPIOB -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR4;  //PB4 output speed register (very high speed)
 8000d70:	6893      	ldr	r3, [r2, #8]
 8000d72:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000d76:	6093      	str	r3, [r2, #8]
	GPIOB -> PUPDR		|= GPIO_PUPDR_PUPDR4_0; 	//PB4 pull-up
 8000d78:	68d3      	ldr	r3, [r2, #12]
 8000d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d7e:	60d3      	str	r3, [r2, #12]
	GPIOB -> AFR[0] 	|= (0x06 << 16); 			//PB4 alternate function SPI3_MISO
 8000d80:	6a13      	ldr	r3, [r2, #32]
 8000d82:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 8000d86:	6213      	str	r3, [r2, #32]

	///////////
	//SPI3_MOSI
	///////////
	//pin PB5 MOSI configuration
	GPIOB -> MODER  	|= GPIO_MODER_MODER5_1; 	//PB5 pin as alternate function
 8000d88:	6813      	ldr	r3, [r2, #0]
 8000d8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d8e:	6013      	str	r3, [r2, #0]
	GPIOB -> OTYPER     &= ~(GPIO_OTYPER_OT_5); 	//PB5 output type push-pull
 8000d90:	6853      	ldr	r3, [r2, #4]
 8000d92:	f023 0320 	bic.w	r3, r3, #32
 8000d96:	6053      	str	r3, [r2, #4]
	GPIOB -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR5;  //PB5 output speed register (very high speed)
 8000d98:	6893      	ldr	r3, [r2, #8]
 8000d9a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000d9e:	6093      	str	r3, [r2, #8]
 8000da0:	e00e      	b.n	8000dc0 <InitGPIO+0x2c0>
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020000 	.word	0x40020000
 8000dac:	40020400 	.word	0x40020400
 8000db0:	40020c00 	.word	0x40020c00
 8000db4:	e000e100 	.word	0xe000e100
 8000db8:	40013800 	.word	0x40013800
 8000dbc:	40013c00 	.word	0x40013c00
	GPIOB -> PUPDR		|= GPIO_PUPDR_PUPDR5_0; 	//PB5 pull-up
 8000dc0:	68d3      	ldr	r3, [r2, #12]
 8000dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc6:	60d3      	str	r3, [r2, #12]
	GPIOB -> AFR[0] 	|= (0x06 << 20); 			//PB5 alternate function SPI3_MOSI
 8000dc8:	6a13      	ldr	r3, [r2, #32]
 8000dca:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 8000dce:	6213      	str	r3, [r2, #32]

}
 8000dd0:	bcf0      	pop	{r4, r5, r6, r7}
 8000dd2:	4770      	bx	lr

08000dd4 <SPI1Init>:

//SPI1 inicialization
void SPI1Init(){

	//Configure NSS hardware pin
	SPI1 -> CR1 	&= ~(SPI_CR1_SSM);
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <SPI1Init+0x80>)
 8000dd6:	881a      	ldrh	r2, [r3, #0]
 8000dd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ddc:	0412      	lsls	r2, r2, #16
 8000dde:	0c12      	lsrs	r2, r2, #16
 8000de0:	801a      	strh	r2, [r3, #0]
	SPI1 -> CR2 	|= SPI_CR2_SSOE;
 8000de2:	889a      	ldrh	r2, [r3, #4]
 8000de4:	b292      	uxth	r2, r2
 8000de6:	f042 0204 	orr.w	r2, r2, #4
 8000dea:	809a      	strh	r2, [r3, #4]

	//Configure clock polarity sample at positive clock edge
	SPI1 -> CR1 	&= ~(SPI_CR1_CPHA);
 8000dec:	881a      	ldrh	r2, [r3, #0]
 8000dee:	f022 0201 	bic.w	r2, r2, #1
 8000df2:	0412      	lsls	r2, r2, #16
 8000df4:	0c12      	lsrs	r2, r2, #16
 8000df6:	801a      	strh	r2, [r3, #0]
	SPI1 -> CR1 	&= ~(SPI_CR1_CPOL);
 8000df8:	881a      	ldrh	r2, [r3, #0]
 8000dfa:	f022 0202 	bic.w	r2, r2, #2
 8000dfe:	0412      	lsls	r2, r2, #16
 8000e00:	0c12      	lsrs	r2, r2, #16
 8000e02:	801a      	strh	r2, [r3, #0]

	//MSB bit first out
	SPI1 -> CR1 	&= ~(SPI_CR1_LSBFIRST);
 8000e04:	881a      	ldrh	r2, [r3, #0]
 8000e06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e0a:	0412      	lsls	r2, r2, #16
 8000e0c:	0c12      	lsrs	r2, r2, #16
 8000e0e:	801a      	strh	r2, [r3, #0]

	//2-line SPI mode (MISO & MOSI)
	SPI1 -> CR1 	&= ~(SPI_CR1_BIDIMODE);
 8000e10:	881a      	ldrh	r2, [r3, #0]
 8000e12:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8000e16:	801a      	strh	r2, [r3, #0]

	//SPI full duplex mode
	SPI1 -> CR1 	&= ~(SPI_CR1_RXONLY);
 8000e18:	881a      	ldrh	r2, [r3, #0]
 8000e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e1e:	0412      	lsls	r2, r2, #16
 8000e20:	0c12      	lsrs	r2, r2, #16
 8000e22:	801a      	strh	r2, [r3, #0]

	//SPI 8-bit data frame format
	SPI1 -> CR1 	&= ~(SPI_CR1_DFF);
 8000e24:	881a      	ldrh	r2, [r3, #0]
 8000e26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e2a:	0412      	lsls	r2, r2, #16
 8000e2c:	0c12      	lsrs	r2, r2, #16
 8000e2e:	801a      	strh	r2, [r3, #0]


	//SPI baud rate for debug purpose
	//SPI1 -> CR1 	|= (SPI_CR1_BR_1 |  SPI_CR1_BR_0); 	// 84 MHz / 16 = 5.25 MHz good for saleale debuging !!
	//SPI1 -> CR1 	|= ( SPI_CR1_BR_0); 				// 84 MHz / 4 = 21 MHz
	SPI1 -> CR1 	&= ~( SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0); 				// 84 MHz / 2 = 42 MHz
 8000e30:	881a      	ldrh	r2, [r3, #0]
 8000e32:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8000e36:	0412      	lsls	r2, r2, #16
 8000e38:	0c12      	lsrs	r2, r2, #16
 8000e3a:	801a      	strh	r2, [r3, #0]
	//SPI baud rate without prescaler the sclk clock would be 42 MHz
	//SPI1 -> CR1 	|= ~(SPI_CR1_BR); 	// 84 MHz / 2 = 42 MHz


	//SPI in master mode configuration
	SPI1 -> CR1 	|= SPI_CR1_MSTR;
 8000e3c:	881a      	ldrh	r2, [r3, #0]
 8000e3e:	b292      	uxth	r2, r2
 8000e40:	f042 0204 	orr.w	r2, r2, #4
 8000e44:	801a      	strh	r2, [r3, #0]

	//SPI enable
	SPI1 -> CR1 	|= SPI_CR1_SPE;
 8000e46:	881a      	ldrh	r2, [r3, #0]
 8000e48:	b292      	uxth	r2, r2
 8000e4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e4e:	801a      	strh	r2, [r3, #0]
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40013000 	.word	0x40013000

08000e58 <SPI1SendNByte>:

	 //variable for count
	 uint32_t i = 0;

	 //SPI1 CS enable (output low logical level)
	 GPIOA -> ODR 		&= ~(GPIO_ODR_ODR_4);
 8000e58:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <SPI1SendNByte+0x3c>)
 8000e5a:	6953      	ldr	r3, [r2, #20]
 8000e5c:	f023 0310 	bic.w	r3, r3, #16
 8000e60:	6153      	str	r3, [r2, #20]

	 for(i = 0;i < data_len;i++){
 8000e62:	b181      	cbz	r1, 8000e86 <SPI1SendNByte+0x2e>
	 SPI1 -> DR = *data;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <SPI1SendNByte+0x40>)
 8000e66:	4401      	add	r1, r0
 8000e68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e6c:	819a      	strh	r2, [r3, #12]
	 while(!(SPI1 -> SR & SPI_SR_TXE));
 8000e6e:	891a      	ldrh	r2, [r3, #8]
 8000e70:	0792      	lsls	r2, r2, #30
 8000e72:	d5fc      	bpl.n	8000e6e <SPI1SendNByte+0x16>
	 while(!(SPI1 -> SR & SPI_SR_RXNE));
 8000e74:	891a      	ldrh	r2, [r3, #8]
 8000e76:	07d2      	lsls	r2, r2, #31
 8000e78:	d5fc      	bpl.n	8000e74 <SPI1SendNByte+0x1c>
	 while(SPI1 -> SR & SPI_SR_BSY);
 8000e7a:	891a      	ldrh	r2, [r3, #8]
 8000e7c:	0612      	lsls	r2, r2, #24
 8000e7e:	d4fc      	bmi.n	8000e7a <SPI1SendNByte+0x22>
	 for(i = 0;i < data_len;i++){
 8000e80:	4288      	cmp	r0, r1
	 return SPI1 -> DR;
 8000e82:	899a      	ldrh	r2, [r3, #12]
	 for(i = 0;i < data_len;i++){
 8000e84:	d1f0      	bne.n	8000e68 <SPI1SendNByte+0x10>
		 //Write 8 bit data
		 SPI1Send1ByteReceive1Byte(&(data[i]));
	 }

	 //SPI1 CS disable (output high logical level)
	 GPIOA -> ODR 		|= GPIO_ODR_ODR_4;
 8000e86:	4a03      	ldr	r2, [pc, #12]	; (8000e94 <SPI1SendNByte+0x3c>)
 8000e88:	6953      	ldr	r3, [r2, #20]
 8000e8a:	f043 0310 	orr.w	r3, r3, #16
 8000e8e:	6153      	str	r3, [r2, #20]

}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	40020000 	.word	0x40020000
 8000e98:	40013000 	.word	0x40013000

08000e9c <SPI1SendNByteControlAndOther>:

//SPI1 send n-byte with control data first and other data second
void SPI1SendNByteControlAndOther(uint8_t *control_data,uint32_t c_data_len,uint8_t *data,uint32_t data_len){
 8000e9c:	b430      	push	{r4, r5}

	 //variable for count
	 uint32_t i = 0;

	 //SPI1 CS enable (output low logical level)
	 GPIOA -> ODR 		&= ~(GPIO_ODR_ODR_4);
 8000e9e:	4d18      	ldr	r5, [pc, #96]	; (8000f00 <SPI1SendNByteControlAndOther+0x64>)
 8000ea0:	696c      	ldr	r4, [r5, #20]
 8000ea2:	f024 0410 	bic.w	r4, r4, #16
 8000ea6:	616c      	str	r4, [r5, #20]

	 //Send control data first
	 for(i = 0;i < c_data_len;i++){
 8000ea8:	b181      	cbz	r1, 8000ecc <SPI1SendNByteControlAndOther+0x30>
	 SPI1 -> DR = *data;
 8000eaa:	4c16      	ldr	r4, [pc, #88]	; (8000f04 <SPI1SendNByteControlAndOther+0x68>)
 8000eac:	1845      	adds	r5, r0, r1
 8000eae:	f810 1b01 	ldrb.w	r1, [r0], #1
 8000eb2:	81a1      	strh	r1, [r4, #12]
	 while(!(SPI1 -> SR & SPI_SR_TXE));
 8000eb4:	8921      	ldrh	r1, [r4, #8]
 8000eb6:	0789      	lsls	r1, r1, #30
 8000eb8:	d5fc      	bpl.n	8000eb4 <SPI1SendNByteControlAndOther+0x18>
	 while(!(SPI1 -> SR & SPI_SR_RXNE));
 8000eba:	8921      	ldrh	r1, [r4, #8]
 8000ebc:	07c9      	lsls	r1, r1, #31
 8000ebe:	d5fc      	bpl.n	8000eba <SPI1SendNByteControlAndOther+0x1e>
	 while(SPI1 -> SR & SPI_SR_BSY);
 8000ec0:	8921      	ldrh	r1, [r4, #8]
 8000ec2:	0609      	lsls	r1, r1, #24
 8000ec4:	d4fc      	bmi.n	8000ec0 <SPI1SendNByteControlAndOther+0x24>
	 for(i = 0;i < c_data_len;i++){
 8000ec6:	4285      	cmp	r5, r0
	 return SPI1 -> DR;
 8000ec8:	89a1      	ldrh	r1, [r4, #12]
	 for(i = 0;i < c_data_len;i++){
 8000eca:	d1f0      	bne.n	8000eae <SPI1SendNByteControlAndOther+0x12>

		 //Write 8 bit data
		 SPI1Send1ByteReceive1Byte(&(control_data[i]));
	 }
	 //Send other data second
	 for(i = 0;i < data_len;i++){
 8000ecc:	b183      	cbz	r3, 8000ef0 <SPI1SendNByteControlAndOther+0x54>
	 SPI1 -> DR = *data;
 8000ece:	490d      	ldr	r1, [pc, #52]	; (8000f04 <SPI1SendNByteControlAndOther+0x68>)
 8000ed0:	18d0      	adds	r0, r2, r3
 8000ed2:	f812 3b01 	ldrb.w	r3, [r2], #1
 8000ed6:	818b      	strh	r3, [r1, #12]
	 while(!(SPI1 -> SR & SPI_SR_TXE));
 8000ed8:	890b      	ldrh	r3, [r1, #8]
 8000eda:	079d      	lsls	r5, r3, #30
 8000edc:	d5fc      	bpl.n	8000ed8 <SPI1SendNByteControlAndOther+0x3c>
	 while(!(SPI1 -> SR & SPI_SR_RXNE));
 8000ede:	890b      	ldrh	r3, [r1, #8]
 8000ee0:	07dc      	lsls	r4, r3, #31
 8000ee2:	d5fc      	bpl.n	8000ede <SPI1SendNByteControlAndOther+0x42>
	 while(SPI1 -> SR & SPI_SR_BSY);
 8000ee4:	890b      	ldrh	r3, [r1, #8]
 8000ee6:	061b      	lsls	r3, r3, #24
 8000ee8:	d4fc      	bmi.n	8000ee4 <SPI1SendNByteControlAndOther+0x48>
	 for(i = 0;i < data_len;i++){
 8000eea:	4282      	cmp	r2, r0
	 return SPI1 -> DR;
 8000eec:	898b      	ldrh	r3, [r1, #12]
	 for(i = 0;i < data_len;i++){
 8000eee:	d1f0      	bne.n	8000ed2 <SPI1SendNByteControlAndOther+0x36>
		 //Write 8 bit data
		 SPI1Send1ByteReceive1Byte(&(data[i]));
	 }

	 //SPI1 CS disable (output high logical level)
	 GPIOA -> ODR 		|= GPIO_ODR_ODR_4;
 8000ef0:	4a03      	ldr	r2, [pc, #12]	; (8000f00 <SPI1SendNByteControlAndOther+0x64>)
 8000ef2:	6953      	ldr	r3, [r2, #20]
 8000ef4:	f043 0310 	orr.w	r3, r3, #16
 8000ef8:	6153      	str	r3, [r2, #20]

}
 8000efa:	bc30      	pop	{r4, r5}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40020000 	.word	0x40020000
 8000f04:	40013000 	.word	0x40013000

08000f08 <SPI1SendNByteReceive1Byte>:

	 //Received data variable
	 uint8_t received_data = 0x00;

	 //SPI1 CS enable (output low logical level)
	 GPIOA -> ODR 		&= ~(GPIO_ODR_ODR_4);
 8000f08:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <SPI1SendNByteReceive1Byte+0x60>)
 8000f0a:	6953      	ldr	r3, [r2, #20]
 8000f0c:	f023 0310 	bic.w	r3, r3, #16
uint8_t SPI1SendNByteReceive1Byte(uint8_t *data_to_send, uint32_t send_data_len){
 8000f10:	b430      	push	{r4, r5}
	 GPIOA -> ODR 		&= ~(GPIO_ODR_ODR_4);
 8000f12:	6153      	str	r3, [r2, #20]

	 for(i = 0;i < send_data_len;i++){
 8000f14:	b189      	cbz	r1, 8000f3a <SPI1SendNByteReceive1Byte+0x32>
	 SPI1 -> DR = *data;
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <SPI1SendNByteReceive1Byte+0x64>)
 8000f18:	4604      	mov	r4, r0
 8000f1a:	1845      	adds	r5, r0, r1
 8000f1c:	f814 2b01 	ldrb.w	r2, [r4], #1
 8000f20:	819a      	strh	r2, [r3, #12]
	 while(!(SPI1 -> SR & SPI_SR_TXE));
 8000f22:	891a      	ldrh	r2, [r3, #8]
 8000f24:	0792      	lsls	r2, r2, #30
 8000f26:	d5fc      	bpl.n	8000f22 <SPI1SendNByteReceive1Byte+0x1a>
	 while(!(SPI1 -> SR & SPI_SR_RXNE));
 8000f28:	891a      	ldrh	r2, [r3, #8]
 8000f2a:	07d2      	lsls	r2, r2, #31
 8000f2c:	d5fc      	bpl.n	8000f28 <SPI1SendNByteReceive1Byte+0x20>
	 while(SPI1 -> SR & SPI_SR_BSY);
 8000f2e:	891a      	ldrh	r2, [r3, #8]
 8000f30:	0612      	lsls	r2, r2, #24
 8000f32:	d4fc      	bmi.n	8000f2e <SPI1SendNByteReceive1Byte+0x26>
	 for(i = 0;i < send_data_len;i++){
 8000f34:	42ac      	cmp	r4, r5
	 return SPI1 -> DR;
 8000f36:	899a      	ldrh	r2, [r3, #12]
	 for(i = 0;i < send_data_len;i++){
 8000f38:	d1f0      	bne.n	8000f1c <SPI1SendNByteReceive1Byte+0x14>
	 SPI1 -> DR = *data;
 8000f3a:	4a0c      	ldr	r2, [pc, #48]	; (8000f6c <SPI1SendNByteReceive1Byte+0x64>)
 8000f3c:	5c43      	ldrb	r3, [r0, r1]
 8000f3e:	8193      	strh	r3, [r2, #12]
	 while(!(SPI1 -> SR & SPI_SR_TXE));
 8000f40:	8913      	ldrh	r3, [r2, #8]
 8000f42:	0798      	lsls	r0, r3, #30
 8000f44:	d5fc      	bpl.n	8000f40 <SPI1SendNByteReceive1Byte+0x38>
	 while(!(SPI1 -> SR & SPI_SR_RXNE));
 8000f46:	4a09      	ldr	r2, [pc, #36]	; (8000f6c <SPI1SendNByteReceive1Byte+0x64>)
 8000f48:	8913      	ldrh	r3, [r2, #8]
 8000f4a:	07d9      	lsls	r1, r3, #31
 8000f4c:	d5fc      	bpl.n	8000f48 <SPI1SendNByteReceive1Byte+0x40>
	 while(SPI1 -> SR & SPI_SR_BSY);
 8000f4e:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <SPI1SendNByteReceive1Byte+0x64>)
 8000f50:	8913      	ldrh	r3, [r2, #8]
 8000f52:	061b      	lsls	r3, r3, #24
 8000f54:	d4fc      	bmi.n	8000f50 <SPI1SendNByteReceive1Byte+0x48>
		 SPI1Send1ByteReceive1Byte(&data_to_send[i]);
	 }
	 received_data = SPI1Send1ByteReceive1Byte(&data_to_send[i]);

	 //SPI1 CS disable (output high logical level)
	 GPIOA -> ODR 		|= GPIO_ODR_ODR_4;
 8000f56:	4904      	ldr	r1, [pc, #16]	; (8000f68 <SPI1SendNByteReceive1Byte+0x60>)
	 return SPI1 -> DR;
 8000f58:	8990      	ldrh	r0, [r2, #12]
	 GPIOA -> ODR 		|= GPIO_ODR_ODR_4;
 8000f5a:	694b      	ldr	r3, [r1, #20]
 8000f5c:	f043 0310 	orr.w	r3, r3, #16

	 return received_data;
}
 8000f60:	b2c0      	uxtb	r0, r0
	 GPIOA -> ODR 		|= GPIO_ODR_ODR_4;
 8000f62:	614b      	str	r3, [r1, #20]
}
 8000f64:	bc30      	pop	{r4, r5}
 8000f66:	4770      	bx	lr
 8000f68:	40020000 	.word	0x40020000
 8000f6c:	40013000 	.word	0x40013000

08000f70 <SPI1SendNByteReceiveNByte>:

//SPI1 send n bytes receive n bytes
void SPI1SendNByteReceiveNByte(uint8_t *data_to_send, uint32_t send_data_len, uint8_t *data_to_read, uint32_t receive_data_len){
 8000f70:	b470      	push	{r4, r5, r6}

	//variable for count
	 uint32_t i = 0;

	 //SPI1 CS enable (output low logical level)
	 GPIOA -> ODR 		&= ~(GPIO_ODR_ODR_4);
 8000f72:	4d19      	ldr	r5, [pc, #100]	; (8000fd8 <SPI1SendNByteReceiveNByte+0x68>)
 8000f74:	696c      	ldr	r4, [r5, #20]
 8000f76:	f024 0410 	bic.w	r4, r4, #16
 8000f7a:	616c      	str	r4, [r5, #20]

	 for(i = 0;i < send_data_len;i++){
 8000f7c:	b189      	cbz	r1, 8000fa2 <SPI1SendNByteReceiveNByte+0x32>
	 SPI1 -> DR = *data;
 8000f7e:	4c17      	ldr	r4, [pc, #92]	; (8000fdc <SPI1SendNByteReceiveNByte+0x6c>)
 8000f80:	1846      	adds	r6, r0, r1
 8000f82:	4605      	mov	r5, r0
 8000f84:	f815 1b01 	ldrb.w	r1, [r5], #1
 8000f88:	81a1      	strh	r1, [r4, #12]
	 while(!(SPI1 -> SR & SPI_SR_TXE));
 8000f8a:	8921      	ldrh	r1, [r4, #8]
 8000f8c:	0789      	lsls	r1, r1, #30
 8000f8e:	d5fc      	bpl.n	8000f8a <SPI1SendNByteReceiveNByte+0x1a>
	 while(!(SPI1 -> SR & SPI_SR_RXNE));
 8000f90:	8921      	ldrh	r1, [r4, #8]
 8000f92:	07c9      	lsls	r1, r1, #31
 8000f94:	d5fc      	bpl.n	8000f90 <SPI1SendNByteReceiveNByte+0x20>
	 while(SPI1 -> SR & SPI_SR_BSY);
 8000f96:	8921      	ldrh	r1, [r4, #8]
 8000f98:	0609      	lsls	r1, r1, #24
 8000f9a:	d4fc      	bmi.n	8000f96 <SPI1SendNByteReceiveNByte+0x26>
	 for(i = 0;i < send_data_len;i++){
 8000f9c:	42b5      	cmp	r5, r6
	 return SPI1 -> DR;
 8000f9e:	89a1      	ldrh	r1, [r4, #12]
	 for(i = 0;i < send_data_len;i++){
 8000fa0:	d1f0      	bne.n	8000f84 <SPI1SendNByteReceiveNByte+0x14>
		 //Send data
		 SPI1Send1ByteReceive1Byte(&data_to_send[i]);
	 }
	 for(i = 0;i < receive_data_len;i++){
 8000fa2:	b18b      	cbz	r3, 8000fc8 <SPI1SendNByteReceiveNByte+0x58>
	 SPI1 -> DR = *data;
 8000fa4:	490d      	ldr	r1, [pc, #52]	; (8000fdc <SPI1SendNByteReceiveNByte+0x6c>)
 8000fa6:	18d4      	adds	r4, r2, r3
 8000fa8:	7803      	ldrb	r3, [r0, #0]
 8000faa:	818b      	strh	r3, [r1, #12]
	 while(!(SPI1 -> SR & SPI_SR_TXE));
 8000fac:	890b      	ldrh	r3, [r1, #8]
 8000fae:	079e      	lsls	r6, r3, #30
 8000fb0:	d5fc      	bpl.n	8000fac <SPI1SendNByteReceiveNByte+0x3c>
	 while(!(SPI1 -> SR & SPI_SR_RXNE));
 8000fb2:	890b      	ldrh	r3, [r1, #8]
 8000fb4:	07dd      	lsls	r5, r3, #31
 8000fb6:	d5fc      	bpl.n	8000fb2 <SPI1SendNByteReceiveNByte+0x42>
	 while(SPI1 -> SR & SPI_SR_BSY);
 8000fb8:	890b      	ldrh	r3, [r1, #8]
 8000fba:	061b      	lsls	r3, r3, #24
 8000fbc:	d4fc      	bmi.n	8000fb8 <SPI1SendNByteReceiveNByte+0x48>
	 return SPI1 -> DR;
 8000fbe:	898b      	ldrh	r3, [r1, #12]
 8000fc0:	f802 3b01 	strb.w	r3, [r2], #1
	 for(i = 0;i < receive_data_len;i++){
 8000fc4:	42a2      	cmp	r2, r4
 8000fc6:	d1ef      	bne.n	8000fa8 <SPI1SendNByteReceiveNByte+0x38>
		 //Receive data
		 data_to_read[i] = SPI1Send1ByteReceive1Byte(&data_to_send[0]);
	 }

	 //SPI1 CS disable (output high logical level)
	 GPIOA -> ODR 		|= GPIO_ODR_ODR_4;
 8000fc8:	4a03      	ldr	r2, [pc, #12]	; (8000fd8 <SPI1SendNByteReceiveNByte+0x68>)
 8000fca:	6953      	ldr	r3, [r2, #20]
 8000fcc:	f043 0310 	orr.w	r3, r3, #16
 8000fd0:	6153      	str	r3, [r2, #20]

}
 8000fd2:	bc70      	pop	{r4, r5, r6}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	40013000 	.word	0x40013000

08000fe0 <USART3Init>:

#include "USART.h"


//USART3 initialization function
void USART3Init(uint32_t baud_rate){
 8000fe0:	b510      	push	{r4, lr}

	//Before calculate baud rate, define OVER8 bit in CR1 (pg. 1011)
	//Define to 16x oversampling
	USART3 -> CR1		&= ~(USART_CR1_OVER8); 		//Oversampling by 16
 8000fe2:	4c25      	ldr	r4, [pc, #148]	; (8001078 <USART3Init+0x98>)
 8000fe4:	89a3      	ldrh	r3, [r4, #12]
 8000fe6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000fea:	81a3      	strh	r3, [r4, #12]
	//-fclk - clock of the APB1 bus
	//-OVER8 was bit set or reset in CR1 (value was 1 or 0)
	//USARTDIV was USART divider factor

	//This equatin was only wqalid when oversampling was 16x
	double baud_devider = (42000000.0)/((double)baud_rate) + 0.5; //we add 0.5 because of rounding !!!
 8000fec:	f7ff fa2e 	bl	800044c <__aeabi_ui2d>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	a11e      	add	r1, pc, #120	; (adr r1, 8001070 <USART3Init+0x90>)
 8000ff6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ffa:	f7ff fbc7 	bl	800078c <__aeabi_ddiv>
 8000ffe:	2200      	movs	r2, #0
 8001000:	4b1e      	ldr	r3, [pc, #120]	; (800107c <USART3Init+0x9c>)
 8001002:	f7ff f8e7 	bl	80001d4 <__adddf3>

	//Write calculate values in to baud rate register
	USART3 -> BRR 		= (uint16_t)baud_devider;
 8001006:	f7ff fca9 	bl	800095c <__aeabi_d2uiz>
 800100a:	b280      	uxth	r0, r0
 800100c:	8120      	strh	r0, [r4, #8]

	//Enable TX interrupt
	//USART3 -> CR1 		|= USART_CR1_TXEIE;

	//Enable RX interrupt
	USART3 -> CR1 		|= USART_CR1_RXNEIE;
 800100e:	89a3      	ldrh	r3, [r4, #12]

	//Enable interrupt
	//NVIC_EnableIRQ(USART3_IRQ);
	NVIC -> ISER[1] 				|= (1 << (USART3_IRQn-32)); 	//Enable USART3 interrupt
 8001010:	4a1b      	ldr	r2, [pc, #108]	; (8001080 <USART3Init+0xa0>)
	USART3 -> CR1 		|= USART_CR1_RXNEIE;
 8001012:	b29b      	uxth	r3, r3
 8001014:	f043 0320 	orr.w	r3, r3, #32
 8001018:	81a3      	strh	r3, [r4, #12]
	NVIC -> ISER[1] 				|= (1 << (USART3_IRQn-32)); 	//Enable USART3 interrupt
 800101a:	6853      	ldr	r3, [r2, #4]

	//Set priority
	NVIC -> IP[USART3_IRQn] 		= (uint8_t) 0x03;		//set priority of USART3_IRQ to 3 (lower are the number the higher are priority)
 800101c:	2103      	movs	r1, #3
	NVIC -> ISER[1] 				|= (1 << (USART3_IRQn-32)); 	//Enable USART3 interrupt
 800101e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001022:	6053      	str	r3, [r2, #4]
	NVIC -> IP[USART3_IRQn] 		= (uint8_t) 0x03;		//set priority of USART3_IRQ to 3 (lower are the number the higher are priority)
 8001024:	f882 1327 	strb.w	r1, [r2, #807]	; 0x327

	//8-bit data length
	USART3 -> CR1 		&= ~(USART_CR1_M);
 8001028:	89a3      	ldrh	r3, [r4, #12]
 800102a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800102e:	041b      	lsls	r3, r3, #16
 8001030:	0c1b      	lsrs	r3, r3, #16
 8001032:	81a3      	strh	r3, [r4, #12]

	//1-stop bit
	USART3 -> CR2 		&= ~(USART_CR2_STOP);
 8001034:	8a23      	ldrh	r3, [r4, #16]
 8001036:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800103a:	041b      	lsls	r3, r3, #16
 800103c:	0c1b      	lsrs	r3, r3, #16
 800103e:	8223      	strh	r3, [r4, #16]

	//Parety control disable
	USART3 -> CR1 		&= ~(USART_CR1_PCE);
 8001040:	89a3      	ldrh	r3, [r4, #12]
 8001042:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001046:	041b      	lsls	r3, r3, #16
 8001048:	0c1b      	lsrs	r3, r3, #16
 800104a:	81a3      	strh	r3, [r4, #12]

	//Enable reception
	USART3 -> CR1 		|= USART_CR1_RE;
 800104c:	89a3      	ldrh	r3, [r4, #12]
 800104e:	b29b      	uxth	r3, r3
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	81a3      	strh	r3, [r4, #12]

	//Enable transmition
	USART3 -> CR1 		|= USART_CR1_TE;
 8001056:	89a3      	ldrh	r3, [r4, #12]
 8001058:	b29b      	uxth	r3, r3
 800105a:	f043 0308 	orr.w	r3, r3, #8
 800105e:	81a3      	strh	r3, [r4, #12]

	//Enable USART3
	USART3 -> CR1 		|= USART_CR1_UE;
 8001060:	89a3      	ldrh	r3, [r4, #12]
 8001062:	b29b      	uxth	r3, r3
 8001064:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001068:	81a3      	strh	r3, [r4, #12]
 800106a:	bd10      	pop	{r4, pc}
 800106c:	f3af 8000 	nop.w
 8001070:	00000000 	.word	0x00000000
 8001074:	418406f4 	.word	0x418406f4
 8001078:	40004800 	.word	0x40004800
 800107c:	3fe00000 	.word	0x3fe00000
 8001080:	e000e100 	.word	0xe000e100

08001084 <USART3SendText>:

void USART3SendText(uint8_t *data, uint32_t length){

	uint32_t i = 0;

	for(i = 0;i < length;i++){
 8001084:	b149      	cbz	r1, 800109a <USART3SendText+0x16>
	USART3 -> DR 		= data;
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <USART3SendText+0x18>)
 8001088:	4401      	add	r1, r0
 800108a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800108e:	8093      	strh	r3, [r2, #4]
	while(!(USART3 -> SR & USART_SR_TXE));
 8001090:	8813      	ldrh	r3, [r2, #0]
 8001092:	061b      	lsls	r3, r3, #24
 8001094:	d5fc      	bpl.n	8001090 <USART3SendText+0xc>
	for(i = 0;i < length;i++){
 8001096:	4288      	cmp	r0, r1
 8001098:	d1f7      	bne.n	800108a <USART3SendText+0x6>
 800109a:	4770      	bx	lr
 800109c:	40004800 	.word	0x40004800

080010a0 <W5500SpiConnCheck>:
//
//}
//Check SPI connection with external W5500 ethernet module
//0 - connection established thru SPI communication
//1 - connection error
uint8_t W5500SpiConnCheck(void){
 80010a0:	b500      	push	{lr}
 80010a2:	b085      	sub	sp, #20

	//temporary register, necessary to initialize to initial state
	uint8_t temp_array[10] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 80010a4:	2300      	movs	r3, #0

	//Read version of W5500 external device
	temp_array[0]	= MSB(W5500_CBR_VERSIONR);
	temp_array[1]	= LSB(W5500_CBR_VERSIONR);
 80010a6:	2239      	movs	r2, #57	; 0x39
	temp_array[2] 	= (W5500_CP_BSB_CR
					| W5500_CP_READ
					| W5500_CP_OM_VDLM); 			//set byte for reading from common register

	//Read thru SPI data interface
	temp_array[9] = SPI1SendNByteReceive1Byte(temp_array,3);
 80010a8:	a801      	add	r0, sp, #4
 80010aa:	2103      	movs	r1, #3
	uint8_t temp_array[10] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 80010ac:	9301      	str	r3, [sp, #4]
 80010ae:	9302      	str	r3, [sp, #8]
 80010b0:	f8ad 300c 	strh.w	r3, [sp, #12]
	temp_array[1]	= LSB(W5500_CBR_VERSIONR);
 80010b4:	f88d 2005 	strb.w	r2, [sp, #5]
	temp_array[9] = SPI1SendNByteReceive1Byte(temp_array,3);
 80010b8:	f7ff ff26 	bl	8000f08 <SPI1SendNByteReceive1Byte>
	if(temp_array[9] == W5500_CBR_VERSIONR_CON){
		return 0; 		//W5500 device is proper connected thru SPI connection
	}else{
		return 1; 		//W5500 device SPI error
	}
}
 80010bc:	3804      	subs	r0, #4
 80010be:	bf18      	it	ne
 80010c0:	2001      	movne	r0, #1
 80010c2:	b005      	add	sp, #20
 80010c4:	f85d fb04 	ldr.w	pc, [sp], #4

080010c8 <W5500InitV2>:
//IP address 			<ip> 		for example {192,168,1,1}
//Gateway address		<gateway> 	for example {192,168,1,1}
//Subnet mask 			<submask> 	for example {255,255,255,0}
//MAC address 			<mac> 		for example {0x00,0x08,0xdc,0x01,0x02,0x03}
//Returned value 		0-OK status 1- error
void W5500InitV2(uint8_t *ip, uint8_t *gateway, uint8_t *submask, uint8_t *mac){
 80010c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t temp_array[10] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

	//S/W reset W5500
	temp_array[0] 	= MSB(W5500_CRB_MR);			//set address for common mode register MSB
	temp_array[1] 	= LSB(W5500_CRB_MR);			//set address for common mode register LSB
	temp_array[2] 	= (W5500_CP_BSB_CR
 80010cc:	2504      	movs	r5, #4
void W5500InitV2(uint8_t *ip, uint8_t *gateway, uint8_t *submask, uint8_t *mac){
 80010ce:	b085      	sub	sp, #20
	uint8_t temp_array[10] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 80010d0:	2400      	movs	r4, #0
					| W5500_CP_WRITE
					| W5500_CP_OM_VDLM); 			//set byte for write in to common register
	temp_array[3] 	= (W5500_CRB_MR_RST); 			//write in to common mode register
 80010d2:	f04f 0e80 	mov.w	lr, #128	; 0x80
void W5500InitV2(uint8_t *ip, uint8_t *gateway, uint8_t *submask, uint8_t *mac){
 80010d6:	4607      	mov	r7, r0
 80010d8:	4689      	mov	r9, r1
	//write thru spi communication
	SPI1SendNByte(temp_array,4);
 80010da:	eb0d 0005 	add.w	r0, sp, r5
 80010de:	4629      	mov	r1, r5
	uint8_t temp_array[10] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 80010e0:	9401      	str	r4, [sp, #4]
void W5500InitV2(uint8_t *ip, uint8_t *gateway, uint8_t *submask, uint8_t *mac){
 80010e2:	4690      	mov	r8, r2
 80010e4:	461e      	mov	r6, r3
	uint8_t temp_array[10] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 80010e6:	9402      	str	r4, [sp, #8]
 80010e8:	f8ad 400c 	strh.w	r4, [sp, #12]
	temp_array[2] 	= (W5500_CP_BSB_CR
 80010ec:	f88d 5006 	strb.w	r5, [sp, #6]
	temp_array[3] 	= (W5500_CRB_MR_RST); 			//write in to common mode register
 80010f0:	f88d e007 	strb.w	lr, [sp, #7]
	SPI1SendNByte(temp_array,4);
 80010f4:	f7ff feb0 	bl	8000e58 <SPI1SendNByte>

	//Read PHY register if PHY was reset
	temp_array[0]	= MSB(W5500_CRB_MR);
 80010f8:	f88d 4004 	strb.w	r4, [sp, #4]
	temp_array[1]	= LSB(W5500_CRB_MR);
 80010fc:	f88d 4005 	strb.w	r4, [sp, #5]
	temp_array[2] 	= (W5500_CP_BSB_CR
 8001100:	f88d 4006 	strb.w	r4, [sp, #6]
					| W5500_CP_READ
					| W5500_CP_OM_VDLM); 				//set byte for reading from PHY
	//wait on PHY comes back from reset state
	while((SPI1SendNByteReceive1Byte(temp_array,3) & W5500_CRB_MR_RST));
 8001104:	2103      	movs	r1, #3
 8001106:	a801      	add	r0, sp, #4
 8001108:	f7ff fefe 	bl	8000f08 <SPI1SendNByteReceive1Byte>
 800110c:	0603      	lsls	r3, r0, #24
 800110e:	d4f9      	bmi.n	8001104 <W5500InitV2+0x3c>
	temp_array[0] 		= MSB(W5500_CRB_MR);			//set address for common mode register MSB
	temp_array[1] 		= LSB(W5500_CRB_MR);			//set address for common mode register LSB
	temp_array[2] 		= (W5500_CP_BSB_CR
						| W5500_CP_WRITE
						| W5500_CP_OM_VDLM); 			//set byte for write in to common register
	temp_array[3] 		&= ~(W5500_CRB_MR_RST
 8001110:	f89d 3007 	ldrb.w	r3, [sp, #7]
	temp_array[2] 		= (W5500_CP_BSB_CR
 8001114:	2404      	movs	r4, #4
	temp_array[0] 		= MSB(W5500_CRB_MR);			//set address for common mode register MSB
 8001116:	2500      	movs	r5, #0
	temp_array[3] 		&= ~(W5500_CRB_MR_RST
 8001118:	f003 0345 	and.w	r3, r3, #69	; 0x45
						| W5500_CRB_MR_WOL
						| W5500_CRB_MR_PB
						| W5500_CRB_MR_PPPOE
						| W5500_CRB_MR_FARP); 			//write in to common mode register
	//write thru spi communication
	SPI1SendNByte(temp_array,4);
 800111c:	4621      	mov	r1, r4
 800111e:	eb0d 0004 	add.w	r0, sp, r4
	temp_array[3] 		&= ~(W5500_CRB_MR_RST
 8001122:	f88d 3007 	strb.w	r3, [sp, #7]
	temp_array[2] 		= (W5500_CP_BSB_CR
 8001126:	f88d 4006 	strb.w	r4, [sp, #6]
	temp_array[0] 		= MSB(W5500_CRB_MR);			//set address for common mode register MSB
 800112a:	f88d 5004 	strb.w	r5, [sp, #4]
	temp_array[1] 		= LSB(W5500_CRB_MR);			//set address for common mode register LSB
 800112e:	f88d 5005 	strb.w	r5, [sp, #5]
	SPI1SendNByte(temp_array,4);
 8001132:	f7ff fe91 	bl	8000e58 <SPI1SendNByte>
	temp_array[0] 		= MSB(W5500_CRB_GAR_0);			//set address for common gateway register MSB
	temp_array[1] 		= LSB(W5500_CRB_GAR_0);			//set address for common gateway register LSB
	temp_array[2] 		= (W5500_CP_BSB_CR
						| W5500_CP_WRITE
						| W5500_CP_OM_VDLM); 			//set byte for write in to common register
	temp_array[3] 		= gateway[0]; 					//setup gateway address byte 0
 8001136:	f899 1000 	ldrb.w	r1, [r9]
	temp_array[4] 		= gateway[1]; 					//setup gateway address byte 1
 800113a:	f899 0001 	ldrb.w	r0, [r9, #1]
	temp_array[5] 		= gateway[2]; 					//setup gateway address byte 2
 800113e:	f899 2002 	ldrb.w	r2, [r9, #2]
	temp_array[3] 		= gateway[0]; 					//setup gateway address byte 0
 8001142:	f88d 1007 	strb.w	r1, [sp, #7]
	temp_array[1] 		= LSB(W5500_CRB_GAR_0);			//set address for common gateway register LSB
 8001146:	2301      	movs	r3, #1
 8001148:	f88d 3005 	strb.w	r3, [sp, #5]
	temp_array[4] 		= gateway[1]; 					//setup gateway address byte 1
 800114c:	f88d 0008 	strb.w	r0, [sp, #8]
	temp_array[6] 		= gateway[3]; 					//setup gateway address byte 3
 8001150:	f899 3003 	ldrb.w	r3, [r9, #3]
	temp_array[5] 		= gateway[2]; 					//setup gateway address byte 2
 8001154:	f88d 2009 	strb.w	r2, [sp, #9]
	//write thru spi communication
	SPI1SendNByte(temp_array,7);
 8001158:	eb0d 0004 	add.w	r0, sp, r4
 800115c:	2107      	movs	r1, #7
	temp_array[6] 		= gateway[3]; 					//setup gateway address byte 3
 800115e:	f88d 300a 	strb.w	r3, [sp, #10]
	temp_array[0] 		= MSB(W5500_CRB_GAR_0);			//set address for common gateway register MSB
 8001162:	f88d 5004 	strb.w	r5, [sp, #4]
	temp_array[2] 		= (W5500_CP_BSB_CR
 8001166:	f88d 4006 	strb.w	r4, [sp, #6]
	SPI1SendNByte(temp_array,7);
 800116a:	f7ff fe75 	bl	8000e58 <SPI1SendNByte>
	temp_array[0] 		= MSB(W5500_CRB_SUBR_0);		//set address for common subnet mask register MSB
	temp_array[1] 		= LSB(W5500_CRB_SUBR_0);		//set address for common subnet mask register LSB
	temp_array[2] 		= (W5500_CP_BSB_CR
						| W5500_CP_WRITE
						| W5500_CP_OM_VDLM); 			//set byte for write in to common register
	temp_array[3] 		= submask[0]; 					//setup subnet mask address byte 0
 800116e:	f898 0000 	ldrb.w	r0, [r8]
	temp_array[4] 		= submask[1]; 					//setup subnet mask address byte 1
 8001172:	f898 e001 	ldrb.w	lr, [r8, #1]
	temp_array[5] 		= submask[2]; 					//setup subnet mask address byte 2
 8001176:	f898 2002 	ldrb.w	r2, [r8, #2]
	temp_array[6] 		= submask[3]; 					//setup subnet mask address byte 3
 800117a:	f898 3003 	ldrb.w	r3, [r8, #3]
	temp_array[3] 		= submask[0]; 					//setup subnet mask address byte 0
 800117e:	f88d 0007 	strb.w	r0, [sp, #7]
	temp_array[1] 		= LSB(W5500_CRB_SUBR_0);		//set address for common subnet mask register LSB
 8001182:	2105      	movs	r1, #5
 8001184:	f88d 1005 	strb.w	r1, [sp, #5]
	//write thru spi communication
	SPI1SendNByte(temp_array,7);
 8001188:	eb0d 0004 	add.w	r0, sp, r4
 800118c:	2107      	movs	r1, #7
	temp_array[4] 		= submask[1]; 					//setup subnet mask address byte 1
 800118e:	f88d e008 	strb.w	lr, [sp, #8]
	temp_array[5] 		= submask[2]; 					//setup subnet mask address byte 2
 8001192:	f88d 2009 	strb.w	r2, [sp, #9]
	temp_array[6] 		= submask[3]; 					//setup subnet mask address byte 3
 8001196:	f88d 300a 	strb.w	r3, [sp, #10]
	temp_array[0] 		= MSB(W5500_CRB_SUBR_0);		//set address for common subnet mask register MSB
 800119a:	f88d 5004 	strb.w	r5, [sp, #4]
	temp_array[2] 		= (W5500_CP_BSB_CR
 800119e:	f88d 4006 	strb.w	r4, [sp, #6]
	SPI1SendNByte(temp_array,7);
 80011a2:	f7ff fe59 	bl	8000e58 <SPI1SendNByte>
	temp_array[0] 		= MSB(W5500_CRB_SHAR_0);		//set address for common hardware address register MSB
	temp_array[1] 		= LSB(W5500_CRB_SHAR_0);		//set address for common hardware address register LSB
	temp_array[2] 		= (W5500_CP_BSB_CR
						| W5500_CP_WRITE
						| W5500_CP_OM_VDLM); 			//set byte for write in to common register
	temp_array[3] 		= mac[0]; 						//setup hardware address byte 0
 80011a6:	7832      	ldrb	r2, [r6, #0]
	temp_array[4] 		= mac[1]; 						//setup hardware address byte 1
 80011a8:	7870      	ldrb	r0, [r6, #1]
	temp_array[5] 		= mac[2]; 						//setup hardware address byte 2
 80011aa:	f896 c002 	ldrb.w	ip, [r6, #2]
	temp_array[6] 		= mac[3]; 						//setup hardware address byte 3
 80011ae:	f896 e003 	ldrb.w	lr, [r6, #3]
	temp_array[3] 		= mac[0]; 						//setup hardware address byte 0
 80011b2:	f88d 2007 	strb.w	r2, [sp, #7]
	temp_array[1] 		= LSB(W5500_CRB_SHAR_0);		//set address for common hardware address register LSB
 80011b6:	2309      	movs	r3, #9
	temp_array[7] 		= mac[4]; 						//setup hardware address byte 4
 80011b8:	7932      	ldrb	r2, [r6, #4]
	temp_array[1] 		= LSB(W5500_CRB_SHAR_0);		//set address for common hardware address register LSB
 80011ba:	f88d 3005 	strb.w	r3, [sp, #5]
	temp_array[8] 		= mac[5]; 						//setup hardware address byte 5
	//write thru spi communication
	SPI1SendNByte(temp_array,9);
 80011be:	4619      	mov	r1, r3
	temp_array[4] 		= mac[1]; 						//setup hardware address byte 1
 80011c0:	f88d 0008 	strb.w	r0, [sp, #8]
	temp_array[8] 		= mac[5]; 						//setup hardware address byte 5
 80011c4:	7973      	ldrb	r3, [r6, #5]
	temp_array[5] 		= mac[2]; 						//setup hardware address byte 2
 80011c6:	f88d c009 	strb.w	ip, [sp, #9]
	SPI1SendNByte(temp_array,9);
 80011ca:	eb0d 0004 	add.w	r0, sp, r4
	temp_array[6] 		= mac[3]; 						//setup hardware address byte 3
 80011ce:	f88d e00a 	strb.w	lr, [sp, #10]
	temp_array[7] 		= mac[4]; 						//setup hardware address byte 4
 80011d2:	f88d 200b 	strb.w	r2, [sp, #11]
	temp_array[8] 		= mac[5]; 						//setup hardware address byte 5
 80011d6:	f88d 300c 	strb.w	r3, [sp, #12]
	temp_array[0] 		= MSB(W5500_CRB_SHAR_0);		//set address for common hardware address register MSB
 80011da:	f88d 5004 	strb.w	r5, [sp, #4]
	temp_array[2] 		= (W5500_CP_BSB_CR
 80011de:	f88d 4006 	strb.w	r4, [sp, #6]
	SPI1SendNByte(temp_array,9);
 80011e2:	f7ff fe39 	bl	8000e58 <SPI1SendNByte>


	//setup source IP address register
	temp_array[0] 		= MSB(W5500_CRB_SIPR_0);		//set address for source IP register MSB
	temp_array[1] 		= LSB(W5500_CRB_SIPR_0);		//set address for source IP register LSB
 80011e6:	f04f 0c0f 	mov.w	ip, #15
	temp_array[2] 		= (W5500_CP_BSB_CR
						| W5500_CP_WRITE
						| W5500_CP_OM_VDLM); 			//set byte for write in to common register
	temp_array[3] 		= ip[0]; 						//setup source IP address byte 0
 80011ea:	f897 e000 	ldrb.w	lr, [r7]
	temp_array[4] 		= ip[1]; 						//setup source IP address byte 1
	temp_array[5] 		= ip[2]; 						//setup source IP address byte 2
 80011ee:	78ba      	ldrb	r2, [r7, #2]
	temp_array[6] 		= ip[3]; 						//setup source IP address byte 3
 80011f0:	78fb      	ldrb	r3, [r7, #3]
	temp_array[4] 		= ip[1]; 						//setup source IP address byte 1
 80011f2:	787e      	ldrb	r6, [r7, #1]
	temp_array[1] 		= LSB(W5500_CRB_SIPR_0);		//set address for source IP register LSB
 80011f4:	f88d c005 	strb.w	ip, [sp, #5]
	//write thru spi communication
	SPI1SendNByte(temp_array,7);
 80011f8:	eb0d 0004 	add.w	r0, sp, r4
 80011fc:	2107      	movs	r1, #7
	temp_array[3] 		= ip[0]; 						//setup source IP address byte 0
 80011fe:	f88d e007 	strb.w	lr, [sp, #7]
	temp_array[5] 		= ip[2]; 						//setup source IP address byte 2
 8001202:	f88d 2009 	strb.w	r2, [sp, #9]
	temp_array[6] 		= ip[3]; 						//setup source IP address byte 3
 8001206:	f88d 300a 	strb.w	r3, [sp, #10]
	temp_array[0] 		= MSB(W5500_CRB_SIPR_0);		//set address for source IP register MSB
 800120a:	f88d 5004 	strb.w	r5, [sp, #4]
	temp_array[2] 		= (W5500_CP_BSB_CR
 800120e:	f88d 4006 	strb.w	r4, [sp, #6]
	temp_array[4] 		= ip[1]; 						//setup source IP address byte 1
 8001212:	f88d 6008 	strb.w	r6, [sp, #8]
	SPI1SendNByte(temp_array,7);
 8001216:	f7ff fe1f 	bl	8000e58 <SPI1SendNByte>


	//setup PHY configuration register
	temp_array[0] 	= MSB(W5500_CRB_PHYCFGR);
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <W5500InitV2+0x168>)
 800121c:	9301      	str	r3, [sp, #4]
					| W5500_CP_OM_VDLM); 				//write in to common register
	temp_array[3] 	= (W5500_CRB_PHYCFGR_RST
					| W5500_CRB_PHYCFGR_OPMD
					| W5500_CRB_PHYCFGR_OPMDC_100FD); 	//100BT full-duplex auto negotiation disable
	//write thru spi communication
	SPI1SendNByte(temp_array,4);
 800121e:	4621      	mov	r1, r4
 8001220:	eb0d 0004 	add.w	r0, sp, r4
 8001224:	f7ff fe18 	bl	8000e58 <SPI1SendNByte>
//
//	//write thru spi communication
//	SPI1SendNByte(temp_array,5);


}
 8001228:	b005      	add	sp, #20
 800122a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800122e:	bf00      	nop
 8001230:	d8042e00 	.word	0xd8042e00

08001234 <W5500InitTCP>:
//Socket number 	<socket_no> 	(0,1,2,3,4,5,6,7)
//Port number 		<port>			for example 1000
//TX buffer size 	<TX_buff_size> 	(0,1,2,4,8,16) KB
//RX buffer size 	<RX_buff_size> 	(0,1,2,4,8,16) KB
//Returned value 	0-OK status 1- error
uint8_t W5500InitTCP(uint8_t socket_no, uint16_t port, uint8_t TX_buff_size, uint8_t RX_buff_size){
 8001234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001238:	b084      	sub	sp, #16

	//temporary register, necessary to initialize to initial state
	uint8_t temp_array[10] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 800123a:	2400      	movs	r4, #0
 800123c:	9402      	str	r4, [sp, #8]
 800123e:	9401      	str	r4, [sp, #4]
 8001240:	f8ad 400c 	strh.w	r4, [sp, #12]
	//socket select register which select proper offset address allocation
	uint8_t socket_sel_register = 	(socket_no == 0x00) ? W5500_CP_BSB_S0_R://socket 0 address
 8001244:	b178      	cbz	r0, 8001266 <W5500InitTCP+0x32>
 8001246:	2801      	cmp	r0, #1
 8001248:	d05b      	beq.n	8001302 <W5500InitTCP+0xce>
 800124a:	2802      	cmp	r0, #2
 800124c:	d05d      	beq.n	800130a <W5500InitTCP+0xd6>
 800124e:	2803      	cmp	r0, #3
 8001250:	d059      	beq.n	8001306 <W5500InitTCP+0xd2>
 8001252:	2804      	cmp	r0, #4
 8001254:	d05b      	beq.n	800130e <W5500InitTCP+0xda>
 8001256:	2805      	cmp	r0, #5
 8001258:	d05b      	beq.n	8001312 <W5500InitTCP+0xde>
 800125a:	2806      	cmp	r0, #6
 800125c:	d05b      	beq.n	8001316 <W5500InitTCP+0xe2>
 800125e:	2807      	cmp	r0, #7
 8001260:	d05b      	beq.n	800131a <W5500InitTCP+0xe6>
									(socket_no == 0x06) ? W5500_CP_BSB_S6_R://socket 6 address
									(socket_no == 0x07) ? W5500_CP_BSB_S7_R://socket 7 address
									0; 										//default error

	//error not a valid socket number
	if(socket_sel_register == 0) return 1;
 8001262:	2001      	movs	r0, #1
 8001264:	e04a      	b.n	80012fc <W5500InitTCP+0xc8>
 8001266:	270c      	movs	r7, #12
	temp_array[0] 	= MSB(W5500_CRB_SIMR);
	temp_array[1] 	= LSB(W5500_CRB_SIMR);
	temp_array[2] 	= (W5500_CP_BSB_CR
					| W5500_CP_WRITE
					| W5500_CP_OM_VDLM); 				//write in to common register
	temp_array[3] 	= (1 << socket_no); 				//Enable socket n mask interrupt register
 8001268:	f04f 0801 	mov.w	r8, #1
	temp_array[2] 	= (W5500_CP_BSB_CR
 800126c:	2504      	movs	r5, #4
	temp_array[3] 	= (1 << socket_no); 				//Enable socket n mask interrupt register
 800126e:	fa08 f000 	lsl.w	r0, r8, r0
 8001272:	460e      	mov	r6, r1
 8001274:	4699      	mov	r9, r3
	//write thru spi communication
	SPI1SendNByte(temp_array,4);
 8001276:	4629      	mov	r1, r5
	temp_array[1] 	= LSB(W5500_CRB_SIMR);
 8001278:	2318      	movs	r3, #24
	temp_array[3] 	= (1 << socket_no); 				//Enable socket n mask interrupt register
 800127a:	f88d 0007 	strb.w	r0, [sp, #7]
	SPI1SendNByte(temp_array,4);
 800127e:	eb0d 0005 	add.w	r0, sp, r5
 8001282:	4692      	mov	sl, r2
	temp_array[1] 	= LSB(W5500_CRB_SIMR);
 8001284:	f88d 3005 	strb.w	r3, [sp, #5]
	temp_array[2] 	= (W5500_CP_BSB_CR
 8001288:	f88d 5006 	strb.w	r5, [sp, #6]
	SPI1SendNByte(temp_array,4);
 800128c:	f7ff fde4 	bl	8000e58 <SPI1SendNByte>


	//clear Socket interrupt register SIR
	temp_array[0] 	= MSB(W5500_CRB_SIR);
 8001290:	4b23      	ldr	r3, [pc, #140]	; (8001320 <W5500InitTCP+0xec>)
 8001292:	9301      	str	r3, [sp, #4]
	temp_array[2] 	= (W5500_CP_BSB_CR
					| W5500_CP_WRITE
					| W5500_CP_OM_VDLM); 				//write in to common register
	temp_array[3] 	= 0x00; 							//Clear all status flags in socket interrupt register
	//write thru spi communication
	SPI1SendNByte(temp_array,4);
 8001294:	4629      	mov	r1, r5
 8001296:	eb0d 0005 	add.w	r0, sp, r5
 800129a:	f7ff fddd 	bl	8000e58 <SPI1SendNByte>


	//setup Socket n RX and TX memory allocation
	temp_array[0] 	= MSB(W5500_SR_RXBUF_SIZE);
 800129e:	2400      	movs	r4, #0
	temp_array[1] 	= LSB(W5500_SR_RXBUF_SIZE);
 80012a0:	231e      	movs	r3, #30
					| W5500_CP_WRITE
					| W5500_CP_OM_VDLM); 				//write in to socket n configuration register
	temp_array[3] 	= RX_buff_size; 					//Define RX buffer size
	temp_array[4] 	= TX_buff_size; 					//Define TX buffer size at address (RX buffer size register) + 1 = 0x001f
	//write thru spi communication
	SPI1SendNByte(temp_array,5);
 80012a2:	2105      	movs	r1, #5
 80012a4:	eb0d 0005 	add.w	r0, sp, r5
	temp_array[1] 	= LSB(W5500_SR_RXBUF_SIZE);
 80012a8:	f88d 3005 	strb.w	r3, [sp, #5]
	temp_array[2] 	= (socket_sel_register          	//Select socket n
 80012ac:	f88d 7006 	strb.w	r7, [sp, #6]
	temp_array[3] 	= RX_buff_size; 					//Define RX buffer size
 80012b0:	f88d 9007 	strb.w	r9, [sp, #7]
	temp_array[4] 	= TX_buff_size; 					//Define TX buffer size at address (RX buffer size register) + 1 = 0x001f
 80012b4:	f88d a008 	strb.w	sl, [sp, #8]
	temp_array[0] 	= MSB(W5500_SR_RXBUF_SIZE);
 80012b8:	f88d 4004 	strb.w	r4, [sp, #4]
	SPI1SendNByte(temp_array,5);
 80012bc:	f7ff fdcc 	bl	8000e58 <SPI1SendNByte>
	temp_array[2] 	= (socket_sel_register          	//Select socket n
					| W5500_CP_WRITE
					| W5500_CP_OM_VDLM); 				//write in to socket n configuration register
	temp_array[3] 	= (W5500_SR_MR_TCP); //| W5500_SR_MR_ND_MC_MMB); 					//Configure socket n as TCP protocol | Enable no delayed ACK
	//write thru spi communication
	SPI1SendNByte(temp_array,4);
 80012c0:	4629      	mov	r1, r5
 80012c2:	eb0d 0005 	add.w	r0, sp, r5
	temp_array[3] 	= (W5500_SR_MR_TCP); //| W5500_SR_MR_ND_MC_MMB); 					//Configure socket n as TCP protocol | Enable no delayed ACK
 80012c6:	f88d 8007 	strb.w	r8, [sp, #7]
	temp_array[0] 	= MSB(W5500_SR_MR);
 80012ca:	f88d 4004 	strb.w	r4, [sp, #4]
	temp_array[1] 	= LSB(W5500_SR_MR);
 80012ce:	f88d 4005 	strb.w	r4, [sp, #5]
	temp_array[2] 	= (socket_sel_register          	//Select socket n
 80012d2:	f88d 7006 	strb.w	r7, [sp, #6]
	SPI1SendNByte(temp_array,4);
 80012d6:	f7ff fdbf 	bl	8000e58 <SPI1SendNByte>
					| W5500_CP_WRITE
					| W5500_CP_OM_VDLM); 				//write in to socket n configuration register
	temp_array[3] 	= MSB(port);						//Configure MSB byte of port register
	temp_array[4] 	= LSB(port); 						//Configure LSB byte of port register
	//write thru spi communication
	SPI1SendNByte(temp_array,5);
 80012da:	eb0d 0005 	add.w	r0, sp, r5
	temp_array[3] 	= MSB(port);						//Configure MSB byte of port register
 80012de:	0a33      	lsrs	r3, r6, #8
	SPI1SendNByte(temp_array,5);
 80012e0:	2105      	movs	r1, #5
	temp_array[0] 	= MSB(W5500_SR_PORT_0);
 80012e2:	f88d 4004 	strb.w	r4, [sp, #4]
	temp_array[1] 	= LSB(W5500_SR_PORT_0);
 80012e6:	f88d 5005 	strb.w	r5, [sp, #5]
	temp_array[2] 	= (socket_sel_register          	//Select socket n
 80012ea:	f88d 7006 	strb.w	r7, [sp, #6]
	temp_array[4] 	= LSB(port); 						//Configure LSB byte of port register
 80012ee:	f88d 6008 	strb.w	r6, [sp, #8]
	temp_array[3] 	= MSB(port);						//Configure MSB byte of port register
 80012f2:	f88d 3007 	strb.w	r3, [sp, #7]
	SPI1SendNByte(temp_array,5);
 80012f6:	f7ff fdaf 	bl	8000e58 <SPI1SendNByte>

	return 0;
 80012fa:	4620      	mov	r0, r4
}
 80012fc:	b004      	add	sp, #16
 80012fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001302:	272c      	movs	r7, #44	; 0x2c
 8001304:	e7b0      	b.n	8001268 <W5500InitTCP+0x34>
 8001306:	276c      	movs	r7, #108	; 0x6c
 8001308:	e7ae      	b.n	8001268 <W5500InitTCP+0x34>
 800130a:	274c      	movs	r7, #76	; 0x4c
 800130c:	e7ac      	b.n	8001268 <W5500InitTCP+0x34>
 800130e:	278c      	movs	r7, #140	; 0x8c
 8001310:	e7aa      	b.n	8001268 <W5500InitTCP+0x34>
 8001312:	27ac      	movs	r7, #172	; 0xac
 8001314:	e7a8      	b.n	8001268 <W5500InitTCP+0x34>
 8001316:	27cc      	movs	r7, #204	; 0xcc
 8001318:	e7a6      	b.n	8001268 <W5500InitTCP+0x34>
 800131a:	27ec      	movs	r7, #236	; 0xec
 800131c:	e7a4      	b.n	8001268 <W5500InitTCP+0x34>
 800131e:	bf00      	nop
 8001320:	00041700 	.word	0x00041700

08001324 <W5500OpenTCPServer>:

//Open TCP protocol
//Socket number 	<socket_no> 	(0,1,2,3,4,5,6,7)
//Returned value 0-OK status 1- error
uint8_t W5500OpenTCPServer(uint8_t socket_no){
 8001324:	b570      	push	{r4, r5, r6, lr}
 8001326:	b084      	sub	sp, #16

	//temporary register, necessary to initialize to initial state
	uint8_t temp_array[10] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 8001328:	2300      	movs	r3, #0
 800132a:	9302      	str	r3, [sp, #8]
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	f8ad 300c 	strh.w	r3, [sp, #12]
	//socket select register which select proper offset address allocation
	uint8_t socket_sel_register = 	(socket_no == 0x00) ? W5500_CP_BSB_S0_R://socket 0 address
 8001332:	b190      	cbz	r0, 800135a <W5500OpenTCPServer+0x36>
 8001334:	2801      	cmp	r0, #1
 8001336:	d04c      	beq.n	80013d2 <W5500OpenTCPServer+0xae>
 8001338:	2802      	cmp	r0, #2
 800133a:	d050      	beq.n	80013de <W5500OpenTCPServer+0xba>
 800133c:	2803      	cmp	r0, #3
 800133e:	d04b      	beq.n	80013d8 <W5500OpenTCPServer+0xb4>
 8001340:	2804      	cmp	r0, #4
 8001342:	d04f      	beq.n	80013e4 <W5500OpenTCPServer+0xc0>
 8001344:	2805      	cmp	r0, #5
 8001346:	d050      	beq.n	80013ea <W5500OpenTCPServer+0xc6>
 8001348:	2806      	cmp	r0, #6
 800134a:	d051      	beq.n	80013f0 <W5500OpenTCPServer+0xcc>
 800134c:	2807      	cmp	r0, #7
 800134e:	bf15      	itete	ne
 8001350:	2604      	movne	r6, #4
 8001352:	26ec      	moveq	r6, #236	; 0xec
 8001354:	461d      	movne	r5, r3
 8001356:	25e8      	moveq	r5, #232	; 0xe8
 8001358:	e001      	b.n	800135e <W5500OpenTCPServer+0x3a>
 800135a:	260c      	movs	r6, #12
 800135c:	2508      	movs	r5, #8
	temp_array[2] 	= (socket_sel_register
					| W5500_CP_WRITE
					| W5500_CP_OM_VDLM); 				//write in to socket n configuration register
	temp_array[3] 	= W5500_SR_CR_OPEN; 				//open command
	//write thru spi communication
	SPI1SendNByte(temp_array,4);
 800135e:	2104      	movs	r1, #4
	temp_array[1] 	= LSB(W5500_SR_CR);
 8001360:	2301      	movs	r3, #1
	SPI1SendNByte(temp_array,4);
 8001362:	eb0d 0001 	add.w	r0, sp, r1
	temp_array[1] 	= LSB(W5500_SR_CR);
 8001366:	f88d 3005 	strb.w	r3, [sp, #5]
	temp_array[3] 	= W5500_SR_CR_OPEN; 				//open command
 800136a:	f88d 3007 	strb.w	r3, [sp, #7]
	temp_array[2] 	= (socket_sel_register
 800136e:	f88d 6006 	strb.w	r6, [sp, #6]
	SPI1SendNByte(temp_array,4);
 8001372:	f7ff fd71 	bl	8000e58 <SPI1SendNByte>

	//Read status register
	temp_array[0]	= MSB(W5500_SR_SR);
 8001376:	2200      	movs	r2, #0
	temp_array[1]	= LSB(W5500_SR_SR);
 8001378:	2303      	movs	r3, #3
	temp_array[2] 	= (socket_sel_register
 800137a:	f88d 5006 	strb.w	r5, [sp, #6]
	temp_array[0]	= MSB(W5500_SR_SR);
 800137e:	f88d 2004 	strb.w	r2, [sp, #4]
	temp_array[1]	= LSB(W5500_SR_SR);
 8001382:	f88d 3005 	strb.w	r3, [sp, #5]
					| W5500_CP_READ
					| W5500_CP_OM_VDLM); 				//set byte for reading from common register

	//wait on Socket n SOCK_INIT flag
	while(!(SPI1SendNByteReceive1Byte(temp_array,3) == W5500_SR_SR_SOCK_INIT));
 8001386:	2103      	movs	r1, #3
 8001388:	a801      	add	r0, sp, #4
 800138a:	f7ff fdbd 	bl	8000f08 <SPI1SendNByteReceive1Byte>
 800138e:	2813      	cmp	r0, #19
 8001390:	d1f9      	bne.n	8001386 <W5500OpenTCPServer+0x62>
	temp_array[2] 	= (socket_sel_register
					| W5500_CP_WRITE
					| W5500_CP_OM_VDLM); 				//write in to socket n configuration register
	temp_array[3] 	= W5500_SR_CR_LISTEN; 				//listen command
	//write thru spi communication
	SPI1SendNByte(temp_array,4);
 8001392:	2104      	movs	r1, #4
	temp_array[3] 	= W5500_SR_CR_LISTEN; 				//listen command
 8001394:	2302      	movs	r3, #2
	temp_array[0] 	= MSB(W5500_SR_CR);
 8001396:	2400      	movs	r4, #0
	temp_array[1] 	= LSB(W5500_SR_CR);
 8001398:	2201      	movs	r2, #1
	SPI1SendNByte(temp_array,4);
 800139a:	eb0d 0001 	add.w	r0, sp, r1
	temp_array[3] 	= W5500_SR_CR_LISTEN; 				//listen command
 800139e:	f88d 3007 	strb.w	r3, [sp, #7]
	temp_array[2] 	= (socket_sel_register
 80013a2:	f88d 6006 	strb.w	r6, [sp, #6]
	temp_array[0] 	= MSB(W5500_SR_CR);
 80013a6:	f88d 4004 	strb.w	r4, [sp, #4]
	temp_array[1] 	= LSB(W5500_SR_CR);
 80013aa:	f88d 2005 	strb.w	r2, [sp, #5]
	SPI1SendNByte(temp_array,4);
 80013ae:	f7ff fd53 	bl	8000e58 <SPI1SendNByte>


	//Read status register
	temp_array[0]	= MSB(W5500_SR_SR);
	temp_array[1]	= LSB(W5500_SR_SR);
 80013b2:	2303      	movs	r3, #3
	temp_array[0]	= MSB(W5500_SR_SR);
 80013b4:	f88d 4004 	strb.w	r4, [sp, #4]
	temp_array[2] 	= (socket_sel_register
 80013b8:	f88d 5006 	strb.w	r5, [sp, #6]
	temp_array[1]	= LSB(W5500_SR_SR);
 80013bc:	f88d 3005 	strb.w	r3, [sp, #5]
					| W5500_CP_READ
					| W5500_CP_OM_VDLM); 				//set byte for reading from common register
	//wait on Socket n SOCK_LISTEN flag
	while(!(SPI1SendNByteReceive1Byte(temp_array,3) == W5500_SR_SR_SOCK_LISTEN));
 80013c0:	2103      	movs	r1, #3
 80013c2:	a801      	add	r0, sp, #4
 80013c4:	f7ff fda0 	bl	8000f08 <SPI1SendNByteReceive1Byte>
 80013c8:	2814      	cmp	r0, #20
 80013ca:	d1f9      	bne.n	80013c0 <W5500OpenTCPServer+0x9c>


	return 0;
}
 80013cc:	2000      	movs	r0, #0
 80013ce:	b004      	add	sp, #16
 80013d0:	bd70      	pop	{r4, r5, r6, pc}
 80013d2:	262c      	movs	r6, #44	; 0x2c
	uint8_t socket_sel_register = 	(socket_no == 0x00) ? W5500_CP_BSB_S0_R://socket 0 address
 80013d4:	2528      	movs	r5, #40	; 0x28
 80013d6:	e7c2      	b.n	800135e <W5500OpenTCPServer+0x3a>
 80013d8:	266c      	movs	r6, #108	; 0x6c
 80013da:	2568      	movs	r5, #104	; 0x68
 80013dc:	e7bf      	b.n	800135e <W5500OpenTCPServer+0x3a>
 80013de:	264c      	movs	r6, #76	; 0x4c
 80013e0:	2548      	movs	r5, #72	; 0x48
 80013e2:	e7bc      	b.n	800135e <W5500OpenTCPServer+0x3a>
 80013e4:	268c      	movs	r6, #140	; 0x8c
 80013e6:	2588      	movs	r5, #136	; 0x88
 80013e8:	e7b9      	b.n	800135e <W5500OpenTCPServer+0x3a>
 80013ea:	26ac      	movs	r6, #172	; 0xac
 80013ec:	25a8      	movs	r5, #168	; 0xa8
 80013ee:	e7b6      	b.n	800135e <W5500OpenTCPServer+0x3a>
 80013f0:	26cc      	movs	r6, #204	; 0xcc
 80013f2:	25c8      	movs	r5, #200	; 0xc8
 80013f4:	e7b3      	b.n	800135e <W5500OpenTCPServer+0x3a>
 80013f6:	bf00      	nop

080013f8 <W5500CloseAndOpenTCPServer>:

//Close TCP protocol and then open back
//Socket number 	<socket_no> 	(0,1,2,3,4,5,6,7)
//Returned value 0-OK status 1- error
uint8_t W5500CloseAndOpenTCPServer(uint8_t socket_no){
 80013f8:	b570      	push	{r4, r5, r6, lr}
 80013fa:	b082      	sub	sp, #8

	//temporary register, necessary to initialize to initial state
	uint8_t temp_array[5] = {0x00,0x00,0x00,0x00,0x00};
 80013fc:	2300      	movs	r3, #0
 80013fe:	f88d 3004 	strb.w	r3, [sp, #4]
 8001402:	9300      	str	r3, [sp, #0]
	//socket select register which select proper offset address allocation
	uint8_t socket_sel_register = 	(socket_no == 0x00) ? W5500_CP_BSB_S0_R://socket 0 address
 8001404:	4605      	mov	r5, r0
 8001406:	b190      	cbz	r0, 800142e <W5500CloseAndOpenTCPServer+0x36>
 8001408:	2801      	cmp	r0, #1
 800140a:	d033      	beq.n	8001474 <W5500CloseAndOpenTCPServer+0x7c>
 800140c:	2802      	cmp	r0, #2
 800140e:	d037      	beq.n	8001480 <W5500CloseAndOpenTCPServer+0x88>
 8001410:	2803      	cmp	r0, #3
 8001412:	d032      	beq.n	800147a <W5500CloseAndOpenTCPServer+0x82>
 8001414:	2804      	cmp	r0, #4
 8001416:	d036      	beq.n	8001486 <W5500CloseAndOpenTCPServer+0x8e>
 8001418:	2805      	cmp	r0, #5
 800141a:	d037      	beq.n	800148c <W5500CloseAndOpenTCPServer+0x94>
 800141c:	2806      	cmp	r0, #6
 800141e:	d038      	beq.n	8001492 <W5500CloseAndOpenTCPServer+0x9a>
 8001420:	2807      	cmp	r0, #7
 8001422:	bf15      	itete	ne
 8001424:	2604      	movne	r6, #4
 8001426:	26ec      	moveq	r6, #236	; 0xec
 8001428:	461c      	movne	r4, r3
 800142a:	24e8      	moveq	r4, #232	; 0xe8
 800142c:	e001      	b.n	8001432 <W5500CloseAndOpenTCPServer+0x3a>
 800142e:	260c      	movs	r6, #12
 8001430:	2408      	movs	r4, #8
									0; 										//default error


	//Disconect from client
	temp_array[0] 	= MSB(W5500_SR_CR);
	temp_array[1] 	= LSB(W5500_SR_CR);
 8001432:	2201      	movs	r2, #1
	temp_array[2] 	= (socket_sel_register
					| W5500_CP_WRITE
					| W5500_CP_OM_VDLM); 				//write in to socket n configuration register
	temp_array[3] 	= W5500_SR_CR_CLOSE; 				//close command command
 8001434:	2310      	movs	r3, #16
	//write thru spi communication
	SPI1SendNByte(temp_array,4);
 8001436:	2104      	movs	r1, #4
 8001438:	4668      	mov	r0, sp
	temp_array[1] 	= LSB(W5500_SR_CR);
 800143a:	f88d 2001 	strb.w	r2, [sp, #1]
	temp_array[3] 	= W5500_SR_CR_CLOSE; 				//close command command
 800143e:	f88d 3003 	strb.w	r3, [sp, #3]
	temp_array[2] 	= (socket_sel_register
 8001442:	f88d 6002 	strb.w	r6, [sp, #2]
	SPI1SendNByte(temp_array,4);
 8001446:	f7ff fd07 	bl	8000e58 <SPI1SendNByte>

	//Read status register for closing
	temp_array[0]	= MSB(W5500_SR_SR);
 800144a:	2200      	movs	r2, #0
	temp_array[1]	= LSB(W5500_SR_SR);
 800144c:	2303      	movs	r3, #3
	temp_array[2] 	= (socket_sel_register
 800144e:	f88d 4002 	strb.w	r4, [sp, #2]
	temp_array[0]	= MSB(W5500_SR_SR);
 8001452:	f88d 2000 	strb.w	r2, [sp]
	temp_array[1]	= LSB(W5500_SR_SR);
 8001456:	f88d 3001 	strb.w	r3, [sp, #1]
					| W5500_CP_READ
					| W5500_CP_OM_VDLM); 				//set byte for reading from common register
	//wait on Socket n SOCK_LISTEN flag
	while(!(SPI1SendNByteReceive1Byte(temp_array,3) == W5500_SR_SR_SOCK_CLOSED));
 800145a:	2103      	movs	r1, #3
 800145c:	4668      	mov	r0, sp
 800145e:	f7ff fd53 	bl	8000f08 <SPI1SendNByteReceive1Byte>
 8001462:	4604      	mov	r4, r0
 8001464:	2800      	cmp	r0, #0
 8001466:	d1f8      	bne.n	800145a <W5500CloseAndOpenTCPServer+0x62>

	//Open TCP server
	W5500OpenTCPServer(socket_no);
 8001468:	4628      	mov	r0, r5
 800146a:	f7ff ff5b 	bl	8001324 <W5500OpenTCPServer>

	return 0;
}
 800146e:	4620      	mov	r0, r4
 8001470:	b002      	add	sp, #8
 8001472:	bd70      	pop	{r4, r5, r6, pc}
 8001474:	262c      	movs	r6, #44	; 0x2c
	uint8_t socket_sel_register = 	(socket_no == 0x00) ? W5500_CP_BSB_S0_R://socket 0 address
 8001476:	2428      	movs	r4, #40	; 0x28
 8001478:	e7db      	b.n	8001432 <W5500CloseAndOpenTCPServer+0x3a>
 800147a:	266c      	movs	r6, #108	; 0x6c
 800147c:	2468      	movs	r4, #104	; 0x68
 800147e:	e7d8      	b.n	8001432 <W5500CloseAndOpenTCPServer+0x3a>
 8001480:	264c      	movs	r6, #76	; 0x4c
 8001482:	2448      	movs	r4, #72	; 0x48
 8001484:	e7d5      	b.n	8001432 <W5500CloseAndOpenTCPServer+0x3a>
 8001486:	268c      	movs	r6, #140	; 0x8c
 8001488:	2488      	movs	r4, #136	; 0x88
 800148a:	e7d2      	b.n	8001432 <W5500CloseAndOpenTCPServer+0x3a>
 800148c:	26ac      	movs	r6, #172	; 0xac
 800148e:	24a8      	movs	r4, #168	; 0xa8
 8001490:	e7cf      	b.n	8001432 <W5500CloseAndOpenTCPServer+0x3a>
 8001492:	26cc      	movs	r6, #204	; 0xcc
 8001494:	24c8      	movs	r4, #200	; 0xc8
 8001496:	e7cc      	b.n	8001432 <W5500CloseAndOpenTCPServer+0x3a>

08001498 <CheckInterruptStatus>:

//Check on which socket was occurred interrupt
//Returned value was equal to number on which socket occurred interrupt (0,1,2,3,4,5,6,7) or
//8 if multiple interrupt occurred at the same time
uint8_t CheckInterruptStatus(){
 8001498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800149a:	b083      	sub	sp, #12

	//temporary register, necessary to initialize to initial state
	uint8_t temp_array[5] = {0x00,0x00,0x00,0x00,0x00};
 800149c:	2400      	movs	r4, #0
	//socket address selected register
	uint8_t socket_sel_register;

	//Read from socket interrupt register
	temp_array[0]	= MSB(W5500_CRB_SIR);
	temp_array[1]	= LSB(W5500_CRB_SIR);
 800149e:	2317      	movs	r3, #23
	temp_array[2] 	= (W5500_CP_BSB_CR
					| W5500_CP_READ
					| W5500_CP_OM_VDLM); 				//set byte for reading from common interrupt register

	//read from SIR register
	temp_array[4] 	= SPI1SendNByteReceive1Byte(temp_array,3);
 80014a0:	4668      	mov	r0, sp
 80014a2:	2103      	movs	r1, #3
	uint8_t temp_array[5] = {0x00,0x00,0x00,0x00,0x00};
 80014a4:	9400      	str	r4, [sp, #0]
 80014a6:	f88d 4004 	strb.w	r4, [sp, #4]
	temp_array[1]	= LSB(W5500_CRB_SIR);
 80014aa:	f88d 3001 	strb.w	r3, [sp, #1]
	temp_array[4] 	= SPI1SendNByteReceive1Byte(temp_array,3);
 80014ae:	f7ff fd2b 	bl	8000f08 <SPI1SendNByteReceive1Byte>

	switch(temp_array[4]){
 80014b2:	2808      	cmp	r0, #8
	temp_array[4] 	= SPI1SendNByteReceive1Byte(temp_array,3);
 80014b4:	f88d 0004 	strb.w	r0, [sp, #4]
	switch(temp_array[4]){
 80014b8:	d04c      	beq.n	8001554 <CheckInterruptStatus+0xbc>
 80014ba:	d928      	bls.n	800150e <CheckInterruptStatus+0x76>
 80014bc:	2820      	cmp	r0, #32
 80014be:	d045      	beq.n	800154c <CheckInterruptStatus+0xb4>
 80014c0:	d937      	bls.n	8001532 <CheckInterruptStatus+0x9a>
 80014c2:	2840      	cmp	r0, #64	; 0x40
 80014c4:	d031      	beq.n	800152a <CheckInterruptStatus+0x92>
 80014c6:	2880      	cmp	r0, #128	; 0x80
 80014c8:	d127      	bne.n	800151a <CheckInterruptStatus+0x82>

	//interrupt occurred on socket 7
	case W5500_CRB_SIR_S7:
		socket_num_and_status	= 7 << 5; 				//8b111_00000
		socket_sel_register = W5500_CP_BSB_S7_R; 		//socket 7 address
		break;
 80014ca:	27ec      	movs	r7, #236	; 0xec
		socket_sel_register = W5500_CP_BSB_S7_R; 		//socket 7 address
 80014cc:	23e8      	movs	r3, #232	; 0xe8
		socket_num_and_status	= 7 << 5; 				//8b111_00000
 80014ce:	24e0      	movs	r4, #224	; 0xe0
	default:
		return 0;
	}

	//read interrupt flag from Sn_IR register
	temp_array[0]	= MSB(W5500_SR_IR);
 80014d0:	2600      	movs	r6, #0
	temp_array[1]	= LSB(W5500_SR_IR);
 80014d2:	2502      	movs	r5, #2
	temp_array[2] 	= (socket_sel_register
					| W5500_CP_READ
					| W5500_CP_OM_VDLM); 				//set byte for reading from socket n register interrupt register

	//read from Sn_IR register
	socket_num_and_status |= SPI1SendNByteReceive1Byte(temp_array,3);
 80014d4:	2103      	movs	r1, #3
 80014d6:	4668      	mov	r0, sp
	temp_array[2] 	= (socket_sel_register
 80014d8:	f88d 3002 	strb.w	r3, [sp, #2]
	temp_array[0]	= MSB(W5500_SR_IR);
 80014dc:	f88d 6000 	strb.w	r6, [sp]
	temp_array[1]	= LSB(W5500_SR_IR);
 80014e0:	f88d 5001 	strb.w	r5, [sp, #1]
	socket_num_and_status |= SPI1SendNByteReceive1Byte(temp_array,3);
 80014e4:	f7ff fd10 	bl	8000f08 <SPI1SendNByteReceive1Byte>
 80014e8:	4304      	orrs	r4, r0
 80014ea:	b2e4      	uxtb	r4, r4
					| W5500_CP_WRITE
					| W5500_CP_OM_VDLM); 				//set byte for  writing in to socket n interrupt register
	temp_array[3] 	= (socket_num_and_status & 0x1F); 	//clear interrupt flag (use lower 5 bits in variable "socket_num_and_status")

	//write in to Sn_IR register
	SPI1SendNByte(temp_array,4);
 80014ec:	4668      	mov	r0, sp
	temp_array[3] 	= (socket_num_and_status & 0x1F); 	//clear interrupt flag (use lower 5 bits in variable "socket_num_and_status")
 80014ee:	f004 031f 	and.w	r3, r4, #31
	SPI1SendNByte(temp_array,4);
 80014f2:	2104      	movs	r1, #4
	temp_array[0]	= MSB(W5500_SR_IR);
 80014f4:	f88d 6000 	strb.w	r6, [sp]
	temp_array[1]	= LSB(W5500_SR_IR);
 80014f8:	f88d 5001 	strb.w	r5, [sp, #1]
	temp_array[2] 	= (socket_sel_register
 80014fc:	f88d 7002 	strb.w	r7, [sp, #2]
	temp_array[3] 	= (socket_num_and_status & 0x1F); 	//clear interrupt flag (use lower 5 bits in variable "socket_num_and_status")
 8001500:	f88d 3003 	strb.w	r3, [sp, #3]
	SPI1SendNByte(temp_array,4);
 8001504:	f7ff fca8 	bl	8000e58 <SPI1SendNByte>
//	SPI1SendNByteReceive1Byte(temp_array,3);
//
//	////////////////TESTNO ZA RAZJASNITEV DELOVANJA PREKINITEV

	return socket_num_and_status;
}
 8001508:	4620      	mov	r0, r4
 800150a:	b003      	add	sp, #12
 800150c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch(temp_array[4]){
 800150e:	2802      	cmp	r0, #2
 8001510:	d015      	beq.n	800153e <CheckInterruptStatus+0xa6>
 8001512:	2804      	cmp	r0, #4
 8001514:	d005      	beq.n	8001522 <CheckInterruptStatus+0x8a>
 8001516:	2801      	cmp	r0, #1
 8001518:	d015      	beq.n	8001546 <CheckInterruptStatus+0xae>
		return 0;
 800151a:	2400      	movs	r4, #0
}
 800151c:	4620      	mov	r0, r4
 800151e:	b003      	add	sp, #12
 8001520:	bdf0      	pop	{r4, r5, r6, r7, pc}
		break;
 8001522:	274c      	movs	r7, #76	; 0x4c
		socket_sel_register = W5500_CP_BSB_S2_R; 		//socket 2 address
 8001524:	2348      	movs	r3, #72	; 0x48
		socket_num_and_status	= 2 << 5; 				//8b010_00000
 8001526:	2440      	movs	r4, #64	; 0x40
		break;
 8001528:	e7d2      	b.n	80014d0 <CheckInterruptStatus+0x38>
		break;
 800152a:	27cc      	movs	r7, #204	; 0xcc
		socket_sel_register = W5500_CP_BSB_S6_R; 		//socket 6 address
 800152c:	23c8      	movs	r3, #200	; 0xc8
		socket_num_and_status	= 6 << 5; 				//8b110_00000
 800152e:	24c0      	movs	r4, #192	; 0xc0
		break;
 8001530:	e7ce      	b.n	80014d0 <CheckInterruptStatus+0x38>
	switch(temp_array[4]){
 8001532:	2810      	cmp	r0, #16
 8001534:	d1f1      	bne.n	800151a <CheckInterruptStatus+0x82>
		break;
 8001536:	278c      	movs	r7, #140	; 0x8c
		socket_sel_register = W5500_CP_BSB_S4_R; 		//socket 4 address
 8001538:	2388      	movs	r3, #136	; 0x88
		socket_num_and_status	= 4 << 5; 				//8b100_00000
 800153a:	2480      	movs	r4, #128	; 0x80
		break;
 800153c:	e7c8      	b.n	80014d0 <CheckInterruptStatus+0x38>
	switch(temp_array[4]){
 800153e:	272c      	movs	r7, #44	; 0x2c
		socket_sel_register = W5500_CP_BSB_S1_R; 		//socket 1 address
 8001540:	2328      	movs	r3, #40	; 0x28
		socket_num_and_status	= 1 << 5; 				//8b001_00000
 8001542:	2420      	movs	r4, #32
 8001544:	e7c4      	b.n	80014d0 <CheckInterruptStatus+0x38>
	switch(temp_array[4]){
 8001546:	270c      	movs	r7, #12
		socket_sel_register = W5500_CP_BSB_S0_R; 		//socket 0 address
 8001548:	2308      	movs	r3, #8
 800154a:	e7c1      	b.n	80014d0 <CheckInterruptStatus+0x38>
		break;
 800154c:	27ac      	movs	r7, #172	; 0xac
		socket_sel_register = W5500_CP_BSB_S5_R; 		//socket 5 address
 800154e:	23a8      	movs	r3, #168	; 0xa8
		socket_num_and_status	= 5 << 5; 				//8b101_00000
 8001550:	24a0      	movs	r4, #160	; 0xa0
		break;
 8001552:	e7bd      	b.n	80014d0 <CheckInterruptStatus+0x38>
		break;
 8001554:	276c      	movs	r7, #108	; 0x6c
		socket_sel_register = W5500_CP_BSB_S3_R; 		//socket 3 address
 8001556:	2368      	movs	r3, #104	; 0x68
		socket_num_and_status	= 3 << 5; 				//8b011_00000
 8001558:	2460      	movs	r4, #96	; 0x60
		break;
 800155a:	e7b9      	b.n	80014d0 <CheckInterruptStatus+0x38>

0800155c <ReadRecvSizeAndData>:
//Returned value was equal to received byte number or
//1 error was occured (invalid socket number)
//function takes 2 arguments:
//socket number (active socket on wich was occured interrupt)
//rx data pointer to store received data
uint16_t ReadRecvSizeAndData(uint8_t socket_no, uint8_t *rx_data_buffer){
 800155c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001560:	b085      	sub	sp, #20

	//temporary register, necessary to initialize to initial state
	uint8_t temp_array[5] = {0x00,0x00,0x00,0x00,0x00};
 8001562:	2300      	movs	r3, #0
 8001564:	f88d 300c 	strb.w	r3, [sp, #12]
 8001568:	9302      	str	r3, [sp, #8]
	uint8_t read_data[2]  = {0x00,0x00};
 800156a:	f88d 3004 	strb.w	r3, [sp, #4]
 800156e:	f88d 3005 	strb.w	r3, [sp, #5]
	uint16_t new_RX_RD 	= 0;
	//socket address selected register
	uint8_t socket_sel_register = 	(socket_no == 0x00) ? W5500_CP_BSB_S0_R://socket 0 address
 8001572:	b190      	cbz	r0, 800159a <ReadRecvSizeAndData+0x3e>
 8001574:	2801      	cmp	r0, #1
 8001576:	d076      	beq.n	8001666 <ReadRecvSizeAndData+0x10a>
 8001578:	2802      	cmp	r0, #2
 800157a:	d07e      	beq.n	800167a <ReadRecvSizeAndData+0x11e>
 800157c:	2803      	cmp	r0, #3
 800157e:	d077      	beq.n	8001670 <ReadRecvSizeAndData+0x114>
 8001580:	2804      	cmp	r0, #4
 8001582:	d07f      	beq.n	8001684 <ReadRecvSizeAndData+0x128>
 8001584:	2805      	cmp	r0, #5
 8001586:	f000 8082 	beq.w	800168e <ReadRecvSizeAndData+0x132>
 800158a:	2806      	cmp	r0, #6
 800158c:	f000 8084 	beq.w	8001698 <ReadRecvSizeAndData+0x13c>
 8001590:	2807      	cmp	r0, #7
 8001592:	f000 8086 	beq.w	80016a2 <ReadRecvSizeAndData+0x146>
									(socket_no == 0x06) ? W5500_CP_BSB_S6_R://socket 6 address
									(socket_no == 0x07) ? W5500_CP_BSB_S7_R://socket 7 address
									0; 										//default error

	//error not a valid socket number
	if(socket_sel_register == 0) return 1;
 8001596:	2001      	movs	r0, #1
 8001598:	e062      	b.n	8001660 <ReadRecvSizeAndData+0x104>
 800159a:	270c      	movs	r7, #12
 800159c:	f04f 0918 	mov.w	r9, #24
	uint8_t socket_sel_register = 	(socket_no == 0x00) ? W5500_CP_BSB_S0_R://socket 0 address
 80015a0:	2508      	movs	r5, #8
 80015a2:	4688      	mov	r8, r1
	temp_array[0]	= MSB(W5500_SR_RX_RD_0);
	temp_array[1]	= LSB(W5500_SR_RX_RD_0);
	temp_array[2] 	= (socket_sel_register
					| W5500_CP_READ
					| W5500_CP_OM_VDLM);
	SPI1SendNByteReceiveNByte(temp_array, 3,  read_data, 2);
 80015a4:	aa01      	add	r2, sp, #4
	temp_array[1]	= LSB(W5500_SR_RX_RD_0);
 80015a6:	2628      	movs	r6, #40	; 0x28
	SPI1SendNByteReceiveNByte(temp_array, 3,  read_data, 2);
 80015a8:	2302      	movs	r3, #2
 80015aa:	2103      	movs	r1, #3
 80015ac:	a802      	add	r0, sp, #8
	temp_array[2] 	= (socket_sel_register
 80015ae:	f88d 500a 	strb.w	r5, [sp, #10]
	temp_array[1]	= LSB(W5500_SR_RX_RD_0);
 80015b2:	f88d 6009 	strb.w	r6, [sp, #9]
	SPI1SendNByteReceiveNByte(temp_array, 3,  read_data, 2);
 80015b6:	f7ff fcdb 	bl	8000f70 <SPI1SendNByteReceiveNByte>

	new_RX_RD = (read_data[0]<<8 | read_data[1]);
 80015ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80015be:	f89d 4005 	ldrb.w	r4, [sp, #5]

	//Read received data len from socket 0 received size register
	temp_array[0]	= MSB(W5500_SR_RX_RSR_0);
	temp_array[1]	= LSB(W5500_SR_RX_RSR_0);
	temp_array[2] 	= (socket_sel_register
 80015c2:	f88d 500a 	strb.w	r5, [sp, #10]
	temp_array[1]	= LSB(W5500_SR_RX_RSR_0);
 80015c6:	f04f 0e26 	mov.w	lr, #38	; 0x26
	temp_array[0]	= MSB(W5500_SR_RX_RSR_0);
 80015ca:	2500      	movs	r5, #0
					| W5500_CP_READ
					| W5500_CP_OM_VDLM); 				//set byte for reading from common register
	SPI1SendNByteReceiveNByte(temp_array, 3, read_data, 2);
 80015cc:	aa01      	add	r2, sp, #4
	new_RX_RD = (read_data[0]<<8 | read_data[1]);
 80015ce:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
	SPI1SendNByteReceiveNByte(temp_array, 3, read_data, 2);
 80015d2:	2103      	movs	r1, #3
 80015d4:	2302      	movs	r3, #2
 80015d6:	a802      	add	r0, sp, #8
	temp_array[1]	= LSB(W5500_SR_RX_RSR_0);
 80015d8:	f88d e009 	strb.w	lr, [sp, #9]
	temp_array[0]	= MSB(W5500_SR_RX_RSR_0);
 80015dc:	f88d 5008 	strb.w	r5, [sp, #8]
	SPI1SendNByteReceiveNByte(temp_array, 3, read_data, 2);
 80015e0:	f7ff fcc6 	bl	8000f70 <SPI1SendNByteReceiveNByte>
	temp_array[0]	= MSB(new_RX_RD);
	temp_array[1]	= LSB(new_RX_RD);
	temp_array[2] 	= ((socket_sel_register + 0x10)		//0x10 is the offset to reach socket n Rx buffer
					| W5500_CP_READ
					| W5500_CP_OM_VDLM); 				//set byte for reading from common register
	SPI1SendNByteReceiveNByte(temp_array, 3, rx_data_buffer, (uint32_t)(read_data[0]<<8 | read_data[1]));
 80015e4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	temp_array[2] 	= ((socket_sel_register + 0x10)		//0x10 is the offset to reach socket n Rx buffer
 80015e8:	f88d 900a 	strb.w	r9, [sp, #10]
	new_RX_RD = (read_data[0]<<8 | read_data[1]);
 80015ec:	b224      	sxth	r4, r4
	temp_array[1]	= LSB(new_RX_RD);
 80015ee:	f88d 4009 	strb.w	r4, [sp, #9]
	SPI1SendNByteReceiveNByte(temp_array, 3, rx_data_buffer, (uint32_t)(read_data[0]<<8 | read_data[1]));
 80015f2:	ba5b      	rev16	r3, r3
	new_RX_RD = (read_data[0]<<8 | read_data[1]);
 80015f4:	b2a4      	uxth	r4, r4
	temp_array[0]	= MSB(new_RX_RD);
 80015f6:	ea4f 2e14 	mov.w	lr, r4, lsr #8
	SPI1SendNByteReceiveNByte(temp_array, 3, rx_data_buffer, (uint32_t)(read_data[0]<<8 | read_data[1]));
 80015fa:	4642      	mov	r2, r8
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	2103      	movs	r1, #3
 8001600:	a802      	add	r0, sp, #8
	temp_array[0]	= MSB(new_RX_RD);
 8001602:	f88d e008 	strb.w	lr, [sp, #8]
	SPI1SendNByteReceiveNByte(temp_array, 3, rx_data_buffer, (uint32_t)(read_data[0]<<8 | read_data[1]));
 8001606:	f7ff fcb3 	bl	8000f70 <SPI1SendNByteReceiveNByte>

	//end

	//variable for updating received data pointer register
	new_RX_RD = new_RX_RD + (read_data[0]<<8 | read_data[1]);
 800160a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800160e:	f89d 3005 	ldrb.w	r3, [sp, #5]
//	temp_array[4] 	= 0x00; 							//reset register on address 0x0027
//	//write thru spi communication
//	SPI1SendNByte(temp_array,5);

//	//Write in to register which contain start of the data pointer
	temp_array[0]	= MSB(W5500_SR_RX_RD_0);
 8001612:	f88d 5008 	strb.w	r5, [sp, #8]
	new_RX_RD = new_RX_RD + (read_data[0]<<8 | read_data[1]);
 8001616:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800161a:	441c      	add	r4, r3
 800161c:	b2a4      	uxth	r4, r4
	temp_array[1]	= LSB(W5500_SR_RX_RD_0);
	temp_array[2] 	= (socket_sel_register
					| W5500_CP_WRITE
					| W5500_CP_OM_VDLM); 				//set byte for reading from common register
	temp_array[3] 	= MSB(new_RX_RD); 							//update register on address 0x0028
 800161e:	0a23      	lsrs	r3, r4, #8
	temp_array[4] 	= LSB(new_RX_RD); 							//update register on address 0x0029
	//write thru spi communication
	SPI1SendNByte(temp_array,5);
 8001620:	2105      	movs	r1, #5
 8001622:	a802      	add	r0, sp, #8
	temp_array[3] 	= MSB(new_RX_RD); 							//update register on address 0x0028
 8001624:	f88d 300b 	strb.w	r3, [sp, #11]
	temp_array[1]	= LSB(W5500_SR_RX_RD_0);
 8001628:	f88d 6009 	strb.w	r6, [sp, #9]
	temp_array[2] 	= (socket_sel_register
 800162c:	f88d 700a 	strb.w	r7, [sp, #10]
	temp_array[4] 	= LSB(new_RX_RD); 							//update register on address 0x0029
 8001630:	f88d 400c 	strb.w	r4, [sp, #12]
	SPI1SendNByte(temp_array,5);
 8001634:	f7ff fc10 	bl	8000e58 <SPI1SendNByte>
	temp_array[0] 	= MSB(W5500_SR_CR);
	temp_array[1] 	= LSB(W5500_SR_CR);
	temp_array[2] 	= (socket_sel_register
					| W5500_CP_WRITE
					| W5500_CP_OM_VDLM); 				//write in to socket n command register
	temp_array[3] 	= W5500_SR_CR_RECV; 				//RECV command
 8001638:	2340      	movs	r3, #64	; 0x40
	//write thru spi communication
	SPI1SendNByte(temp_array,4);
 800163a:	a802      	add	r0, sp, #8
	temp_array[1] 	= LSB(W5500_SR_CR);
 800163c:	2201      	movs	r2, #1
	SPI1SendNByte(temp_array,4);
 800163e:	2104      	movs	r1, #4
	temp_array[3] 	= W5500_SR_CR_RECV; 				//RECV command
 8001640:	f88d 300b 	strb.w	r3, [sp, #11]
	temp_array[0] 	= MSB(W5500_SR_CR);
 8001644:	f88d 5008 	strb.w	r5, [sp, #8]
	temp_array[2] 	= (socket_sel_register
 8001648:	f88d 700a 	strb.w	r7, [sp, #10]
	temp_array[1] 	= LSB(W5500_SR_CR);
 800164c:	f88d 2009 	strb.w	r2, [sp, #9]
	SPI1SendNByte(temp_array,4);
 8001650:	f7ff fc02 	bl	8000e58 <SPI1SendNByte>


	return (read_data[0]<<8 | read_data[1]);
 8001654:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001658:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800165c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8

}
 8001660:	b005      	add	sp, #20
 8001662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001666:	272c      	movs	r7, #44	; 0x2c
 8001668:	f04f 0938 	mov.w	r9, #56	; 0x38
	uint8_t socket_sel_register = 	(socket_no == 0x00) ? W5500_CP_BSB_S0_R://socket 0 address
 800166c:	2528      	movs	r5, #40	; 0x28
 800166e:	e798      	b.n	80015a2 <ReadRecvSizeAndData+0x46>
 8001670:	276c      	movs	r7, #108	; 0x6c
 8001672:	f04f 0978 	mov.w	r9, #120	; 0x78
 8001676:	2568      	movs	r5, #104	; 0x68
 8001678:	e793      	b.n	80015a2 <ReadRecvSizeAndData+0x46>
 800167a:	274c      	movs	r7, #76	; 0x4c
 800167c:	f04f 0958 	mov.w	r9, #88	; 0x58
 8001680:	2548      	movs	r5, #72	; 0x48
 8001682:	e78e      	b.n	80015a2 <ReadRecvSizeAndData+0x46>
 8001684:	278c      	movs	r7, #140	; 0x8c
 8001686:	f04f 0998 	mov.w	r9, #152	; 0x98
 800168a:	2588      	movs	r5, #136	; 0x88
 800168c:	e789      	b.n	80015a2 <ReadRecvSizeAndData+0x46>
 800168e:	27ac      	movs	r7, #172	; 0xac
 8001690:	f04f 09b8 	mov.w	r9, #184	; 0xb8
 8001694:	25a8      	movs	r5, #168	; 0xa8
 8001696:	e784      	b.n	80015a2 <ReadRecvSizeAndData+0x46>
 8001698:	27cc      	movs	r7, #204	; 0xcc
 800169a:	f04f 09d8 	mov.w	r9, #216	; 0xd8
 800169e:	25c8      	movs	r5, #200	; 0xc8
 80016a0:	e77f      	b.n	80015a2 <ReadRecvSizeAndData+0x46>
 80016a2:	27ec      	movs	r7, #236	; 0xec
 80016a4:	f04f 09f8 	mov.w	r9, #248	; 0xf8
 80016a8:	25e8      	movs	r5, #232	; 0xe8
 80016aa:	e77a      	b.n	80015a2 <ReadRecvSizeAndData+0x46>

080016ac <SendData>:
//0 sucsesfuly send data in to peer computer
//function takes 3 arguments:
//socket number (active socket on wich was occured interrupt)
//tx data pointer to store transmited data
//size of data to be send
uint8_t SendData(uint8_t socket_no,uint8_t *tx_data_buffer,uint16_t data_len){
 80016ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016b0:	b084      	sub	sp, #16

	//temporary register, necessary to initialize to initial state
	uint8_t temp_array[5] = {0x00,0x00,0x00,0x00,0x00};
 80016b2:	2300      	movs	r3, #0
 80016b4:	f88d 300c 	strb.w	r3, [sp, #12]
 80016b8:	9302      	str	r3, [sp, #8]
	uint8_t read_data[2]  = {0x00,0x00};
 80016ba:	f88d 3004 	strb.w	r3, [sp, #4]
 80016be:	f88d 3005 	strb.w	r3, [sp, #5]
	uint16_t new_TX_WR = 0;
	//socket address selected register
	uint8_t socket_sel_register = 	(socket_no == 0x00) ? W5500_CP_BSB_S0_R://socket 0 address
 80016c2:	b1b0      	cbz	r0, 80016f2 <SendData+0x46>
 80016c4:	2801      	cmp	r0, #1
 80016c6:	d030      	beq.n	800172a <SendData+0x7e>
 80016c8:	2802      	cmp	r0, #2
 80016ca:	d07f      	beq.n	80017cc <SendData+0x120>
 80016cc:	2803      	cmp	r0, #3
 80016ce:	d032      	beq.n	8001736 <SendData+0x8a>
 80016d0:	2804      	cmp	r0, #4
 80016d2:	f000 8081 	beq.w	80017d8 <SendData+0x12c>
 80016d6:	2805      	cmp	r0, #5
 80016d8:	f000 8084 	beq.w	80017e4 <SendData+0x138>
 80016dc:	2806      	cmp	r0, #6
 80016de:	f000 8087 	beq.w	80017f0 <SendData+0x144>
 80016e2:	2807      	cmp	r0, #7
 80016e4:	d11d      	bne.n	8001722 <SendData+0x76>
 80016e6:	f04f 08ec 	mov.w	r8, #236	; 0xec
 80016ea:	f04f 09f4 	mov.w	r9, #244	; 0xf4
 80016ee:	27e8      	movs	r7, #232	; 0xe8
 80016f0:	e004      	b.n	80016fc <SendData+0x50>
 80016f2:	f04f 080c 	mov.w	r8, #12
 80016f6:	f04f 0914 	mov.w	r9, #20
 80016fa:	2708      	movs	r7, #8
 80016fc:	4614      	mov	r4, r2
	temp_array[1] 	= LSB(W5500_SR_TX_FSR_0);
	temp_array[2] 	= (socket_sel_register
					| W5500_CP_READ
					| W5500_CP_OM_VDLM); 				//read from socket n free size register
	//read thru spi communication
	SPI1SendNByteReceiveNByte(temp_array, 3, read_data, 2);
 80016fe:	2302      	movs	r3, #2
 8001700:	460d      	mov	r5, r1
 8001702:	aa01      	add	r2, sp, #4
	temp_array[1] 	= LSB(W5500_SR_TX_FSR_0);
 8001704:	2620      	movs	r6, #32
	SPI1SendNByteReceiveNByte(temp_array, 3, read_data, 2);
 8001706:	2103      	movs	r1, #3
 8001708:	a802      	add	r0, sp, #8
	temp_array[2] 	= (socket_sel_register
 800170a:	f88d 700a 	strb.w	r7, [sp, #10]
	temp_array[1] 	= LSB(W5500_SR_TX_FSR_0);
 800170e:	f88d 6009 	strb.w	r6, [sp, #9]
	SPI1SendNByteReceiveNByte(temp_array, 3, read_data, 2);
 8001712:	f7ff fc2d 	bl	8000f70 <SPI1SendNByteReceiveNByte>

	//check if free size in to TX buffer is less than data length to send, rise error
	if((read_data[0]<<8 | read_data[1]) < data_len) return 1;
 8001716:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800171a:	ba5b      	rev16	r3, r3
 800171c:	b29b      	uxth	r3, r3
 800171e:	42a3      	cmp	r3, r4
 8001720:	da0f      	bge.n	8001742 <SendData+0x96>
	if(socket_sel_register == 0) return 1;
 8001722:	2001      	movs	r0, #1
	temp_array[3] 	= W5500_SR_CR_SEND; 				//SEND command
	//write thru spi communication
	SPI1SendNByte(temp_array,4);

	return 0;
}
 8001724:	b004      	add	sp, #16
 8001726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800172a:	f04f 082c 	mov.w	r8, #44	; 0x2c
 800172e:	f04f 0934 	mov.w	r9, #52	; 0x34
	uint8_t socket_sel_register = 	(socket_no == 0x00) ? W5500_CP_BSB_S0_R://socket 0 address
 8001732:	2728      	movs	r7, #40	; 0x28
 8001734:	e7e2      	b.n	80016fc <SendData+0x50>
 8001736:	f04f 086c 	mov.w	r8, #108	; 0x6c
 800173a:	f04f 0974 	mov.w	r9, #116	; 0x74
 800173e:	2768      	movs	r7, #104	; 0x68
 8001740:	e7dc      	b.n	80016fc <SendData+0x50>
	temp_array[0] 	= MSB(W5500_SR_TX_RD_0);
 8001742:	f04f 0a00 	mov.w	sl, #0
	SPI1SendNByteReceiveNByte(temp_array, 3, read_data, 2);
 8001746:	aa01      	add	r2, sp, #4
	temp_array[1] 	= LSB(W5500_SR_TX_RD_0);
 8001748:	f04f 0e22 	mov.w	lr, #34	; 0x22
	SPI1SendNByteReceiveNByte(temp_array, 3, read_data, 2);
 800174c:	a802      	add	r0, sp, #8
 800174e:	2302      	movs	r3, #2
 8001750:	2103      	movs	r1, #3
	temp_array[2] 	= (socket_sel_register
 8001752:	f88d 700a 	strb.w	r7, [sp, #10]
	temp_array[1] 	= LSB(W5500_SR_TX_RD_0);
 8001756:	f88d e009 	strb.w	lr, [sp, #9]
	temp_array[0] 	= MSB(W5500_SR_TX_RD_0);
 800175a:	f88d a008 	strb.w	sl, [sp, #8]
	SPI1SendNByteReceiveNByte(temp_array, 3, read_data, 2);
 800175e:	f7ff fc07 	bl	8000f70 <SPI1SendNByteReceiveNByte>
	new_TX_WR = (read_data[0]<<8 | read_data[1]) + ((uint16_t) data_len);
 8001762:	f89d e004 	ldrb.w	lr, [sp, #4]
 8001766:	f89d 7005 	ldrb.w	r7, [sp, #5]
	temp_array[0] 	= read_data[0];
 800176a:	f88d e008 	strb.w	lr, [sp, #8]
	new_TX_WR = (read_data[0]<<8 | read_data[1]) + ((uint16_t) data_len);
 800176e:	ea47 230e 	orr.w	r3, r7, lr, lsl #8
 8001772:	4423      	add	r3, r4
	SPI1SendNByteControlAndOther(temp_array,3,tx_data_buffer,data_len);
 8001774:	462a      	mov	r2, r5
 8001776:	a802      	add	r0, sp, #8
	new_TX_WR = (read_data[0]<<8 | read_data[1]) + ((uint16_t) data_len);
 8001778:	b29d      	uxth	r5, r3
	SPI1SendNByteControlAndOther(temp_array,3,tx_data_buffer,data_len);
 800177a:	2103      	movs	r1, #3
 800177c:	4623      	mov	r3, r4
	temp_array[2] 	= ((socket_sel_register + 0x08) 	//0x08 is the offset to reach socket n TX buffer
 800177e:	f88d 900a 	strb.w	r9, [sp, #10]
	temp_array[1] 	= read_data[1];
 8001782:	f88d 7009 	strb.w	r7, [sp, #9]
	SPI1SendNByteControlAndOther(temp_array,3,tx_data_buffer,data_len);
 8001786:	f7ff fb89 	bl	8000e9c <SPI1SendNByteControlAndOther>
	temp_array[3] 	= MSB(new_TX_WR); 							//update transmit write register 0x0024
 800178a:	0a2a      	lsrs	r2, r5, #8
	temp_array[1]	= LSB(W5500_SR_TX_WR_0);
 800178c:	2324      	movs	r3, #36	; 0x24
	SPI1SendNByte(temp_array,5);
 800178e:	a802      	add	r0, sp, #8
 8001790:	2105      	movs	r1, #5
	temp_array[3] 	= MSB(new_TX_WR); 							//update transmit write register 0x0024
 8001792:	f88d 200b 	strb.w	r2, [sp, #11]
	temp_array[1]	= LSB(W5500_SR_TX_WR_0);
 8001796:	f88d 3009 	strb.w	r3, [sp, #9]
	temp_array[4] 	= LSB(new_TX_WR); 							//update transmit write register 0x0025
 800179a:	f88d 500c 	strb.w	r5, [sp, #12]
	temp_array[0]	= MSB(W5500_SR_TX_WR_0);
 800179e:	f88d a008 	strb.w	sl, [sp, #8]
	temp_array[2] 	= (socket_sel_register
 80017a2:	f88d 800a 	strb.w	r8, [sp, #10]
	SPI1SendNByte(temp_array,5);
 80017a6:	f7ff fb57 	bl	8000e58 <SPI1SendNByte>
	SPI1SendNByte(temp_array,4);
 80017aa:	a802      	add	r0, sp, #8
	temp_array[1] 	= LSB(W5500_SR_CR);
 80017ac:	2301      	movs	r3, #1
	SPI1SendNByte(temp_array,4);
 80017ae:	2104      	movs	r1, #4
	temp_array[0] 	= MSB(W5500_SR_CR);
 80017b0:	f88d a008 	strb.w	sl, [sp, #8]
	temp_array[2] 	= (socket_sel_register
 80017b4:	f88d 800a 	strb.w	r8, [sp, #10]
	temp_array[3] 	= W5500_SR_CR_SEND; 				//SEND command
 80017b8:	f88d 600b 	strb.w	r6, [sp, #11]
	temp_array[1] 	= LSB(W5500_SR_CR);
 80017bc:	f88d 3009 	strb.w	r3, [sp, #9]
	SPI1SendNByte(temp_array,4);
 80017c0:	f7ff fb4a 	bl	8000e58 <SPI1SendNByte>
	return 0;
 80017c4:	4650      	mov	r0, sl
}
 80017c6:	b004      	add	sp, #16
 80017c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017cc:	f04f 084c 	mov.w	r8, #76	; 0x4c
 80017d0:	f04f 0954 	mov.w	r9, #84	; 0x54
	uint8_t socket_sel_register = 	(socket_no == 0x00) ? W5500_CP_BSB_S0_R://socket 0 address
 80017d4:	2748      	movs	r7, #72	; 0x48
 80017d6:	e791      	b.n	80016fc <SendData+0x50>
 80017d8:	f04f 088c 	mov.w	r8, #140	; 0x8c
 80017dc:	f04f 0994 	mov.w	r9, #148	; 0x94
 80017e0:	2788      	movs	r7, #136	; 0x88
 80017e2:	e78b      	b.n	80016fc <SendData+0x50>
 80017e4:	f04f 08ac 	mov.w	r8, #172	; 0xac
 80017e8:	f04f 09b4 	mov.w	r9, #180	; 0xb4
 80017ec:	27a8      	movs	r7, #168	; 0xa8
 80017ee:	e785      	b.n	80016fc <SendData+0x50>
 80017f0:	f04f 08cc 	mov.w	r8, #204	; 0xcc
 80017f4:	f04f 09d4 	mov.w	r9, #212	; 0xd4
 80017f8:	27c8      	movs	r7, #200	; 0xc8
 80017fa:	e77f      	b.n	80016fc <SendData+0x50>

080017fc <main>:
uint8_t active_conn = 0;

//
//MAIN
//
int main(void){
 80017fc:	b570      	push	{r4, r5, r6, lr}
//
//  volatile float temperature = 0.0;
//  volatile uint16_t temp = 0;

  //Init GPIOA
  InitGPIO();
 80017fe:	f7ff f97f 	bl	8000b00 <InitGPIO>
  //Init SPI1ls
  SPI1Init();
 8001802:	f7ff fae7 	bl	8000dd4 <SPI1Init>
  //USART3 init
  USART3Init(115200);
 8001806:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800180a:	f7ff fbe9 	bl	8000fe0 <USART3Init>
  //ADC1 enable at channel 8
  //ADC1In8Init();
  //Init ADC1 for temp sensor
  ADC1TempInit();
 800180e:	f7ff f8c5 	bl	800099c <ADC1TempInit>
  //Initialize DAM for ADC1 temperature sensor
  DMA2ADC1Init((uint16_t)2048, (uint32_t *) &ADC1 -> DR, (uint32_t *) &tx_buffer);
 8001812:	4a1c      	ldr	r2, [pc, #112]	; (8001884 <main+0x88>)
 8001814:	491c      	ldr	r1, [pc, #112]	; (8001888 <main+0x8c>)
 8001816:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800181a:	f7ff f8fb 	bl	8000a14 <DMA2ADC1Init>
  //Enable interrupt for DMA2 stream 0
  DMA2Stream0InterruptEnable();
 800181e:	f7ff f94d 	bl	8000abc <DMA2Stream0InterruptEnable>

  //W5500 initialize
  if(W5500SpiConnCheck() == 0){
 8001822:	f7ff fc3d 	bl	80010a0 <W5500SpiConnCheck>
 8001826:	b108      	cbz	r0, 800182c <main+0x30>
	  //DelayUs(1);
	  //SPI1SendNByte(test_data,4);


  }
}
 8001828:	2000      	movs	r0, #0
 800182a:	bd70      	pop	{r4, r5, r6, pc}
	  W5500InitV2(ip, gateway, submask, mac);
 800182c:	4b17      	ldr	r3, [pc, #92]	; (800188c <main+0x90>)
 800182e:	4a18      	ldr	r2, [pc, #96]	; (8001890 <main+0x94>)
 8001830:	4918      	ldr	r1, [pc, #96]	; (8001894 <main+0x98>)
 8001832:	4819      	ldr	r0, [pc, #100]	; (8001898 <main+0x9c>)
	  error_hand = W5500InitTCP(TCP_sorket_num,port,TX_BUFF_SIZE,RX_BUFF_SIZE);
 8001834:	4c19      	ldr	r4, [pc, #100]	; (800189c <main+0xa0>)
	  W5500InitV2(ip, gateway, submask, mac);
 8001836:	f7ff fc47 	bl	80010c8 <W5500InitV2>
	  error_hand = W5500InitTCP(TCP_sorket_num,port,TX_BUFF_SIZE,RX_BUFF_SIZE);
 800183a:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <main+0xa4>)
 800183c:	7820      	ldrb	r0, [r4, #0]
 800183e:	8819      	ldrh	r1, [r3, #0]
 8001840:	2302      	movs	r3, #2
 8001842:	461a      	mov	r2, r3
 8001844:	f7ff fcf6 	bl	8001234 <W5500InitTCP>
	  if(error_hand !=0)return 0;
 8001848:	2800      	cmp	r0, #0
 800184a:	d1ed      	bne.n	8001828 <main+0x2c>
	  error_hand = W5500OpenTCPServer(TCP_sorket_num);
 800184c:	7820      	ldrb	r0, [r4, #0]
 800184e:	f7ff fd69 	bl	8001324 <W5500OpenTCPServer>
	  if(error_hand !=0)return 0;
 8001852:	2800      	cmp	r0, #0
 8001854:	d1e8      	bne.n	8001828 <main+0x2c>
  ret_code_from_sysTick = SysTick_Config(SystemCoreClock / 1000000);
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <main+0xa8>)
 8001858:	4913      	ldr	r1, [pc, #76]	; (80018a8 <main+0xac>)
 800185a:	681b      	ldr	r3, [r3, #0]
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800185c:	4a13      	ldr	r2, [pc, #76]	; (80018ac <main+0xb0>)
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800185e:	4d14      	ldr	r5, [pc, #80]	; (80018b0 <main+0xb4>)
	  if(!(ADC1->CR2&ADC_CR2_ADON)){
 8001860:	4c14      	ldr	r4, [pc, #80]	; (80018b4 <main+0xb8>)
  ret_code_from_sysTick = SysTick_Config(SystemCoreClock / 1000000);
 8001862:	fba1 1303 	umull	r1, r3, r1, r3
 8001866:	0c9b      	lsrs	r3, r3, #18
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8001868:	3b01      	subs	r3, #1
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800186a:	26f0      	movs	r6, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186c:	2107      	movs	r1, #7
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800186e:	6053      	str	r3, [r2, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001870:	f885 6023 	strb.w	r6, [r5, #35]	; 0x23
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8001874:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001876:	6011      	str	r1, [r2, #0]
	  if(!(ADC1->CR2&ADC_CR2_ADON)){
 8001878:	68a3      	ldr	r3, [r4, #8]
 800187a:	07db      	lsls	r3, r3, #31
 800187c:	d4fc      	bmi.n	8001878 <main+0x7c>
		  DMA2ADC1CollectNewData();
 800187e:	f7ff f927 	bl	8000ad0 <DMA2ADC1CollectNewData>
 8001882:	e7f9      	b.n	8001878 <main+0x7c>
 8001884:	20000838 	.word	0x20000838
 8001888:	4001204c 	.word	0x4001204c
 800188c:	20000008 	.word	0x20000008
 8001890:	20000010 	.word	0x20000010
 8001894:	20000000 	.word	0x20000000
 8001898:	20000004 	.word	0x20000004
 800189c:	20000034 	.word	0x20000034
 80018a0:	2000000e 	.word	0x2000000e
 80018a4:	20000014 	.word	0x20000014
 80018a8:	431bde83 	.word	0x431bde83
 80018ac:	e000e010 	.word	0xe000e010
 80018b0:	e000ed00 	.word	0xe000ed00
 80018b4:	40012000 	.word	0x40012000

080018b8 <EXTI3_IRQHandler>:

	//w5500 socket number and status
	volatile uint8_t w5500_socket_interrupt_status;
	//uint16_t recv_len = 0;
	//Check if interrupt occurred in W5500 side
	if((EXTI -> PR & EXTI_PR_PR3) != 0){
 80018b8:	4b2b      	ldr	r3, [pc, #172]	; (8001968 <EXTI3_IRQHandler+0xb0>)
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	071b      	lsls	r3, r3, #28
 80018be:	d400      	bmi.n	80018c2 <EXTI3_IRQHandler+0xa>
 80018c0:	4770      	bx	lr
void EXTI3_IRQHandler(void){
 80018c2:	b510      	push	{r4, lr}
 80018c4:	b082      	sub	sp, #8
		//check interrupt status
		w5500_socket_interrupt_status = CheckInterruptStatus();
 80018c6:	f7ff fde7 	bl	8001498 <CheckInterruptStatus>
 80018ca:	ac02      	add	r4, sp, #8

		USART3SendText((uint8_t *)&w5500_socket_interrupt_status,1);
 80018cc:	2101      	movs	r1, #1
		w5500_socket_interrupt_status = CheckInterruptStatus();
 80018ce:	f804 0d01 	strb.w	r0, [r4, #-1]!
		USART3SendText((uint8_t *)&w5500_socket_interrupt_status,1);
 80018d2:	4620      	mov	r0, r4
 80018d4:	f7ff fbd6 	bl	8001084 <USART3SendText>

		switch(w5500_socket_interrupt_status & 0x1F){
 80018d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80018dc:	f003 031f 	and.w	r3, r3, #31
 80018e0:	3b01      	subs	r3, #1
 80018e2:	2b0f      	cmp	r3, #15
 80018e4:	d83a      	bhi.n	800195c <EXTI3_IRQHandler+0xa4>
 80018e6:	e8df f003 	tbb	[pc, r3]
 80018ea:	3317      	.short	0x3317
 80018ec:	39390839 	.word	0x39390839
 80018f0:	39392239 	.word	0x39392239
 80018f4:	39393939 	.word	0x39393939
 80018f8:	1e39      	.short	0x1e39

			break;

		//Receive interrupt
		case W5500_SR_IR_RECV:
			ReadRecvSizeAndData(((w5500_socket_interrupt_status & 0xE0) >> 5), rx_buffer);
 80018fa:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80018fe:	4c1b      	ldr	r4, [pc, #108]	; (800196c <EXTI3_IRQHandler+0xb4>)
 8001900:	0940      	lsrs	r0, r0, #5
 8001902:	4621      	mov	r1, r4
 8001904:	f7ff fe2a 	bl	800155c <ReadRecvSizeAndData>
			if(rx_buffer[0] == 0x30){
 8001908:	7823      	ldrb	r3, [r4, #0]
 800190a:	2b30      	cmp	r3, #48	; 0x30
 800190c:	d00b      	beq.n	8001926 <EXTI3_IRQHandler+0x6e>
				//SendData(((w5500_socket_interrupt_status & 0xE0) >> 5),tx_buffer,2048);
				active_conn = 1;

			}else if(rx_buffer[0] == 0x31){
 800190e:	2b31      	cmp	r3, #49	; 0x31
 8001910:	d102      	bne.n	8001918 <EXTI3_IRQHandler+0x60>
				active_conn = 0;
 8001912:	4b17      	ldr	r3, [pc, #92]	; (8001970 <EXTI3_IRQHandler+0xb8>)
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
//
//				GPIOD -> ODR	|= GPIO_ODR_ODR_13; 	//LED3 on
//			}
//		}

		EXTI -> PR |= EXTI_PR_PR3; 	//Clear flag this is necessary
 8001918:	4a13      	ldr	r2, [pc, #76]	; (8001968 <EXTI3_IRQHandler+0xb0>)
 800191a:	6953      	ldr	r3, [r2, #20]
 800191c:	f043 0308 	orr.w	r3, r3, #8
 8001920:	6153      	str	r3, [r2, #20]
	}
}
 8001922:	b002      	add	sp, #8
 8001924:	bd10      	pop	{r4, pc}
			active_conn = 1;
 8001926:	4b12      	ldr	r3, [pc, #72]	; (8001970 <EXTI3_IRQHandler+0xb8>)
 8001928:	2201      	movs	r2, #1
 800192a:	701a      	strb	r2, [r3, #0]
			break;
 800192c:	e7f4      	b.n	8001918 <EXTI3_IRQHandler+0x60>
			W5500CloseAndOpenTCPServer(((w5500_socket_interrupt_status & 0xE0) >> 5));
 800192e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001932:	0940      	lsrs	r0, r0, #5
 8001934:	f7ff fd60 	bl	80013f8 <W5500CloseAndOpenTCPServer>
			if((GPIOD -> ODR & GPIO_ODR_ODR_13) != 0){
 8001938:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <EXTI3_IRQHandler+0xbc>)
 800193a:	695a      	ldr	r2, [r3, #20]
 800193c:	f412 5f00 	tst.w	r2, #8192	; 0x2000
				GPIOD -> ODR	&= ~(GPIO_ODR_ODR_13); 	//LED3 off
 8001940:	695a      	ldr	r2, [r3, #20]
 8001942:	bf14      	ite	ne
 8001944:	f422 5200 	bicne.w	r2, r2, #8192	; 0x2000
				GPIOD -> ODR	|= GPIO_ODR_ODR_13; 	//LED3 on
 8001948:	f442 5200 	orreq.w	r2, r2, #8192	; 0x2000
 800194c:	615a      	str	r2, [r3, #20]
 800194e:	e7e3      	b.n	8001918 <EXTI3_IRQHandler+0x60>
			W5500OpenTCPServer(((w5500_socket_interrupt_status & 0xE0) >> 5));
 8001950:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001954:	0940      	lsrs	r0, r0, #5
 8001956:	f7ff fce5 	bl	8001324 <W5500OpenTCPServer>
			break;
 800195a:	e7dd      	b.n	8001918 <EXTI3_IRQHandler+0x60>
			USART3SendText((uint8_t *)&w5500_socket_interrupt_status,1);
 800195c:	4620      	mov	r0, r4
 800195e:	2101      	movs	r1, #1
 8001960:	f7ff fb90 	bl	8001084 <USART3SendText>
			break;
 8001964:	e7d8      	b.n	8001918 <EXTI3_IRQHandler+0x60>
 8001966:	bf00      	nop
 8001968:	40013c00 	.word	0x40013c00
 800196c:	20000038 	.word	0x20000038
 8001970:	20000035 	.word	0x20000035
 8001974:	40020c00 	.word	0x40020c00

08001978 <EXTI0_IRQHandler>:

//External interrupt handler on line 0
void EXTI0_IRQHandler(void){
	if((EXTI -> PR & EXTI_PR_PR0) != 0){
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <EXTI0_IRQHandler+0x2c>)
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	07db      	lsls	r3, r3, #31
 800197e:	d50f      	bpl.n	80019a0 <EXTI0_IRQHandler+0x28>
		if((GPIOD -> ODR & GPIO_ODR_ODR_13) != 0){
 8001980:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <EXTI0_IRQHandler+0x30>)
 8001982:	695a      	ldr	r2, [r3, #20]
 8001984:	f412 5f00 	tst.w	r2, #8192	; 0x2000

			GPIOD -> ODR	&= ~(GPIO_ODR_ODR_13); 	//LED3 off
 8001988:	695a      	ldr	r2, [r3, #20]
 800198a:	bf14      	ite	ne
 800198c:	f422 5200 	bicne.w	r2, r2, #8192	; 0x2000
		}else{

			GPIOD -> ODR	|= GPIO_ODR_ODR_13; 	//LED3 on
 8001990:	f442 5200 	orreq.w	r2, r2, #8192	; 0x2000
 8001994:	615a      	str	r2, [r3, #20]
		}
		EXTI -> PR |= EXTI_PR_PR0; 	//Clear flag this is necessary
 8001996:	4a03      	ldr	r2, [pc, #12]	; (80019a4 <EXTI0_IRQHandler+0x2c>)
 8001998:	6953      	ldr	r3, [r2, #20]
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6153      	str	r3, [r2, #20]
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40013c00 	.word	0x40013c00
 80019a8:	40020c00 	.word	0x40020c00

080019ac <DMA2_Stream0_IRQHandler>:

//DMA2 interrupt handler on stream 0
void DMA2_Stream0_IRQHandler(void){

	//Check if interrupt was ocured on stream 0 transfer complete
	if(DMA2 -> LISR & DMA_LISR_TCIF0){
 80019ac:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <DMA2_Stream0_IRQHandler+0x6c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	069b      	lsls	r3, r3, #26
void DMA2_Stream0_IRQHandler(void){
 80019b2:	b510      	push	{r4, lr}
	if(DMA2 -> LISR & DMA_LISR_TCIF0){
 80019b4:	d50e      	bpl.n	80019d4 <DMA2_Stream0_IRQHandler+0x28>

		if((GPIOD -> ODR & GPIO_ODR_ODR_13) != 0){
 80019b6:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <DMA2_Stream0_IRQHandler+0x70>)
			GPIOD -> ODR	|= GPIO_ODR_ODR_13; 	//LED3 on
		}

		//
		//Sending data buffer here
		if(active_conn == 1){
 80019b8:	4c19      	ldr	r4, [pc, #100]	; (8001a20 <DMA2_Stream0_IRQHandler+0x74>)
		if((GPIOD -> ODR & GPIO_ODR_ODR_13) != 0){
 80019ba:	695a      	ldr	r2, [r3, #20]
 80019bc:	f412 5f00 	tst.w	r2, #8192	; 0x2000
			GPIOD -> ODR	&= ~(GPIO_ODR_ODR_13); 	//LED3 off
 80019c0:	695a      	ldr	r2, [r3, #20]
 80019c2:	bf14      	ite	ne
 80019c4:	f422 5200 	bicne.w	r2, r2, #8192	; 0x2000
			GPIOD -> ODR	|= GPIO_ODR_ODR_13; 	//LED3 on
 80019c8:	f442 5200 	orreq.w	r2, r2, #8192	; 0x2000
 80019cc:	615a      	str	r2, [r3, #20]
		if(active_conn == 1){
 80019ce:	7823      	ldrb	r3, [r4, #0]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d017      	beq.n	8001a04 <DMA2_Stream0_IRQHandler+0x58>
			SendData(TCP_sorket_num,tx_buffer,2048);
			active_conn = 0;
		}
	}

	DMA2_Stream0 	-> CR		&= ~(DMA_SxCR_EN); 		//Disable DMA2 Stream 0 Chanel0
 80019d4:	4813      	ldr	r0, [pc, #76]	; (8001a24 <DMA2_Stream0_IRQHandler+0x78>)
	ADC1 			-> CR2 		&= ~(ADC_CR2_DMA); 		//Disable DMA in adc1 CR
 80019d6:	4a14      	ldr	r2, [pc, #80]	; (8001a28 <DMA2_Stream0_IRQHandler+0x7c>)
	DMA2_Stream0 	-> CR		&= ~(DMA_SxCR_EN); 		//Disable DMA2 Stream 0 Chanel0
 80019d8:	6801      	ldr	r1, [r0, #0]
	ADC1 			-> CR2 		&= ~(ADC_CR2_ADON); 	//Turn ADC1 to OFF state

	DMA2 -> LIFCR	|= DMA_LIFCR_CTCIF0; 				//Clear interrupt flag for transfer complete
 80019da:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <DMA2_Stream0_IRQHandler+0x6c>)
	DMA2_Stream0 	-> CR		&= ~(DMA_SxCR_EN); 		//Disable DMA2 Stream 0 Chanel0
 80019dc:	f021 0101 	bic.w	r1, r1, #1
 80019e0:	6001      	str	r1, [r0, #0]
	ADC1 			-> CR2 		&= ~(ADC_CR2_DMA); 		//Disable DMA in adc1 CR
 80019e2:	6891      	ldr	r1, [r2, #8]
 80019e4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80019e8:	6091      	str	r1, [r2, #8]
	ADC1 			-> CR2 		&= ~(ADC_CR2_ADON); 	//Turn ADC1 to OFF state
 80019ea:	6891      	ldr	r1, [r2, #8]
 80019ec:	f021 0101 	bic.w	r1, r1, #1
 80019f0:	6091      	str	r1, [r2, #8]
	DMA2 -> LIFCR	|= DMA_LIFCR_CTCIF0; 				//Clear interrupt flag for transfer complete
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	f042 0220 	orr.w	r2, r2, #32
 80019f8:	609a      	str	r2, [r3, #8]
	DMA2 -> LIFCR	|= DMA_LIFCR_CHTIF0; 				//Clear interrupt flag for transfer half transfer
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	f042 0210 	orr.w	r2, r2, #16
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	bd10      	pop	{r4, pc}
			SendData(TCP_sorket_num,tx_buffer,2048);
 8001a04:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <DMA2_Stream0_IRQHandler+0x80>)
 8001a06:	490a      	ldr	r1, [pc, #40]	; (8001a30 <DMA2_Stream0_IRQHandler+0x84>)
 8001a08:	7818      	ldrb	r0, [r3, #0]
 8001a0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a0e:	f7ff fe4d 	bl	80016ac <SendData>
			active_conn = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	7023      	strb	r3, [r4, #0]
 8001a16:	e7dd      	b.n	80019d4 <DMA2_Stream0_IRQHandler+0x28>
 8001a18:	40026400 	.word	0x40026400
 8001a1c:	40020c00 	.word	0x40020c00
 8001a20:	20000035 	.word	0x20000035
 8001a24:	40026410 	.word	0x40026410
 8001a28:	40012000 	.word	0x40012000
 8001a2c:	20000034 	.word	0x20000034
 8001a30:	20000838 	.word	0x20000838

08001a34 <USART3_IRQHandler>:
}

//USART3 interrupt handler
void USART3_IRQHandler(void){
	if(USART3 -> SR & USART_SR_RXNE){
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <USART3_IRQHandler+0x30>)
 8001a36:	881a      	ldrh	r2, [r3, #0]
 8001a38:	0692      	lsls	r2, r2, #26
 8001a3a:	d503      	bpl.n	8001a44 <USART3_IRQHandler+0x10>
		uint8_t temp = USART3 -> DR;
 8001a3c:	889b      	ldrh	r3, [r3, #4]
		if(temp == 0x30){
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b30      	cmp	r3, #48	; 0x30
 8001a42:	d000      	beq.n	8001a46 <USART3_IRQHandler+0x12>
 8001a44:	4770      	bx	lr
void USART3_IRQHandler(void){
 8001a46:	b500      	push	{lr}
 8001a48:	b083      	sub	sp, #12
			uint16_t ADC_value = ADC1In8Read();
 8001a4a:	f7fe ffd5 	bl	80009f8 <ADC1In8Read>
 8001a4e:	ab02      	add	r3, sp, #8
			//ADC_value = ADC_value >> 4;
			USART3SendText((uint8_t *)&ADC_value,2);
 8001a50:	2102      	movs	r1, #2
			uint16_t ADC_value = ADC1In8Read();
 8001a52:	f823 0d02 	strh.w	r0, [r3, #-2]!
			USART3SendText((uint8_t *)&ADC_value,2);
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fb14 	bl	8001084 <USART3SendText>
		}
		//Clear interrupt if you are not reading form USART3 DR
		//USART3 -> SR		&= ~(USART_SR_RXNE);
	}

}
 8001a5c:	b003      	add	sp, #12
 8001a5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a62:	bf00      	nop
 8001a64:	40004800 	.word	0x40004800

08001a68 <ADC_IRQHandler>:

//ADC interrupt handler
void ADC_IRQHandler(void){

	//Check for analog watchdog interrupt occured
	if(ADC1 -> SR & ADC_SR_AWD){
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <ADC_IRQHandler+0x2c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	07db      	lsls	r3, r3, #31
 8001a6e:	d50f      	bpl.n	8001a90 <ADC_IRQHandler+0x28>

		if((GPIOD -> ODR & GPIO_ODR_ODR_13) != 0){
 8001a70:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <ADC_IRQHandler+0x30>)
 8001a72:	695a      	ldr	r2, [r3, #20]
 8001a74:	f412 5f00 	tst.w	r2, #8192	; 0x2000

			GPIOD -> ODR	&= ~(GPIO_ODR_ODR_13); 	//LED3 off
 8001a78:	695a      	ldr	r2, [r3, #20]
 8001a7a:	bf14      	ite	ne
 8001a7c:	f422 5200 	bicne.w	r2, r2, #8192	; 0x2000
		}else{

			GPIOD -> ODR	|= GPIO_ODR_ODR_13; 	//LED3 on
 8001a80:	f442 5200 	orreq.w	r2, r2, #8192	; 0x2000
 8001a84:	615a      	str	r2, [r3, #20]
		}
	ADC1 -> SR 	&= ~(ADC_SR_AWD); 	//Clear watchdog interrupt flag
 8001a86:	4a03      	ldr	r2, [pc, #12]	; (8001a94 <ADC_IRQHandler+0x2c>)
 8001a88:	6813      	ldr	r3, [r2, #0]
 8001a8a:	f023 0301 	bic.w	r3, r3, #1
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40012000 	.word	0x40012000
 8001a98:	40020c00 	.word	0x40020c00

08001a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ad4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001aa0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001aa2:	e003      	b.n	8001aac <LoopCopyDataInit>

08001aa4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001aa6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001aa8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001aaa:	3104      	adds	r1, #4

08001aac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001aac:	480b      	ldr	r0, [pc, #44]	; (8001adc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001aae:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ab0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ab2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ab4:	d3f6      	bcc.n	8001aa4 <CopyDataInit>
  ldr  r2, =_sbss
 8001ab6:	4a0b      	ldr	r2, [pc, #44]	; (8001ae4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ab8:	e002      	b.n	8001ac0 <LoopFillZerobss>

08001aba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001aba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001abc:	f842 3b04 	str.w	r3, [r2], #4

08001ac0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ac0:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ac2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ac4:	d3f9      	bcc.n	8001aba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ac6:	f000 f82b 	bl	8001b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aca:	f000 f8a7 	bl	8001c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ace:	f7ff fe95 	bl	80017fc <main>
  bx  lr    
 8001ad2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ad4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ad8:	08001c84 	.word	0x08001c84
  ldr  r0, =_sdata
 8001adc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ae0:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8001ae4:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8001ae8:	2000103c 	.word	0x2000103c

08001aec <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aec:	e7fe      	b.n	8001aec <CAN1_RX0_IRQHandler>
	...

08001af0 <NMI_Handler>:
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop

08001af4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001af4:	e7fe      	b.n	8001af4 <HardFault_Handler>
 8001af6:	bf00      	nop

08001af8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001af8:	e7fe      	b.n	8001af8 <MemManage_Handler>
 8001afa:	bf00      	nop

08001afc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001afc:	e7fe      	b.n	8001afc <BusFault_Handler>
 8001afe:	bf00      	nop

08001b00 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001b00:	e7fe      	b.n	8001b00 <UsageFault_Handler>
 8001b02:	bf00      	nop

08001b04 <SVC_Handler>:
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop

08001b08 <DebugMon_Handler>:
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop

08001b0c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop

08001b10 <SysTick_Handler>:
  * @retval None
  */
void SysTick_Handler(void)
{
//*  TimingDelay_Decrement(); */
	delay_cnt--;
 8001b10:	4a02      	ldr	r2, [pc, #8]	; (8001b1c <SysTick_Handler+0xc>)
 8001b12:	6813      	ldr	r3, [r2, #0]
 8001b14:	3b01      	subs	r3, #1
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20001038 	.word	0x20001038

08001b20 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b20:	4938      	ldr	r1, [pc, #224]	; (8001c04 <SystemInit+0xe4>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001b22:	4b39      	ldr	r3, [pc, #228]	; (8001c08 <SystemInit+0xe8>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b24:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b28:	4838      	ldr	r0, [pc, #224]	; (8001c0c <SystemInit+0xec>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b2a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001b2e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8001b32:	681a      	ldr	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001b34:	2100      	movs	r1, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001b36:	f042 0201 	orr.w	r2, r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001b3c:	6099      	str	r1, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001b44:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b48:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8001b4a:	6058      	str	r0, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b4c:	681a      	ldr	r2, [r3, #0]
{
 8001b4e:	b082      	sub	sp, #8
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b54:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001b56:	60d9      	str	r1, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001b58:	9100      	str	r1, [sp, #0]
 8001b5a:	9101      	str	r1, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b62:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001b64:	461a      	mov	r2, r3
 8001b66:	e003      	b.n	8001b70 <SystemInit+0x50>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001b68:	9b00      	ldr	r3, [sp, #0]
 8001b6a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001b6e:	d009      	beq.n	8001b84 <SystemInit+0x64>
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001b70:	6813      	ldr	r3, [r2, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 8001b78:	9b00      	ldr	r3, [sp, #0]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001b7e:	9b01      	ldr	r3, [sp, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0f1      	beq.n	8001b68 <SystemInit+0x48>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001b84:	4b20      	ldr	r3, [pc, #128]	; (8001c08 <SystemInit+0xe8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8001b8c:	bf18      	it	ne
 8001b8e:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001b90:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001b92:	9b01      	ldr	r3, [sp, #4]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d005      	beq.n	8001ba4 <SystemInit+0x84>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b98:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <SystemInit+0xe4>)
 8001b9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b9e:	609a      	str	r2, [r3, #8]
}
 8001ba0:	b002      	add	sp, #8
 8001ba2:	4770      	bx	lr
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001ba4:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <SystemInit+0xe8>)
    PWR->CR |= PWR_CR_VOS;
 8001ba6:	491a      	ldr	r1, [pc, #104]	; (8001c10 <SystemInit+0xf0>)
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001ba8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001baa:	481a      	ldr	r0, [pc, #104]	; (8001c14 <SystemInit+0xf4>)
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001bac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bb0:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001bb2:	680a      	ldr	r2, [r1, #0]
 8001bb4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001bb8:	600a      	str	r2, [r1, #0]
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bc4:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8001bcc:	609a      	str	r2, [r3, #8]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001bce:	6058      	str	r0, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001bd6:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	0192      	lsls	r2, r2, #6
 8001bdc:	d5fc      	bpl.n	8001bd8 <SystemInit+0xb8>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001bde:	490e      	ldr	r1, [pc, #56]	; (8001c18 <SystemInit+0xf8>)
    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    RCC->CFGR |= RCC_CFGR_SW_PLL;

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001be0:	4a09      	ldr	r2, [pc, #36]	; (8001c08 <SystemInit+0xe8>)
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001be2:	f240 7005 	movw	r0, #1797	; 0x705
 8001be6:	6008      	str	r0, [r1, #0]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001be8:	6899      	ldr	r1, [r3, #8]
 8001bea:	f021 0103 	bic.w	r1, r1, #3
 8001bee:	6099      	str	r1, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001bf0:	6899      	ldr	r1, [r3, #8]
 8001bf2:	f041 0102 	orr.w	r1, r1, #2
 8001bf6:	6099      	str	r1, [r3, #8]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001bf8:	6893      	ldr	r3, [r2, #8]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d1fa      	bne.n	8001bf8 <SystemInit+0xd8>
 8001c02:	e7c9      	b.n	8001b98 <SystemInit+0x78>
 8001c04:	e000ed00 	.word	0xe000ed00
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	24003010 	.word	0x24003010
 8001c10:	40007000 	.word	0x40007000
 8001c14:	07405408 	.word	0x07405408
 8001c18:	40023c00 	.word	0x40023c00

08001c1c <__libc_init_array>:
 8001c1c:	b570      	push	{r4, r5, r6, lr}
 8001c1e:	4e0d      	ldr	r6, [pc, #52]	; (8001c54 <__libc_init_array+0x38>)
 8001c20:	4c0d      	ldr	r4, [pc, #52]	; (8001c58 <__libc_init_array+0x3c>)
 8001c22:	1ba4      	subs	r4, r4, r6
 8001c24:	10a4      	asrs	r4, r4, #2
 8001c26:	2500      	movs	r5, #0
 8001c28:	42a5      	cmp	r5, r4
 8001c2a:	d109      	bne.n	8001c40 <__libc_init_array+0x24>
 8001c2c:	4e0b      	ldr	r6, [pc, #44]	; (8001c5c <__libc_init_array+0x40>)
 8001c2e:	4c0c      	ldr	r4, [pc, #48]	; (8001c60 <__libc_init_array+0x44>)
 8001c30:	f000 f818 	bl	8001c64 <_init>
 8001c34:	1ba4      	subs	r4, r4, r6
 8001c36:	10a4      	asrs	r4, r4, #2
 8001c38:	2500      	movs	r5, #0
 8001c3a:	42a5      	cmp	r5, r4
 8001c3c:	d105      	bne.n	8001c4a <__libc_init_array+0x2e>
 8001c3e:	bd70      	pop	{r4, r5, r6, pc}
 8001c40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c44:	4798      	blx	r3
 8001c46:	3501      	adds	r5, #1
 8001c48:	e7ee      	b.n	8001c28 <__libc_init_array+0xc>
 8001c4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c4e:	4798      	blx	r3
 8001c50:	3501      	adds	r5, #1
 8001c52:	e7f2      	b.n	8001c3a <__libc_init_array+0x1e>
 8001c54:	08001c7c 	.word	0x08001c7c
 8001c58:	08001c7c 	.word	0x08001c7c
 8001c5c:	08001c7c 	.word	0x08001c7c
 8001c60:	08001c80 	.word	0x08001c80

08001c64 <_init>:
 8001c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c66:	bf00      	nop
 8001c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c6a:	bc08      	pop	{r3}
 8001c6c:	469e      	mov	lr, r3
 8001c6e:	4770      	bx	lr

08001c70 <_fini>:
 8001c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c72:	bf00      	nop
 8001c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c76:	bc08      	pop	{r3}
 8001c78:	469e      	mov	lr, r3
 8001c7a:	4770      	bx	lr
