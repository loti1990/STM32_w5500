
Test_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000834  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009bc  080009bc  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080009bc  080009bc  000109bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080009c0  080009c0  000109c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000170  20000000  080009c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020170  2**0
                  CONTENTS
  7 .bss          00000020  20000170  20000170  00020170  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000190  20000190  00020170  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 10 .debug_info   00002159  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000080c  00000000  00000000  000222f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000158  00000000  00000000  00022b08  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000188  00000000  00000000  00022c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000c49  00000000  00000000  00022de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000cf0  00000000  00000000  00023a31  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00024721  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000248  00000000  00000000  000247a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    000003c0  00000000  00000000  000249e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000003f  00000000  00000000  00024da8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000170 	.word	0x20000170
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080009a4 	.word	0x080009a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000174 	.word	0x20000174
 80001c4:	080009a4 	.word	0x080009a4

080001c8 <InitGPIO>:
	/*************************************************
	////////////ENABLE CLK FOR PERIPHERALS////////////
	*************************************************/

	//Enable GPIOA AHB1 clock source
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001c8:	4992      	ldr	r1, [pc, #584]	; (8000414 <InitGPIO+0x24c>)
				*************************************************/

	//////////////////////////////////////////////////////////
	//GPIOA PA3 configure for interrupt generated from W5500//
	//////////////////////////////////////////////////////////
	GPIOA -> MODER 		&= ~(GPIO_MODER_MODER3); 		//PA3 pin as input
 80001ca:	4b93      	ldr	r3, [pc, #588]	; (8000418 <InitGPIO+0x250>)
	GPIOA -> PUPDR 		|= GPIO_PUPDR_PUPDR8_0; 		//PA8 pull-up

	//////////////////////////////////////
	//GPIOD PD13/LED3 on discovery board//
	//////////////////////////////////////
	GPIOD -> MODER 		|= GPIO_MODER_MODER13_0;		//PD13 pin as output
 80001cc:	4893      	ldr	r0, [pc, #588]	; (800041c <InitGPIO+0x254>)

	//////////
	//SPI3_CLK
	//////////
	//pin PB3 CLK configuration
	GPIOB -> MODER  	|= GPIO_MODER_MODER3_1; 	//PB3 pin as alternate function
 80001ce:	4a94      	ldr	r2, [pc, #592]	; (8000420 <InitGPIO+0x258>)
void InitGPIO(void){
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001d2:	6b0f      	ldr	r7, [r1, #48]	; 0x30
	NVIC -> ISER[0] 	|= (1 << EXTI3_IRQn); 			//Enable external interrupt
 80001d4:	4d93      	ldr	r5, [pc, #588]	; (8000424 <InitGPIO+0x25c>)
	SYSCFG -> EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PA;		//PA3 as external interrupt setting up in EXTICR1
 80001d6:	4e94      	ldr	r6, [pc, #592]	; (8000428 <InitGPIO+0x260>)
	EXTI -> FTSR 		|= EXTI_FTSR_TR3;				//interrupt generated at falling edge
 80001d8:	4c94      	ldr	r4, [pc, #592]	; (800042c <InitGPIO+0x264>)
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001da:	f047 0701 	orr.w	r7, r7, #1
 80001de:	630f      	str	r7, [r1, #48]	; 0x30
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80001e0:	6b0f      	ldr	r7, [r1, #48]	; 0x30
 80001e2:	f047 0702 	orr.w	r7, r7, #2
 80001e6:	630f      	str	r7, [r1, #48]	; 0x30
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80001e8:	6b0f      	ldr	r7, [r1, #48]	; 0x30
 80001ea:	f047 0708 	orr.w	r7, r7, #8
 80001ee:	630f      	str	r7, [r1, #48]	; 0x30
	RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 80001f0:	6c0f      	ldr	r7, [r1, #64]	; 0x40
 80001f2:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 80001f6:	640f      	str	r7, [r1, #64]	; 0x40
	RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 80001f8:	6c4f      	ldr	r7, [r1, #68]	; 0x44
 80001fa:	f447 5780 	orr.w	r7, r7, #4096	; 0x1000
 80001fe:	644f      	str	r7, [r1, #68]	; 0x44
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000200:	6c4f      	ldr	r7, [r1, #68]	; 0x44
 8000202:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000206:	644f      	str	r7, [r1, #68]	; 0x44
	GPIOA -> MODER 		&= ~(GPIO_MODER_MODER3); 		//PA3 pin as input
 8000208:	6819      	ldr	r1, [r3, #0]
 800020a:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800020e:	6019      	str	r1, [r3, #0]
	GPIOA -> PUPDR 		|= GPIO_PUPDR_PUPDR3_0; 		//PA3 pull-up
 8000210:	68d9      	ldr	r1, [r3, #12]
 8000212:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8000216:	60d9      	str	r1, [r3, #12]
	NVIC -> ISER[0] 	|= (1 << EXTI3_IRQn); 			//Enable external interrupt
 8000218:	6829      	ldr	r1, [r5, #0]
	NVIC -> IP[EXTI3_IRQn] 		= (uint8_t) 0x01;		//set priority of EXTI3_IRQn to 1 (lower are the number the higher are priority)
 800021a:	2701      	movs	r7, #1
	NVIC -> ISER[0] 	|= (1 << EXTI3_IRQn); 			//Enable external interrupt
 800021c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8000220:	6029      	str	r1, [r5, #0]
	NVIC -> IP[EXTI3_IRQn] 		= (uint8_t) 0x01;		//set priority of EXTI3_IRQn to 1 (lower are the number the higher are priority)
 8000222:	f885 7309 	strb.w	r7, [r5, #777]	; 0x309
	SYSCFG -> EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PA;		//PA3 as external interrupt setting up in EXTICR1
 8000226:	68b1      	ldr	r1, [r6, #8]
 8000228:	60b1      	str	r1, [r6, #8]
	EXTI -> FTSR 		|= EXTI_FTSR_TR3;				//interrupt generated at falling edge
 800022a:	68e1      	ldr	r1, [r4, #12]
 800022c:	f041 0108 	orr.w	r1, r1, #8
 8000230:	60e1      	str	r1, [r4, #12]
	EXTI -> IMR			|= EXTI_IMR_MR3; 				//Enable external interrupt at pin 3
 8000232:	6821      	ldr	r1, [r4, #0]
 8000234:	f041 0108 	orr.w	r1, r1, #8
 8000238:	6021      	str	r1, [r4, #0]
	GPIOA -> MODER 		&= ~(GPIO_MODER_MODER0); 		//PA0 pin as input
 800023a:	6819      	ldr	r1, [r3, #0]
 800023c:	f021 0103 	bic.w	r1, r1, #3
 8000240:	6019      	str	r1, [r3, #0]
	GPIOA -> PUPDR 		&= ~(GPIO_PUPDR_PUPDR0); 		//PA0 no pull-up, pull-down
 8000242:	68d9      	ldr	r1, [r3, #12]
 8000244:	f021 0103 	bic.w	r1, r1, #3
 8000248:	60d9      	str	r1, [r3, #12]
	NVIC -> ISER[0] 	|= (1 << EXTI0_IRQn); 			//Enable external interrupt
 800024a:	6829      	ldr	r1, [r5, #0]
 800024c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8000250:	6029      	str	r1, [r5, #0]
	NVIC -> IP[EXTI0_IRQn] 		= (uint8_t) 0x01;		//set priority of EXTI3_IRQn to 1 (lower are the number the higher are priority)
 8000252:	f885 7306 	strb.w	r7, [r5, #774]	; 0x306
	SYSCFG -> EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;		//PA0 as external interrupt setting up in EXTICR1
 8000256:	68b1      	ldr	r1, [r6, #8]
 8000258:	60b1      	str	r1, [r6, #8]
	EXTI -> RTSR 		|= EXTI_RTSR_TR0;				//interrupt generated at rising edge
 800025a:	68a1      	ldr	r1, [r4, #8]
 800025c:	4339      	orrs	r1, r7
 800025e:	60a1      	str	r1, [r4, #8]
	EXTI -> IMR			|= EXTI_IMR_MR0; 				//Enable external interrupt at pin 0
 8000260:	6821      	ldr	r1, [r4, #0]
 8000262:	4339      	orrs	r1, r7
 8000264:	6021      	str	r1, [r4, #0]
	GPIOA -> MODER 		|= GPIO_MODER_MODER8_0; 		//PA8 pin as output
 8000266:	6819      	ldr	r1, [r3, #0]
 8000268:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800026c:	6019      	str	r1, [r3, #0]
	GPIOA -> OTYPER 	&= ~(GPIO_OTYPER_OT_8);			//PA8 output type push-pull
 800026e:	6859      	ldr	r1, [r3, #4]
 8000270:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8000274:	6059      	str	r1, [r3, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR8; 		//PA8 output speed register (very high speed)
 8000276:	6899      	ldr	r1, [r3, #8]
 8000278:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
 800027c:	6099      	str	r1, [r3, #8]
	GPIOA -> PUPDR 		|= GPIO_PUPDR_PUPDR8_0; 		//PA8 pull-up
 800027e:	68d9      	ldr	r1, [r3, #12]
 8000280:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8000284:	60d9      	str	r1, [r3, #12]
	GPIOD -> MODER 		|= GPIO_MODER_MODER13_0;		//PD13 pin as output
 8000286:	6801      	ldr	r1, [r0, #0]
 8000288:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 800028c:	6001      	str	r1, [r0, #0]
	GPIOD -> OTYPER 	&= ~(GPIO_OTYPER_OT_13);		//PD13 output type push-pull
 800028e:	6841      	ldr	r1, [r0, #4]
 8000290:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8000294:	6041      	str	r1, [r0, #4]
	GPIOD -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR13_0; 	//PD13 output speed register (medium speed)
 8000296:	6881      	ldr	r1, [r0, #8]
 8000298:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 800029c:	6081      	str	r1, [r0, #8]
	GPIOD -> PUPDR 		&= ~(GPIO_PUPDR_PUPDR13); 		//PD13 pull-up
 800029e:	68c1      	ldr	r1, [r0, #12]
 80002a0:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 80002a4:	60c1      	str	r1, [r0, #12]
	GPIOA -> MODER 		|=  GPIO_MODER_MODER2_0; 		//PA2 pin as output
 80002a6:	6819      	ldr	r1, [r3, #0]
 80002a8:	f041 0110 	orr.w	r1, r1, #16
 80002ac:	6019      	str	r1, [r3, #0]
	GPIOA -> OTYPER 	&= ~(GPIO_OTYPER_OT_2);			//PA2 output type push-pull
 80002ae:	6859      	ldr	r1, [r3, #4]
 80002b0:	f021 0104 	bic.w	r1, r1, #4
 80002b4:	6059      	str	r1, [r3, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR2_0; 	//PA2 output speed register (medium speed)
 80002b6:	6899      	ldr	r1, [r3, #8]
 80002b8:	f041 0110 	orr.w	r1, r1, #16
 80002bc:	6099      	str	r1, [r3, #8]
	GPIOA -> PUPDR 		&= ~(GPIO_PUPDR_PUPDR2); 		//PA2 pull-up
 80002be:	68d9      	ldr	r1, [r3, #12]
 80002c0:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 80002c4:	60d9      	str	r1, [r3, #12]
	GPIOA -> ODR 		|= GPIO_ODR_ODR_2; 				//Enable W5500 module
 80002c6:	6959      	ldr	r1, [r3, #20]
 80002c8:	f041 0104 	orr.w	r1, r1, #4
 80002cc:	6159      	str	r1, [r3, #20]
	GPIOA -> MODER		|= GPIO_MODER_MODER4_0;		//PA4 pin output mode
 80002ce:	6819      	ldr	r1, [r3, #0]
 80002d0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80002d4:	6019      	str	r1, [r3, #0]
	GPIOA -> OTYPER 	&= ~(GPIO_OTYPER_OT_4); 	//PA4 output push-pull
 80002d6:	6859      	ldr	r1, [r3, #4]
 80002d8:	f021 0110 	bic.w	r1, r1, #16
 80002dc:	6059      	str	r1, [r3, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR4; 	//PA4 output speed register (very high speed)
 80002de:	6899      	ldr	r1, [r3, #8]
 80002e0:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 80002e4:	6099      	str	r1, [r3, #8]
	GPIOA -> PUPDR		|= GPIO_PUPDR_PUPDR4_0; 	//PA4 pull-up
 80002e6:	68d9      	ldr	r1, [r3, #12]
 80002e8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80002ec:	60d9      	str	r1, [r3, #12]
	GPIOA -> ODR 		|= GPIO_ODR_ODR_4;			//PA4 set in a high output logical level
 80002ee:	6959      	ldr	r1, [r3, #20]
 80002f0:	f041 0110 	orr.w	r1, r1, #16
 80002f4:	6159      	str	r1, [r3, #20]
	GPIOA -> MODER  	|= GPIO_MODER_MODER5_1; 	//PA5 pin as alternate function
 80002f6:	6819      	ldr	r1, [r3, #0]
 80002f8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80002fc:	6019      	str	r1, [r3, #0]
	GPIOA -> OTYPER     &= ~(GPIO_OTYPER_OT_5); 	//PA5 output type push-pull
 80002fe:	6859      	ldr	r1, [r3, #4]
 8000300:	f021 0120 	bic.w	r1, r1, #32
 8000304:	6059      	str	r1, [r3, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR5;  //PA5 output speed register (very high speed)
 8000306:	6899      	ldr	r1, [r3, #8]
 8000308:	f441 6140 	orr.w	r1, r1, #3072	; 0xc00
 800030c:	6099      	str	r1, [r3, #8]
	GPIOA -> PUPDR		|= GPIO_PUPDR_PUPDR5_0; 	//PA5 pull-up
 800030e:	68d9      	ldr	r1, [r3, #12]
 8000310:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000314:	60d9      	str	r1, [r3, #12]
	GPIOA -> AFR[0] 	|= (0x05 << 20); 			//PA5 alternate function SPI1_CLK
 8000316:	6a19      	ldr	r1, [r3, #32]
 8000318:	f441 01a0 	orr.w	r1, r1, #5242880	; 0x500000
 800031c:	6219      	str	r1, [r3, #32]
	GPIOA -> MODER  	|= GPIO_MODER_MODER6_1; 	//PA6 pin as alternate function
 800031e:	6819      	ldr	r1, [r3, #0]
 8000320:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8000324:	6019      	str	r1, [r3, #0]
	GPIOA -> OTYPER     &= ~(GPIO_OTYPER_OT_6); 	//PA6 output type push-pull
 8000326:	6859      	ldr	r1, [r3, #4]
 8000328:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800032c:	6059      	str	r1, [r3, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR6;  //PA6 output speed register (very high speed)
 800032e:	6899      	ldr	r1, [r3, #8]
 8000330:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
 8000334:	6099      	str	r1, [r3, #8]
	GPIOA -> PUPDR		|= GPIO_PUPDR_PUPDR6_0; 	//PA6 pull-up
 8000336:	68d9      	ldr	r1, [r3, #12]
 8000338:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800033c:	60d9      	str	r1, [r3, #12]
	GPIOA -> AFR[0] 	|= (0x05 << 24); 			//PA6 alternate function SPI1_MISO
 800033e:	6a19      	ldr	r1, [r3, #32]
 8000340:	f041 61a0 	orr.w	r1, r1, #83886080	; 0x5000000
 8000344:	6219      	str	r1, [r3, #32]
	GPIOA -> MODER  	|= GPIO_MODER_MODER7_1; 	//PA7 pin as alternate function
 8000346:	6819      	ldr	r1, [r3, #0]
 8000348:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800034c:	6019      	str	r1, [r3, #0]
	GPIOA -> OTYPER     &= ~(GPIO_OTYPER_OT_7); 	//PA7 output type push-pull
 800034e:	6859      	ldr	r1, [r3, #4]
 8000350:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8000354:	6059      	str	r1, [r3, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR7;  //PA7 output speed register (very high speed)
 8000356:	6899      	ldr	r1, [r3, #8]
 8000358:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800035c:	6099      	str	r1, [r3, #8]
	GPIOA -> PUPDR		|= GPIO_PUPDR_PUPDR7_0; 	//PA7 pull-up
 800035e:	68d9      	ldr	r1, [r3, #12]
 8000360:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000364:	60d9      	str	r1, [r3, #12]
	GPIOA -> AFR[0] 	|= (0x05 << 28); 			//PA7 alternate function SPI1_MOSI
 8000366:	6a19      	ldr	r1, [r3, #32]
 8000368:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
 800036c:	6219      	str	r1, [r3, #32]
	GPIOA -> MODER  	|= GPIO_MODER_MODER15_1; 	//PA15 pin as alternate function
 800036e:	6819      	ldr	r1, [r3, #0]
 8000370:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8000374:	6019      	str	r1, [r3, #0]
	GPIOA -> OTYPER     &= ~(GPIO_OTYPER_OT_15); 	//PA15 output type push-pull
 8000376:	6859      	ldr	r1, [r3, #4]
 8000378:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800037c:	6059      	str	r1, [r3, #4]
	GPIOA -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR15; //PA15 output speed register (very high speed)
 800037e:	6899      	ldr	r1, [r3, #8]
 8000380:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
 8000384:	6099      	str	r1, [r3, #8]
	GPIOA -> PUPDR		|= GPIO_PUPDR_PUPDR15_0; 	//PA15 pull-up
 8000386:	68d9      	ldr	r1, [r3, #12]
 8000388:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800038c:	60d9      	str	r1, [r3, #12]
	GPIOA -> AFR[1] 	|= (0x06 << 28); 			//PA15 alternate function SPI3_NSS
 800038e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000390:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
 8000394:	6259      	str	r1, [r3, #36]	; 0x24
	GPIOB -> MODER  	|= GPIO_MODER_MODER3_1; 	//PB3 pin as alternate function
 8000396:	6813      	ldr	r3, [r2, #0]
 8000398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800039c:	6013      	str	r3, [r2, #0]
	GPIOB -> OTYPER     &= ~(GPIO_OTYPER_OT_3); 	//PB3 output type push-pull
 800039e:	6853      	ldr	r3, [r2, #4]
 80003a0:	f023 0308 	bic.w	r3, r3, #8
 80003a4:	6053      	str	r3, [r2, #4]
	GPIOB -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR3;  //PB3 output speed register (very high speed)
 80003a6:	6893      	ldr	r3, [r2, #8]
 80003a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80003ac:	6093      	str	r3, [r2, #8]
	GPIOB -> PUPDR		|= GPIO_PUPDR_PUPDR3_0; 	//PB3 pull-up
 80003ae:	68d3      	ldr	r3, [r2, #12]
 80003b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003b4:	60d3      	str	r3, [r2, #12]
	GPIOB -> AFR[0] 	|= (0x06 << 12); 			//PB3 alternate function SPI3_CLK
 80003b6:	6a13      	ldr	r3, [r2, #32]
 80003b8:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80003bc:	6213      	str	r3, [r2, #32]

	///////////
	//SPI3_MISO
	///////////
	//pin PB4 MISO configuration
	GPIOB -> MODER  	|= GPIO_MODER_MODER4_1; 	//PB4 pin as alternate function
 80003be:	6813      	ldr	r3, [r2, #0]
 80003c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003c4:	6013      	str	r3, [r2, #0]
	GPIOB -> OTYPER     &= ~(GPIO_OTYPER_OT_4); 	//PB4 output type push-pull
 80003c6:	6853      	ldr	r3, [r2, #4]
 80003c8:	f023 0310 	bic.w	r3, r3, #16
 80003cc:	6053      	str	r3, [r2, #4]
	GPIOB -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR4;  //PB4 output speed register (very high speed)
 80003ce:	6893      	ldr	r3, [r2, #8]
 80003d0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80003d4:	6093      	str	r3, [r2, #8]
	GPIOB -> PUPDR		|= GPIO_PUPDR_PUPDR4_0; 	//PB4 pull-up
 80003d6:	68d3      	ldr	r3, [r2, #12]
 80003d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003dc:	60d3      	str	r3, [r2, #12]
	GPIOB -> AFR[0] 	|= (0x06 << 16); 			//PB4 alternate function SPI3_MISO
 80003de:	6a13      	ldr	r3, [r2, #32]
 80003e0:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 80003e4:	6213      	str	r3, [r2, #32]

	///////////
	//SPI3_MOSI
	///////////
	//pin PB5 MOSI configuration
	GPIOB -> MODER  	|= GPIO_MODER_MODER5_1; 	//PB5 pin as alternate function
 80003e6:	6813      	ldr	r3, [r2, #0]
 80003e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003ec:	6013      	str	r3, [r2, #0]
	GPIOB -> OTYPER     &= ~(GPIO_OTYPER_OT_5); 	//PB5 output type push-pull
 80003ee:	6853      	ldr	r3, [r2, #4]
 80003f0:	f023 0320 	bic.w	r3, r3, #32
 80003f4:	6053      	str	r3, [r2, #4]
	GPIOB -> OSPEEDR 	|= GPIO_OSPEEDER_OSPEEDR5;  //PB5 output speed register (very high speed)
 80003f6:	6893      	ldr	r3, [r2, #8]
 80003f8:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80003fc:	6093      	str	r3, [r2, #8]
	GPIOB -> PUPDR		|= GPIO_PUPDR_PUPDR5_0; 	//PB5 pull-up
 80003fe:	68d3      	ldr	r3, [r2, #12]
 8000400:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000404:	60d3      	str	r3, [r2, #12]
	GPIOB -> AFR[0] 	|= (0x06 << 20); 			//PB5 alternate function SPI3_MOSI
 8000406:	6a13      	ldr	r3, [r2, #32]
 8000408:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 800040c:	6213      	str	r3, [r2, #32]
}
 800040e:	bcf0      	pop	{r4, r5, r6, r7}
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	40023800 	.word	0x40023800
 8000418:	40020000 	.word	0x40020000
 800041c:	40020c00 	.word	0x40020c00
 8000420:	40020400 	.word	0x40020400
 8000424:	e000e100 	.word	0xe000e100
 8000428:	40013800 	.word	0x40013800
 800042c:	40013c00 	.word	0x40013c00

08000430 <SPI1Init>:

//SPI1 inicialization
void SPI1Init(){

	//Configure NSS hardware pin
	SPI1 -> CR1 	&= ~(SPI_CR1_SSM);
 8000430:	4b1e      	ldr	r3, [pc, #120]	; (80004ac <SPI1Init+0x7c>)
 8000432:	881a      	ldrh	r2, [r3, #0]
 8000434:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000438:	0412      	lsls	r2, r2, #16
 800043a:	0c12      	lsrs	r2, r2, #16
 800043c:	801a      	strh	r2, [r3, #0]
	SPI1 -> CR2 	|= SPI_CR2_SSOE;
 800043e:	889a      	ldrh	r2, [r3, #4]
 8000440:	b292      	uxth	r2, r2
 8000442:	f042 0204 	orr.w	r2, r2, #4
 8000446:	809a      	strh	r2, [r3, #4]

	//Configure clock polarity sample at positive clock edge
	SPI1 -> CR1 	&= ~(SPI_CR1_CPHA);
 8000448:	881a      	ldrh	r2, [r3, #0]
 800044a:	f022 0201 	bic.w	r2, r2, #1
 800044e:	0412      	lsls	r2, r2, #16
 8000450:	0c12      	lsrs	r2, r2, #16
 8000452:	801a      	strh	r2, [r3, #0]
	SPI1 -> CR1 	&= ~(SPI_CR1_CPOL);
 8000454:	881a      	ldrh	r2, [r3, #0]
 8000456:	f022 0202 	bic.w	r2, r2, #2
 800045a:	0412      	lsls	r2, r2, #16
 800045c:	0c12      	lsrs	r2, r2, #16
 800045e:	801a      	strh	r2, [r3, #0]

	//MSB bit first out
	SPI1 -> CR1 	&= ~(SPI_CR1_LSBFIRST);
 8000460:	881a      	ldrh	r2, [r3, #0]
 8000462:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000466:	0412      	lsls	r2, r2, #16
 8000468:	0c12      	lsrs	r2, r2, #16
 800046a:	801a      	strh	r2, [r3, #0]

	//2-line SPI mode (MISO & MOSI)
	SPI1 -> CR1 	&= ~(SPI_CR1_BIDIMODE);
 800046c:	881a      	ldrh	r2, [r3, #0]
 800046e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8000472:	801a      	strh	r2, [r3, #0]

	//SPI full duplex mode
	SPI1 -> CR1 	&= ~(SPI_CR1_RXONLY);
 8000474:	881a      	ldrh	r2, [r3, #0]
 8000476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800047a:	0412      	lsls	r2, r2, #16
 800047c:	0c12      	lsrs	r2, r2, #16
 800047e:	801a      	strh	r2, [r3, #0]

	//SPI 8-bit data frame format
	SPI1 -> CR1 	&= ~(SPI_CR1_DFF);
 8000480:	881a      	ldrh	r2, [r3, #0]
 8000482:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000486:	0412      	lsls	r2, r2, #16
 8000488:	0c12      	lsrs	r2, r2, #16
 800048a:	801a      	strh	r2, [r3, #0]

	//SPI baud rate without prescaler the sclk clock would be 42 MHz
	//SPI1 -> CR1 	|= ~(SPI_CR1_BR); 	// 84 MHz / 2 = 42 MHz
	SPI1 -> CR1 	|= (SPI_CR1_BR_1 |  SPI_CR1_BR_0); 	// 84 MHz / 16 = 5.25 MHz
 800048c:	881a      	ldrh	r2, [r3, #0]
 800048e:	b292      	uxth	r2, r2
 8000490:	f042 0218 	orr.w	r2, r2, #24
 8000494:	801a      	strh	r2, [r3, #0]
	//SPI1 -> CR1 	|= SPI_CR1_BR; 		// 84 MHz / 256 = 328 kHz (only in test version)

	//SPI in master mode configuration
	SPI1 -> CR1 	|= SPI_CR1_MSTR;
 8000496:	881a      	ldrh	r2, [r3, #0]
 8000498:	b292      	uxth	r2, r2
 800049a:	f042 0204 	orr.w	r2, r2, #4
 800049e:	801a      	strh	r2, [r3, #0]

	//SPI enable
	SPI1 -> CR1 	|= SPI_CR1_SPE;
 80004a0:	881a      	ldrh	r2, [r3, #0]
 80004a2:	b292      	uxth	r2, r2
 80004a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80004a8:	801a      	strh	r2, [r3, #0]
 80004aa:	4770      	bx	lr
 80004ac:	40013000 	.word	0x40013000

080004b0 <SPI1SendNByte>:

	 //variable for count
	 uint32_t i = 0;

	 //SPI1 CS enable (output low logical level)
	 GPIOA -> ODR 		&= ~(GPIO_ODR_ODR_4);
 80004b0:	4a0e      	ldr	r2, [pc, #56]	; (80004ec <SPI1SendNByte+0x3c>)
 80004b2:	6953      	ldr	r3, [r2, #20]
 80004b4:	f023 0310 	bic.w	r3, r3, #16
 80004b8:	6153      	str	r3, [r2, #20]

	 for(i = 0;i < data_len;i++){
 80004ba:	b181      	cbz	r1, 80004de <SPI1SendNByte+0x2e>
	 SPI1 -> DR = *data;
 80004bc:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <SPI1SendNByte+0x40>)
 80004be:	4401      	add	r1, r0
 80004c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80004c4:	819a      	strh	r2, [r3, #12]
	 while(!(SPI1 -> SR & SPI_SR_TXE));
 80004c6:	891a      	ldrh	r2, [r3, #8]
 80004c8:	0792      	lsls	r2, r2, #30
 80004ca:	d5fc      	bpl.n	80004c6 <SPI1SendNByte+0x16>
	 while(!(SPI1 -> SR & SPI_SR_RXNE));
 80004cc:	891a      	ldrh	r2, [r3, #8]
 80004ce:	07d2      	lsls	r2, r2, #31
 80004d0:	d5fc      	bpl.n	80004cc <SPI1SendNByte+0x1c>
	 while(SPI1 -> SR & SPI_SR_BSY);
 80004d2:	891a      	ldrh	r2, [r3, #8]
 80004d4:	0612      	lsls	r2, r2, #24
 80004d6:	d4fc      	bmi.n	80004d2 <SPI1SendNByte+0x22>
	 for(i = 0;i < data_len;i++){
 80004d8:	4288      	cmp	r0, r1
	 return SPI1 -> DR;
 80004da:	899a      	ldrh	r2, [r3, #12]
	 for(i = 0;i < data_len;i++){
 80004dc:	d1f0      	bne.n	80004c0 <SPI1SendNByte+0x10>
		 //Write 8 bit data
		 SPI1Send1ByteReceive1Byte(&(data[i]));
	 }

	 //SPI1 CS disable (output high logical level)
	 GPIOA -> ODR 		|= GPIO_ODR_ODR_4;
 80004de:	4a03      	ldr	r2, [pc, #12]	; (80004ec <SPI1SendNByte+0x3c>)
 80004e0:	6953      	ldr	r3, [r2, #20]
 80004e2:	f043 0310 	orr.w	r3, r3, #16
 80004e6:	6153      	str	r3, [r2, #20]

}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	40020000 	.word	0x40020000
 80004f0:	40013000 	.word	0x40013000

080004f4 <SPI1SendNByteReceive1Byte>:

	 //Received data variable
	 uint8_t received_data = 0x00;

	 //SPI1 CS enable (output low logical level)
	 GPIOA -> ODR 		&= ~(GPIO_ODR_ODR_4);
 80004f4:	4a17      	ldr	r2, [pc, #92]	; (8000554 <SPI1SendNByteReceive1Byte+0x60>)
 80004f6:	6953      	ldr	r3, [r2, #20]
 80004f8:	f023 0310 	bic.w	r3, r3, #16
uint8_t SPI1SendNByteReceive1Byte(uint8_t *data_to_send, uint32_t send_data_len){
 80004fc:	b430      	push	{r4, r5}
	 GPIOA -> ODR 		&= ~(GPIO_ODR_ODR_4);
 80004fe:	6153      	str	r3, [r2, #20]

	 for(i = 0;i < send_data_len;i++){
 8000500:	b189      	cbz	r1, 8000526 <SPI1SendNByteReceive1Byte+0x32>
	 SPI1 -> DR = *data;
 8000502:	4b15      	ldr	r3, [pc, #84]	; (8000558 <SPI1SendNByteReceive1Byte+0x64>)
 8000504:	4604      	mov	r4, r0
 8000506:	1845      	adds	r5, r0, r1
 8000508:	f814 2b01 	ldrb.w	r2, [r4], #1
 800050c:	819a      	strh	r2, [r3, #12]
	 while(!(SPI1 -> SR & SPI_SR_TXE));
 800050e:	891a      	ldrh	r2, [r3, #8]
 8000510:	0792      	lsls	r2, r2, #30
 8000512:	d5fc      	bpl.n	800050e <SPI1SendNByteReceive1Byte+0x1a>
	 while(!(SPI1 -> SR & SPI_SR_RXNE));
 8000514:	891a      	ldrh	r2, [r3, #8]
 8000516:	07d2      	lsls	r2, r2, #31
 8000518:	d5fc      	bpl.n	8000514 <SPI1SendNByteReceive1Byte+0x20>
	 while(SPI1 -> SR & SPI_SR_BSY);
 800051a:	891a      	ldrh	r2, [r3, #8]
 800051c:	0612      	lsls	r2, r2, #24
 800051e:	d4fc      	bmi.n	800051a <SPI1SendNByteReceive1Byte+0x26>
	 for(i = 0;i < send_data_len;i++){
 8000520:	42ac      	cmp	r4, r5
	 return SPI1 -> DR;
 8000522:	899a      	ldrh	r2, [r3, #12]
	 for(i = 0;i < send_data_len;i++){
 8000524:	d1f0      	bne.n	8000508 <SPI1SendNByteReceive1Byte+0x14>
	 SPI1 -> DR = *data;
 8000526:	4a0c      	ldr	r2, [pc, #48]	; (8000558 <SPI1SendNByteReceive1Byte+0x64>)
 8000528:	5c43      	ldrb	r3, [r0, r1]
 800052a:	8193      	strh	r3, [r2, #12]
	 while(!(SPI1 -> SR & SPI_SR_TXE));
 800052c:	8913      	ldrh	r3, [r2, #8]
 800052e:	0798      	lsls	r0, r3, #30
 8000530:	d5fc      	bpl.n	800052c <SPI1SendNByteReceive1Byte+0x38>
	 while(!(SPI1 -> SR & SPI_SR_RXNE));
 8000532:	4a09      	ldr	r2, [pc, #36]	; (8000558 <SPI1SendNByteReceive1Byte+0x64>)
 8000534:	8913      	ldrh	r3, [r2, #8]
 8000536:	07d9      	lsls	r1, r3, #31
 8000538:	d5fc      	bpl.n	8000534 <SPI1SendNByteReceive1Byte+0x40>
	 while(SPI1 -> SR & SPI_SR_BSY);
 800053a:	4a07      	ldr	r2, [pc, #28]	; (8000558 <SPI1SendNByteReceive1Byte+0x64>)
 800053c:	8913      	ldrh	r3, [r2, #8]
 800053e:	061b      	lsls	r3, r3, #24
 8000540:	d4fc      	bmi.n	800053c <SPI1SendNByteReceive1Byte+0x48>
		 SPI1Send1ByteReceive1Byte(&data_to_send[i]);
	 }
	 received_data = SPI1Send1ByteReceive1Byte(&data_to_send[i]);

	 //SPI1 CS disable (output high logical level)
	 GPIOA -> ODR 		|= GPIO_ODR_ODR_4;
 8000542:	4904      	ldr	r1, [pc, #16]	; (8000554 <SPI1SendNByteReceive1Byte+0x60>)
	 return SPI1 -> DR;
 8000544:	8990      	ldrh	r0, [r2, #12]
	 GPIOA -> ODR 		|= GPIO_ODR_ODR_4;
 8000546:	694b      	ldr	r3, [r1, #20]
 8000548:	f043 0310 	orr.w	r3, r3, #16

	 return received_data;
}
 800054c:	b2c0      	uxtb	r0, r0
	 GPIOA -> ODR 		|= GPIO_ODR_ODR_4;
 800054e:	614b      	str	r3, [r1, #20]
}
 8000550:	bc30      	pop	{r4, r5}
 8000552:	4770      	bx	lr
 8000554:	40020000 	.word	0x40020000
 8000558:	40013000 	.word	0x40013000

0800055c <SPI3Init>:

//SPI3 initialization
void SPI3Init(){

	//Configure NSS hardware pin
	SPI3 -> CR1 	&= ~(SPI_CR1_SSM); 		//Use hardware controlled chip select line
 800055c:	4b1b      	ldr	r3, [pc, #108]	; (80005cc <SPI3Init+0x70>)
 800055e:	881a      	ldrh	r2, [r3, #0]
 8000560:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000564:	0412      	lsls	r2, r2, #16
 8000566:	0c12      	lsrs	r2, r2, #16
 8000568:	801a      	strh	r2, [r3, #0]
	SPI3 -> CR2		|= SPI_CR2_SSOE; 		//Use hardware output chip select that was active in low state
 800056a:	889a      	ldrh	r2, [r3, #4]
 800056c:	b292      	uxth	r2, r2
 800056e:	f042 0204 	orr.w	r2, r2, #4
 8000572:	809a      	strh	r2, [r3, #4]

	//Configure clock polarity sample at positive edge of clock
	SPI3 -> CR1 	&= ~(SPI_CR1_CPHA);
 8000574:	881a      	ldrh	r2, [r3, #0]
 8000576:	f022 0201 	bic.w	r2, r2, #1
 800057a:	0412      	lsls	r2, r2, #16
 800057c:	0c12      	lsrs	r2, r2, #16
 800057e:	801a      	strh	r2, [r3, #0]
	SPI3 -> CR1 	|= SPI_CR1_CPOL;
 8000580:	881a      	ldrh	r2, [r3, #0]
 8000582:	b292      	uxth	r2, r2
 8000584:	f042 0202 	orr.w	r2, r2, #2
 8000588:	801a      	strh	r2, [r3, #0]

	//MSB bit first out
	SPI3 -> CR1 	&= ~(SPI_CR1_LSBFIRST);
 800058a:	881a      	ldrh	r2, [r3, #0]
 800058c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000590:	0412      	lsls	r2, r2, #16
 8000592:	0c12      	lsrs	r2, r2, #16
 8000594:	801a      	strh	r2, [r3, #0]

	//2-line SPI mode (MISO & MOSI)
	SPI3 -> CR1 	&= ~(SPI_CR1_BIDIMODE);
 8000596:	881a      	ldrh	r2, [r3, #0]
 8000598:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800059c:	801a      	strh	r2, [r3, #0]

	//SPI full duplex mode
	SPI3 -> CR1 	&= ~(SPI_CR1_RXONLY);
 800059e:	881a      	ldrh	r2, [r3, #0]
 80005a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80005a4:	0412      	lsls	r2, r2, #16
 80005a6:	0c12      	lsrs	r2, r2, #16
 80005a8:	801a      	strh	r2, [r3, #0]

	//SPI 8-bit data frame format
	SPI3 -> CR1 	&= ~(SPI_CR1_DFF);
 80005aa:	881a      	ldrh	r2, [r3, #0]
 80005ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80005b0:	0412      	lsls	r2, r2, #16
 80005b2:	0c12      	lsrs	r2, r2, #16
 80005b4:	801a      	strh	r2, [r3, #0]

	//SPI baud rate without prescaler the sclk clock would be 42 MHz
	SPI3 -> CR1 	|= SPI_CR1_BR_0; 	// 42 MHz / 4 = 10,5 MHz
 80005b6:	881a      	ldrh	r2, [r3, #0]
 80005b8:	b292      	uxth	r2, r2
 80005ba:	f042 0208 	orr.w	r2, r2, #8
 80005be:	801a      	strh	r2, [r3, #0]

	//SPI in master mode configuration
	SPI3 -> CR1 	|= SPI_CR1_MSTR;
 80005c0:	881a      	ldrh	r2, [r3, #0]
 80005c2:	b292      	uxth	r2, r2
 80005c4:	f042 0204 	orr.w	r2, r2, #4
 80005c8:	801a      	strh	r2, [r3, #0]
 80005ca:	4770      	bx	lr
 80005cc:	40003c00 	.word	0x40003c00

080005d0 <W5500Init>:

//Socket 0 TX write pointer register [read/write]
uint8_t S0_TX_WR[5] = {0x00,0x24,0x0C};

//Initialize W5500 ethernet module
void W5500Init(void){
 80005d0:	b538      	push	{r3, r4, r5, lr}

	//enable ping
	SPI1SendNByte(CR_MR_W5500,4);
 80005d2:	2104      	movs	r1, #4
 80005d4:	4841      	ldr	r0, [pc, #260]	; (80006dc <W5500Init+0x10c>)

	//open Socket 0
	SPI1SendNByte(S0_CR_OPEN_W5500,4);

	//wait on Socket 0 SOCK_INIT flag
	while(!(SPI1SendNByteReceive1Byte(S0_SR_W5500,3) == 0x13));
 80005d6:	4c42      	ldr	r4, [pc, #264]	; (80006e0 <W5500Init+0x110>)
	SPI1SendNByte(CR_MR_W5500,4);
 80005d8:	f7ff ff6a 	bl	80004b0 <SPI1SendNByte>
	SPI1SendNByte(CR_GAR_W5500,7);
 80005dc:	2107      	movs	r1, #7
 80005de:	4841      	ldr	r0, [pc, #260]	; (80006e4 <W5500Init+0x114>)
 80005e0:	f7ff ff66 	bl	80004b0 <SPI1SendNByte>
	SPI1SendNByte(CR_SUBR_W5500,7);
 80005e4:	2107      	movs	r1, #7
 80005e6:	4840      	ldr	r0, [pc, #256]	; (80006e8 <W5500Init+0x118>)
 80005e8:	f7ff ff62 	bl	80004b0 <SPI1SendNByte>
	SPI1SendNByte(CR_SHAR_W5500,9);
 80005ec:	2109      	movs	r1, #9
 80005ee:	483f      	ldr	r0, [pc, #252]	; (80006ec <W5500Init+0x11c>)
 80005f0:	f7ff ff5e 	bl	80004b0 <SPI1SendNByte>
	CR_SIPR_W5500[0]=MSB(W5500_CRB_SIPR_0);
 80005f4:	4b3e      	ldr	r3, [pc, #248]	; (80006f0 <W5500Init+0x120>)
	CR_SIPR_W5500[1]=LSB(W5500_CRB_SIPR_0);
 80005f6:	220f      	movs	r2, #15
	SPI1SendNByte(CR_SIPR_W5500,7);
 80005f8:	4618      	mov	r0, r3
 80005fa:	2107      	movs	r1, #7
	CR_SIPR_W5500[0]=MSB(W5500_CRB_SIPR_0);
 80005fc:	2500      	movs	r5, #0
 80005fe:	701d      	strb	r5, [r3, #0]
	CR_SIPR_W5500[1]=LSB(W5500_CRB_SIPR_0);
 8000600:	705a      	strb	r2, [r3, #1]
	SPI1SendNByte(CR_SIPR_W5500,7);
 8000602:	f7ff ff55 	bl	80004b0 <SPI1SendNByte>
	SPI1SendNByte(CR_PHYCFGR_W5500,4);
 8000606:	2104      	movs	r1, #4
 8000608:	483a      	ldr	r0, [pc, #232]	; (80006f4 <W5500Init+0x124>)
 800060a:	f7ff ff51 	bl	80004b0 <SPI1SendNByte>
	SPI1SendNByte(CR_SIMR_W5500,4);
 800060e:	2104      	movs	r1, #4
 8000610:	4839      	ldr	r0, [pc, #228]	; (80006f8 <W5500Init+0x128>)
 8000612:	f7ff ff4d 	bl	80004b0 <SPI1SendNByte>
	SPI1SendNByte(S0_RX_TX_BUF_SIZE_W5500,5);
 8000616:	2105      	movs	r1, #5
 8000618:	4838      	ldr	r0, [pc, #224]	; (80006fc <W5500Init+0x12c>)
 800061a:	f7ff ff49 	bl	80004b0 <SPI1SendNByte>
	SPI1SendNByte(S0_MR_W5500,4);
 800061e:	2104      	movs	r1, #4
 8000620:	4837      	ldr	r0, [pc, #220]	; (8000700 <W5500Init+0x130>)
 8000622:	f7ff ff45 	bl	80004b0 <SPI1SendNByte>
	SPI1SendNByte(S0_PORT_W5500,5);
 8000626:	2105      	movs	r1, #5
 8000628:	4836      	ldr	r0, [pc, #216]	; (8000704 <W5500Init+0x134>)
 800062a:	f7ff ff41 	bl	80004b0 <SPI1SendNByte>
	SPI1SendNByte(S0_CR_OPEN_W5500,4);
 800062e:	2104      	movs	r1, #4
 8000630:	4835      	ldr	r0, [pc, #212]	; (8000708 <W5500Init+0x138>)
 8000632:	f7ff ff3d 	bl	80004b0 <SPI1SendNByte>
	while(!(SPI1SendNByteReceive1Byte(S0_SR_W5500,3) == 0x13));
 8000636:	2103      	movs	r1, #3
 8000638:	4620      	mov	r0, r4
 800063a:	f7ff ff5b 	bl	80004f4 <SPI1SendNByteReceive1Byte>
 800063e:	2813      	cmp	r0, #19
 8000640:	d1f9      	bne.n	8000636 <W5500Init+0x66>

	//listen Socket 0
	SPI1SendNByte(S0_CR_LISTEN_W5500,4);
 8000642:	2104      	movs	r1, #4
 8000644:	4831      	ldr	r0, [pc, #196]	; (800070c <W5500Init+0x13c>)

	//wait on Socket 0 SOCK_LISTEN flag
	while(!(SPI1SendNByteReceive1Byte(S0_SR_W5500,3) == 0x14));
 8000646:	4c26      	ldr	r4, [pc, #152]	; (80006e0 <W5500Init+0x110>)
	SPI1SendNByte(S0_CR_LISTEN_W5500,4);
 8000648:	f7ff ff32 	bl	80004b0 <SPI1SendNByte>
	while(!(SPI1SendNByteReceive1Byte(S0_SR_W5500,3) == 0x14));
 800064c:	2103      	movs	r1, #3
 800064e:	4620      	mov	r0, r4
 8000650:	f7ff ff50 	bl	80004f4 <SPI1SendNByteReceive1Byte>
 8000654:	2814      	cmp	r0, #20
 8000656:	d1f9      	bne.n	800064c <W5500Init+0x7c>

	//wait on socket establishe flag
	while(!(SPI1SendNByteReceive1Byte(S0_SR_W5500,3)==0x17));
 8000658:	4c21      	ldr	r4, [pc, #132]	; (80006e0 <W5500Init+0x110>)
 800065a:	2103      	movs	r1, #3
 800065c:	4620      	mov	r0, r4
 800065e:	f7ff ff49 	bl	80004f4 <SPI1SendNByteReceive1Byte>
 8000662:	2817      	cmp	r0, #23
 8000664:	d1f9      	bne.n	800065a <W5500Init+0x8a>
	//create variables for Socket0 TX buffer start and end pointer which define data length
	uint16_t start_pointer = 0;
	uint16_t end_pointer = 0;

	//read Socket 0 TX read pointer register
	start_pointer = SPI1SendNByteReceive1Byte(S0_TX_RD_MSB,3);
 8000666:	2103      	movs	r1, #3
 8000668:	4829      	ldr	r0, [pc, #164]	; (8000710 <W5500Init+0x140>)
 800066a:	f7ff ff43 	bl	80004f4 <SPI1SendNByteReceive1Byte>
	start_pointer = start_pointer << 8;
	start_pointer = start_pointer | SPI1SendNByteReceive1Byte(S0_TX_RD_LSB,3);
 800066e:	2103      	movs	r1, #3
	start_pointer = start_pointer << 8;
 8000670:	0204      	lsls	r4, r0, #8
	start_pointer = start_pointer | SPI1SendNByteReceive1Byte(S0_TX_RD_LSB,3);
 8000672:	4828      	ldr	r0, [pc, #160]	; (8000714 <W5500Init+0x144>)
 8000674:	f7ff ff3e 	bl	80004f4 <SPI1SendNByteReceive1Byte>
	start_pointer = start_pointer << 8;
 8000678:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
	start_pointer = start_pointer | SPI1SendNByteReceive1Byte(S0_TX_RD_LSB,3);
 800067c:	ea44 0300 	orr.w	r3, r4, r0

	//calculate value of Socket0 write pointer register for length of data available for send
	end_pointer = start_pointer + 256;

	//manage LSB and MSB bits
	S0_TX_WR[3] =(uint8_t)(end_pointer>>8);
 8000680:	4a25      	ldr	r2, [pc, #148]	; (8000718 <W5500Init+0x148>)
	end_pointer = start_pointer + 256;
 8000682:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000686:	b29b      	uxth	r3, r3
	S0_TX_WR[3] =(uint8_t)(end_pointer>>8);
 8000688:	0a1c      	lsrs	r4, r3, #8
	S0_TX_WR[4] =(uint8_t)end_pointer;

	//write value in to Socket0 TX write pointer register
	SPI1SendNByte(S0_TX_WR,5);
 800068a:	4610      	mov	r0, r2
 800068c:	2105      	movs	r1, #5
	S0_TX_WR[3] =(uint8_t)(end_pointer>>8);
 800068e:	70d4      	strb	r4, [r2, #3]
	S0_TX_WR[4] =(uint8_t)end_pointer;
 8000690:	7113      	strb	r3, [r2, #4]
	SPI1SendNByte(S0_TX_WR,5);
 8000692:	f7ff ff0d 	bl	80004b0 <SPI1SendNByte>
 8000696:	4b21      	ldr	r3, [pc, #132]	; (800071c <W5500Init+0x14c>)


	//generate data for sending
	int i=0;
	for(i=3;i<259;i++){
 8000698:	2403      	movs	r4, #3
 800069a:	f240 1203 	movw	r2, #259	; 0x103

		S0_TX_BUFFER[i]=i;
 800069e:	f803 4f01 	strb.w	r4, [r3, #1]!
	for(i=3;i<259;i++){
 80006a2:	3401      	adds	r4, #1
 80006a4:	4294      	cmp	r4, r2
 80006a6:	d1fa      	bne.n	800069e <W5500Init+0xce>
	}

	//configure Socket0 TX buffer start address
	S0_TX_BUFFER[0] = SPI1SendNByteReceive1Byte(S0_TX_RD_MSB,3);
 80006a8:	2103      	movs	r1, #3
 80006aa:	4819      	ldr	r0, [pc, #100]	; (8000710 <W5500Init+0x140>)
 80006ac:	4d1c      	ldr	r5, [pc, #112]	; (8000720 <W5500Init+0x150>)
 80006ae:	f7ff ff21 	bl	80004f4 <SPI1SendNByteReceive1Byte>
	S0_TX_BUFFER[1] = SPI1SendNByteReceive1Byte(S0_TX_RD_LSB,3);
 80006b2:	2103      	movs	r1, #3
	S0_TX_BUFFER[0] = SPI1SendNByteReceive1Byte(S0_TX_RD_MSB,3);
 80006b4:	7028      	strb	r0, [r5, #0]
	S0_TX_BUFFER[1] = SPI1SendNByteReceive1Byte(S0_TX_RD_LSB,3);
 80006b6:	4817      	ldr	r0, [pc, #92]	; (8000714 <W5500Init+0x144>)
 80006b8:	f7ff ff1c 	bl	80004f4 <SPI1SendNByteReceive1Byte>

	//write data in to TX buffer
	SPI1SendNByte(S0_TX_BUFFER,259);
 80006bc:	4621      	mov	r1, r4
	S0_TX_BUFFER[1] = SPI1SendNByteReceive1Byte(S0_TX_RD_LSB,3);
 80006be:	7068      	strb	r0, [r5, #1]
	SPI1SendNByte(S0_TX_BUFFER,259);
 80006c0:	4628      	mov	r0, r5
 80006c2:	f7ff fef5 	bl	80004b0 <SPI1SendNByte>

	//send TX data to the client
	SPI1SendNByte(S0_SEND_TX_BUFFER,4);
 80006c6:	2104      	movs	r1, #4
 80006c8:	4816      	ldr	r0, [pc, #88]	; (8000724 <W5500Init+0x154>)
 80006ca:	f7ff fef1 	bl	80004b0 <SPI1SendNByte>

	//wait on last ACK flag from client
	//while(!(SPI1SendNByteReceive1Byte(S0_SR_W5500,3)==0x1d));

	//close the connection
	SPI1SendNByteReceive1Byte(S0_CLOSE,3);
 80006ce:	2103      	movs	r1, #3
 80006d0:	4815      	ldr	r0, [pc, #84]	; (8000728 <W5500Init+0x158>)

}
 80006d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	SPI1SendNByteReceive1Byte(S0_CLOSE,3);
 80006d6:	f7ff bf0d 	b.w	80004f4 <SPI1SendNByteReceive1Byte>
 80006da:	bf00      	nop
 80006dc:	20000008 	.word	0x20000008
 80006e0:	20000054 	.word	0x20000054
 80006e4:	20000000 	.word	0x20000000
 80006e8:	20000028 	.word	0x20000028
 80006ec:	20000010 	.word	0x20000010
 80006f0:	20000020 	.word	0x20000020
 80006f4:	2000000c 	.word	0x2000000c
 80006f8:	2000001c 	.word	0x2000001c
 80006fc:	20000048 	.word	0x20000048
 8000700:	2000003c 	.word	0x2000003c
 8000704:	20000040 	.word	0x20000040
 8000708:	20000038 	.word	0x20000038
 800070c:	20000034 	.word	0x20000034
 8000710:	20000160 	.word	0x20000160
 8000714:	2000015c 	.word	0x2000015c
 8000718:	20000164 	.word	0x20000164
 800071c:	2000005a 	.word	0x2000005a
 8000720:	20000058 	.word	0x20000058
 8000724:	20000050 	.word	0x20000050
 8000728:	20000030 	.word	0x20000030

0800072c <main>:
void EXTI3_IRQHandler(void); 		//Initialization of handler for external interrupt on line 3

//
//MAIN
//
int main(void){
 800072c:	b538      	push	{r3, r4, r5, lr}
  uint32_t ret_code_from_sysTick; 	//return code from SysTick_Config function 1 for error see core_cm4.h
  uint8_t test_data[4] = {0x00,0x00,0x00,0xaa};
  uint8_t test_receive = 0x00;

  //Init GPIOA
  InitGPIO();
 800072e:	f7ff fd4b 	bl	80001c8 <InitGPIO>
  //Init SPI3
  SPI3Init();
 8000732:	f7ff ff13 	bl	800055c <SPI3Init>
  //Init SPI1
  SPI1Init();
 8000736:	f7ff fe7b 	bl	8000430 <SPI1Init>
  //W5500 initialize
  W5500Init();
 800073a:	f7ff ff49 	bl	80005d0 <W5500Init>

  //Configure system ticks to us range
  ret_code_from_sysTick = SysTick_Config(SystemCoreClock / 1000000);
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <main+0x38>)
 8000740:	4909      	ldr	r1, [pc, #36]	; (8000768 <main+0x3c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000744:	4a09      	ldr	r2, [pc, #36]	; (800076c <main+0x40>)
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000746:	4c0a      	ldr	r4, [pc, #40]	; (8000770 <main+0x44>)
 8000748:	fba1 1303 	umull	r1, r3, r1, r3
 800074c:	0c9b      	lsrs	r3, r3, #18
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800074e:	3b01      	subs	r3, #1
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000750:	25f0      	movs	r5, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000752:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000754:	2107      	movs	r1, #7
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000756:	6053      	str	r3, [r2, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000758:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800075c:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075e:	6011      	str	r1, [r2, #0]
 8000760:	e7fe      	b.n	8000760 <main+0x34>
 8000762:	bf00      	nop
 8000764:	2000016c 	.word	0x2000016c
 8000768:	431bde83 	.word	0x431bde83
 800076c:	e000e010 	.word	0xe000e010
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <EXTI3_IRQHandler>:
  }
}

//External interrupt handler on line 3
void EXTI3_IRQHandler(void){
	if((EXTI -> PR & EXTI_PR_PR3) != 0){
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <EXTI3_IRQHandler+0x2c>)
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	071b      	lsls	r3, r3, #28
 800077a:	d50f      	bpl.n	800079c <EXTI3_IRQHandler+0x28>
		if((GPIOD -> ODR & GPIO_ODR_ODR_13) != 0){
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <EXTI3_IRQHandler+0x30>)
 800077e:	695a      	ldr	r2, [r3, #20]
 8000780:	f412 5f00 	tst.w	r2, #8192	; 0x2000

			GPIOD -> ODR	&= ~(GPIO_ODR_ODR_13); 	//LED3 off
 8000784:	695a      	ldr	r2, [r3, #20]
 8000786:	bf14      	ite	ne
 8000788:	f422 5200 	bicne.w	r2, r2, #8192	; 0x2000
		}else{

			GPIOD -> ODR	|= GPIO_ODR_ODR_13; 	//LED3 on
 800078c:	f442 5200 	orreq.w	r2, r2, #8192	; 0x2000
 8000790:	615a      	str	r2, [r3, #20]
		}
		EXTI -> PR |= EXTI_PR_PR3; 	//Clear flag this is necessary
 8000792:	4a03      	ldr	r2, [pc, #12]	; (80007a0 <EXTI3_IRQHandler+0x2c>)
 8000794:	6953      	ldr	r3, [r2, #20]
 8000796:	f043 0308 	orr.w	r3, r3, #8
 800079a:	6153      	str	r3, [r2, #20]
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40013c00 	.word	0x40013c00
 80007a4:	40020c00 	.word	0x40020c00

080007a8 <EXTI0_IRQHandler>:
	}
}

//External interrupt handler on line 0
void EXTI0_IRQHandler(void){
	if((EXTI -> PR & EXTI_PR_PR0) != 0){
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <EXTI0_IRQHandler+0x2c>)
 80007aa:	695b      	ldr	r3, [r3, #20]
 80007ac:	07db      	lsls	r3, r3, #31
 80007ae:	d50f      	bpl.n	80007d0 <EXTI0_IRQHandler+0x28>
		if((GPIOD -> ODR & GPIO_ODR_ODR_13) != 0){
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <EXTI0_IRQHandler+0x30>)
 80007b2:	695a      	ldr	r2, [r3, #20]
 80007b4:	f412 5f00 	tst.w	r2, #8192	; 0x2000

			GPIOD -> ODR	&= ~(GPIO_ODR_ODR_13); 	//LED3 off
 80007b8:	695a      	ldr	r2, [r3, #20]
 80007ba:	bf14      	ite	ne
 80007bc:	f422 5200 	bicne.w	r2, r2, #8192	; 0x2000
		}else{

			GPIOD -> ODR	|= GPIO_ODR_ODR_13; 	//LED3 on
 80007c0:	f442 5200 	orreq.w	r2, r2, #8192	; 0x2000
 80007c4:	615a      	str	r2, [r3, #20]
		}
		EXTI -> PR |= EXTI_PR_PR0; 	//Clear flag this is necessary
 80007c6:	4a03      	ldr	r2, [pc, #12]	; (80007d4 <EXTI0_IRQHandler+0x2c>)
 80007c8:	6953      	ldr	r3, [r2, #20]
 80007ca:	f043 0301 	orr.w	r3, r3, #1
 80007ce:	6153      	str	r3, [r2, #20]
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	40013c00 	.word	0x40013c00
 80007d8:	40020c00 	.word	0x40020c00

080007dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000814 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80007e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80007e2:	e003      	b.n	80007ec <LoopCopyDataInit>

080007e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80007e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80007e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80007ea:	3104      	adds	r1, #4

080007ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80007ec:	480b      	ldr	r0, [pc, #44]	; (800081c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80007f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80007f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80007f4:	d3f6      	bcc.n	80007e4 <CopyDataInit>
  ldr  r2, =_sbss
 80007f6:	4a0b      	ldr	r2, [pc, #44]	; (8000824 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80007f8:	e002      	b.n	8000800 <LoopFillZerobss>

080007fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80007fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80007fc:	f842 3b04 	str.w	r3, [r2], #4

08000800 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000802:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000804:	d3f9      	bcc.n	80007fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000806:	f000 f82b 	bl	8000860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800080a:	f000 f8a7 	bl	800095c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800080e:	f7ff ff8d 	bl	800072c <main>
  bx  lr    
 8000812:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000814:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000818:	080009c4 	.word	0x080009c4
  ldr  r0, =_sdata
 800081c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000820:	20000170 	.word	0x20000170
  ldr  r2, =_sbss
 8000824:	20000170 	.word	0x20000170
  ldr  r3, = _ebss
 8000828:	20000190 	.word	0x20000190

0800082c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800082c:	e7fe      	b.n	800082c <ADC_IRQHandler>
	...

08000830 <NMI_Handler>:
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000834:	e7fe      	b.n	8000834 <HardFault_Handler>
 8000836:	bf00      	nop

08000838 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000838:	e7fe      	b.n	8000838 <MemManage_Handler>
 800083a:	bf00      	nop

0800083c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800083c:	e7fe      	b.n	800083c <BusFault_Handler>
 800083e:	bf00      	nop

08000840 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000840:	e7fe      	b.n	8000840 <UsageFault_Handler>
 8000842:	bf00      	nop

08000844 <SVC_Handler>:
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop

08000848 <DebugMon_Handler>:
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop

0800084c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop

08000850 <SysTick_Handler>:
  * @retval None
  */
void SysTick_Handler(void)
{
//*  TimingDelay_Decrement(); */
	delay_cnt--;
 8000850:	4a02      	ldr	r2, [pc, #8]	; (800085c <SysTick_Handler+0xc>)
 8000852:	6813      	ldr	r3, [r2, #0]
 8000854:	3b01      	subs	r3, #1
 8000856:	6013      	str	r3, [r2, #0]
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	2000018c 	.word	0x2000018c

08000860 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000860:	4938      	ldr	r1, [pc, #224]	; (8000944 <SystemInit+0xe4>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000862:	4b39      	ldr	r3, [pc, #228]	; (8000948 <SystemInit+0xe8>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000864:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000868:	4838      	ldr	r0, [pc, #224]	; (800094c <SystemInit+0xec>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800086a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800086e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8000872:	681a      	ldr	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000874:	2100      	movs	r1, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000876:	f042 0201 	orr.w	r2, r2, #1
 800087a:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800087c:	6099      	str	r1, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000884:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000888:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 800088a:	6058      	str	r0, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800088c:	681a      	ldr	r2, [r3, #0]
{
 800088e:	b082      	sub	sp, #8
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000890:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000894:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000896:	60d9      	str	r1, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000898:	9100      	str	r1, [sp, #0]
 800089a:	9101      	str	r1, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80008a2:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80008a4:	461a      	mov	r2, r3
 80008a6:	e003      	b.n	80008b0 <SystemInit+0x50>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80008a8:	9b00      	ldr	r3, [sp, #0]
 80008aa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80008ae:	d009      	beq.n	80008c4 <SystemInit+0x64>
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80008b0:	6813      	ldr	r3, [r2, #0]
 80008b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b6:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 80008b8:	9b00      	ldr	r3, [sp, #0]
 80008ba:	3301      	adds	r3, #1
 80008bc:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80008be:	9b01      	ldr	r3, [sp, #4]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d0f1      	beq.n	80008a8 <SystemInit+0x48>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80008c4:	4b20      	ldr	r3, [pc, #128]	; (8000948 <SystemInit+0xe8>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 80008cc:	bf18      	it	ne
 80008ce:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80008d0:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 80008d2:	9b01      	ldr	r3, [sp, #4]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d005      	beq.n	80008e4 <SystemInit+0x84>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008d8:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <SystemInit+0xe4>)
 80008da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008de:	609a      	str	r2, [r3, #8]
}
 80008e0:	b002      	add	sp, #8
 80008e2:	4770      	bx	lr
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80008e4:	4b18      	ldr	r3, [pc, #96]	; (8000948 <SystemInit+0xe8>)
    PWR->CR |= PWR_CR_VOS;
 80008e6:	491a      	ldr	r1, [pc, #104]	; (8000950 <SystemInit+0xf0>)
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80008e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80008ea:	481a      	ldr	r0, [pc, #104]	; (8000954 <SystemInit+0xf4>)
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80008ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80008f0:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80008f2:	680a      	ldr	r2, [r1, #0]
 80008f4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80008f8:	600a      	str	r2, [r1, #0]
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80008fa:	689a      	ldr	r2, [r3, #8]
 80008fc:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80008fe:	689a      	ldr	r2, [r3, #8]
 8000900:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000904:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000906:	689a      	ldr	r2, [r3, #8]
 8000908:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800090c:	609a      	str	r2, [r3, #8]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800090e:	6058      	str	r0, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000916:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	0192      	lsls	r2, r2, #6
 800091c:	d5fc      	bpl.n	8000918 <SystemInit+0xb8>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800091e:	490e      	ldr	r1, [pc, #56]	; (8000958 <SystemInit+0xf8>)
    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    RCC->CFGR |= RCC_CFGR_SW_PLL;

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000920:	4a09      	ldr	r2, [pc, #36]	; (8000948 <SystemInit+0xe8>)
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000922:	f240 7005 	movw	r0, #1797	; 0x705
 8000926:	6008      	str	r0, [r1, #0]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000928:	6899      	ldr	r1, [r3, #8]
 800092a:	f021 0103 	bic.w	r1, r1, #3
 800092e:	6099      	str	r1, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000930:	6899      	ldr	r1, [r3, #8]
 8000932:	f041 0102 	orr.w	r1, r1, #2
 8000936:	6099      	str	r1, [r3, #8]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000938:	6893      	ldr	r3, [r2, #8]
 800093a:	f003 030c 	and.w	r3, r3, #12
 800093e:	2b08      	cmp	r3, #8
 8000940:	d1fa      	bne.n	8000938 <SystemInit+0xd8>
 8000942:	e7c9      	b.n	80008d8 <SystemInit+0x78>
 8000944:	e000ed00 	.word	0xe000ed00
 8000948:	40023800 	.word	0x40023800
 800094c:	24003010 	.word	0x24003010
 8000950:	40007000 	.word	0x40007000
 8000954:	07405408 	.word	0x07405408
 8000958:	40023c00 	.word	0x40023c00

0800095c <__libc_init_array>:
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	4e0d      	ldr	r6, [pc, #52]	; (8000994 <__libc_init_array+0x38>)
 8000960:	4c0d      	ldr	r4, [pc, #52]	; (8000998 <__libc_init_array+0x3c>)
 8000962:	1ba4      	subs	r4, r4, r6
 8000964:	10a4      	asrs	r4, r4, #2
 8000966:	2500      	movs	r5, #0
 8000968:	42a5      	cmp	r5, r4
 800096a:	d109      	bne.n	8000980 <__libc_init_array+0x24>
 800096c:	4e0b      	ldr	r6, [pc, #44]	; (800099c <__libc_init_array+0x40>)
 800096e:	4c0c      	ldr	r4, [pc, #48]	; (80009a0 <__libc_init_array+0x44>)
 8000970:	f000 f818 	bl	80009a4 <_init>
 8000974:	1ba4      	subs	r4, r4, r6
 8000976:	10a4      	asrs	r4, r4, #2
 8000978:	2500      	movs	r5, #0
 800097a:	42a5      	cmp	r5, r4
 800097c:	d105      	bne.n	800098a <__libc_init_array+0x2e>
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000984:	4798      	blx	r3
 8000986:	3501      	adds	r5, #1
 8000988:	e7ee      	b.n	8000968 <__libc_init_array+0xc>
 800098a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800098e:	4798      	blx	r3
 8000990:	3501      	adds	r5, #1
 8000992:	e7f2      	b.n	800097a <__libc_init_array+0x1e>
 8000994:	080009bc 	.word	0x080009bc
 8000998:	080009bc 	.word	0x080009bc
 800099c:	080009bc 	.word	0x080009bc
 80009a0:	080009c0 	.word	0x080009c0

080009a4 <_init>:
 80009a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009a6:	bf00      	nop
 80009a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009aa:	bc08      	pop	{r3}
 80009ac:	469e      	mov	lr, r3
 80009ae:	4770      	bx	lr

080009b0 <_fini>:
 80009b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009b2:	bf00      	nop
 80009b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009b6:	bc08      	pop	{r3}
 80009b8:	469e      	mov	lr, r3
 80009ba:	4770      	bx	lr
